
n64usb4switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008680  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008818  08008818  00018818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001a8  20000000  08008880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a5c  200001a8  08008a28  000201a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000c04  08008a28  00020c04  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cfc4  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000343e  00000000  00000000  0003d19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001320  00000000  00000000  000405e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011e8  00000000  00000000  00041900  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a572  00000000  00000000  00042ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005d7b  00000000  00000000  0004d05a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00052dd5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005240  00000000  00000000  00052e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00058094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a8 	.word	0x200001a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008800 	.word	0x08008800

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ac 	.word	0x200001ac
 80001d4:	08008800 	.word	0x08008800

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	683a      	ldr	r2, [r7, #0]
 80004f6:	619a      	str	r2, [r3, #24]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	041a      	lsls	r2, r3, #16
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	619a      	str	r2, [r3, #24]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
	 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	HAL_Init();
 800052a:	f001 fd57 	bl	8001fdc <HAL_Init>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4a35      	ldr	r2, [pc, #212]	; (8000608 <main+0xe4>)
 8000534:	4b34      	ldr	r3, [pc, #208]	; (8000608 <main+0xe4>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b32      	ldr	r3, [pc, #200]	; (8000608 <main+0xe4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	4a2e      	ldr	r2, [pc, #184]	; (8000608 <main+0xe4>)
 8000550:	4b2d      	ldr	r3, [pc, #180]	; (8000608 <main+0xe4>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b2b      	ldr	r3, [pc, #172]	; (8000608 <main+0xe4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]

	/* Configure the system clock to 100 MHz */
	SystemClock_Config();
 8000566:	f000 f85f 	bl	8000628 <SystemClock_Config>

	/* -1- Enable GPIO Clock (to be able to program the configuration registers) */
	LEDx_GPIO_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4a26      	ldr	r2, [pc, #152]	; (8000608 <main+0xe4>)
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <main+0xe4>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <main+0xe4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

	LL_GPIOt.Mode  = LL_GPIO_MODE_OUTPUT;
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <main+0xe8>)
 8000588:	2201      	movs	r2, #1
 800058a:	605a      	str	r2, [r3, #4]
	LL_GPIOt.Pull  = LL_GPIO_OUTPUT_PUSHPULL;
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <main+0xe8>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
	LL_GPIOt.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000592:	4b1e      	ldr	r3, [pc, #120]	; (800060c <main+0xe8>)
 8000594:	2203      	movs	r2, #3
 8000596:	609a      	str	r2, [r3, #8]

	LL_GPIOt.Pin = LL_GPIO_PIN_2;
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <main+0xe8>)
 800059a:	2204      	movs	r2, #4
 800059c:	601a      	str	r2, [r3, #0]
	LL_GPIO_Init(GPIOA, &LL_GPIOt);
 800059e:	491b      	ldr	r1, [pc, #108]	; (800060c <main+0xe8>)
 80005a0:	481b      	ldr	r0, [pc, #108]	; (8000610 <main+0xec>)
 80005a2:	f005 f81a 	bl	80055da <LL_GPIO_Init>

	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_2);
 80005a6:	2104      	movs	r1, #4
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <main+0xec>)
 80005aa:	f7ff ff9d 	bl	80004e8 <LL_GPIO_SetOutputPin>
	HAL_Delay(100);
 80005ae:	2064      	movs	r0, #100	; 0x64
 80005b0:	f001 fd86 	bl	80020c0 <HAL_Delay>
	LL_GPIO_ResetOutputPin(GPIOA, GPIO_PIN_2);
 80005b4:	2104      	movs	r1, #4
 80005b6:	4816      	ldr	r0, [pc, #88]	; (8000610 <main+0xec>)
 80005b8:	f7ff ffa4 	bl	8000504 <LL_GPIO_ResetOutputPin>


	/* -2- Configure IO in output push-pull mode to drive external LEDs */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <main+0xf0>)
 80005be:	2201      	movs	r2, #1
 80005c0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <main+0xf0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <main+0xf0>)
 80005ca:	2203      	movs	r2, #3
 80005cc:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED2_PIN | LED3_PIN;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <main+0xf0>)
 80005d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LEDx_GPIO_PORT, &GPIO_InitStruct);
 80005d6:	490f      	ldr	r1, [pc, #60]	; (8000614 <main+0xf0>)
 80005d8:	480f      	ldr	r0, [pc, #60]	; (8000618 <main+0xf4>)
 80005da:	f001 fea3 	bl	8002324 <HAL_GPIO_Init>

	/* Init Device Library */
	USBD_Init(&USBD_Device, &HID_Desc, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	490e      	ldr	r1, [pc, #56]	; (800061c <main+0xf8>)
 80005e2:	480f      	ldr	r0, [pc, #60]	; (8000620 <main+0xfc>)
 80005e4:	f006 fd3e 	bl	8007064 <USBD_Init>

	/* Add Supported Class */
	USBD_RegisterClass(&USBD_Device, USBD_HID_CLASS);
 80005e8:	490e      	ldr	r1, [pc, #56]	; (8000624 <main+0x100>)
 80005ea:	480d      	ldr	r0, [pc, #52]	; (8000620 <main+0xfc>)
 80005ec:	f006 fd6a 	bl	80070c4 <USBD_RegisterClass>

	/* Start Device Process */
	USBD_Start(&USBD_Device);
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <main+0xfc>)
 80005f2:	f006 fd9d 	bl	8007130 <USBD_Start>

	n64_init();
 80005f6:	f000 f941 	bl	800087c <n64_init>


	MX_USART1_UART_Init();
 80005fa:	f000 f881 	bl	8000700 <MX_USART1_UART_Init>
	MX_TIM9_Init();
 80005fe:	f000 f8ad 	bl	800075c <MX_TIM9_Init>

	/* -3- Toggle IO in an infinite loop */
	while (1) {
		n64_main_loop();
 8000602:	f000 f9e1 	bl	80009c8 <n64_main_loop>
 8000606:	e7fc      	b.n	8000602 <main+0xde>
 8000608:	40023800 	.word	0x40023800
 800060c:	20000264 	.word	0x20000264
 8000610:	40020000 	.word	0x40020000
 8000614:	200001c4 	.word	0x200001c4
 8000618:	40020800 	.word	0x40020800
 800061c:	20000014 	.word	0x20000014
 8000620:	2000027c 	.word	0x2000027c
 8000624:	20000068 	.word	0x20000068

08000628 <SystemClock_Config>:
		while(1) {;}
	}
}

#else
void SystemClock_Config(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f008 f80e 	bl	8008658 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <SystemClock_Config+0xc8>)
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xc8>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemClock_Config+0xcc>)
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <SystemClock_Config+0xcc>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 25;
 8000698:	2319      	movs	r3, #25
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 192;
 800069c:	23c0      	movs	r3, #192	; 0xc0
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 fa63 	bl	8003b78 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
	  {
	    Error_Handler();
 80006b8:	f000 f81e 	bl	80006f8 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2103      	movs	r1, #3
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 fcc5 	bl	8004068 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc0>
	  {
	    Error_Handler();
 80006e4:	f000 f808 	bl	80006f8 <Error_Handler>
	  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	; 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <Error_Handler>:
	}
}
#endif


void Error_Handler(void) {
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006fe:	e7fe      	b.n	80006fe <Error_Handler+0x6>

08000700 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <MX_USART1_UART_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 3000000;//3150000;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART1_UART_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000712:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000716:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_2;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_USART1_UART_Init+0x50>)
 800071a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000728:	220c      	movs	r2, #12
 800072a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000734:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000738:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart1) != HAL_OK) {
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x50>)
 800073c:	f004 fa3a 	bl	8004bb4 <HAL_HalfDuplex_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x4a>
		Error_Handler();
 8000746:	f7ff ffd7 	bl	80006f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000558 	.word	0x20000558
 8000754:	40011000 	.word	0x40011000
 8000758:	002dc6c0 	.word	0x002dc6c0

0800075c <MX_TIM9_Init>:

static void MX_TIM9_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */
  uint32_t apb2_clock = PCLK1_clock();
 800076e:	f000 f83d 	bl	80007ec <PCLK1_clock>
 8000772:	6178      	str	r0, [r7, #20]
  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_TIM9_Init+0x88>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_TIM9_Init+0x8c>)
 8000778:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 999u;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_TIM9_Init+0x88>)
 800077c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000780:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_TIM9_Init+0x88>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = apb2_clock/((htim9.Init.Prescaler+1)*(200));
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_TIM9_Init+0x88>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	3301      	adds	r3, #1
 800078e:	22c8      	movs	r2, #200	; 0xc8
 8000790:	fb02 f303 	mul.w	r3, r2, r3
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_TIM9_Init+0x88>)
 800079c:	60d3      	str	r3, [r2, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_TIM9_Init+0x88>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_TIM9_Init+0x88>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <MX_TIM9_Init+0x88>)
 80007ac:	f003 fe2c 	bl	8004408 <HAL_TIM_Base_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 80007b6:	f7ff ff9f 	bl	80006f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_TIM9_Init+0x88>)
 80007c6:	f003 ffd9 	bl	800477c <HAL_TIM_ConfigClockSource>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80007d0:	f7ff ff92 	bl	80006f8 <Error_Handler>
  }
  HAL_TIM_Base_Start_IT(&htim9);
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <MX_TIM9_Init+0x88>)
 80007d6:	f003 fe67 	bl	80044a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000059c 	.word	0x2000059c
 80007e8:	40014000 	.word	0x40014000

080007ec <PCLK1_clock>:

uint32_t PCLK1_clock(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* Get PCLK1 frequency */
  uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 80007f2:	f003 fde1 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 80007f6:	6078      	str	r0, [r7, #4]
  /* Get PCLK1 prescaler */
  if((RCC->CFGR & RCC_CFGR_PPRE1) == 0)
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <PCLK1_clock+0x28>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <PCLK1_clock+0x1c>
  {
    /* PCLK1 prescaler equal to 1 => TIMCLK = PCLK1 */
    return (pclk1);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	e001      	b.n	800080c <PCLK1_clock+0x20>
  }
  else
  {
    /* PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1 */
    return(2 * pclk1);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	005b      	lsls	r3, r3, #1
  }
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800

08000818 <LL_GPIO_IsInputPinSet>:
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	691a      	ldr	r2, [r3, #16]
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	401a      	ands	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	bf0c      	ite	eq
 8000830:	2301      	moveq	r3, #1
 8000832:	2300      	movne	r3, #0
 8000834:	b2db      	uxtb	r3, r3
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <LL_GPIO_SetOutputPin>:
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	619a      	str	r2, [r3, #24]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <LL_GPIO_ResetOutputPin>:
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	041a      	lsls	r2, r3, #16
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	619a      	str	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <n64_init>:
	return output;

}


void n64_init(void){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	LL_GPIO_Ini.Mode = LL_GPIO_MODE_OUTPUT;
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <n64_init+0x6c>)
 8000882:	2201      	movs	r2, #1
 8000884:	605a      	str	r2, [r3, #4]
	LL_GPIO_Ini.Pull = LL_GPIO_PULL_UP;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <n64_init+0x6c>)
 8000888:	2201      	movs	r2, #1
 800088a:	611a      	str	r2, [r3, #16]
	LL_GPIO_Ini.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <n64_init+0x6c>)
 800088e:	2201      	movs	r2, #1
 8000890:	60da      	str	r2, [r3, #12]
	LL_GPIO_Ini.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <n64_init+0x6c>)
 8000894:	2203      	movs	r2, #3
 8000896:	609a      	str	r2, [r3, #8]

	LL_GPIO_Ini.Pin = LL_GPIO_PIN_8;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <n64_init+0x6c>)
 800089a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089e:	601a      	str	r2, [r3, #0]
	LL_GPIO_Init(GPIOA, &LL_GPIO_Ini);
 80008a0:	4911      	ldr	r1, [pc, #68]	; (80008e8 <n64_init+0x6c>)
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <n64_init+0x70>)
 80008a4:	f004 fe99 	bl	80055da <LL_GPIO_Init>
	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_8);
 80008a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ac:	480f      	ldr	r0, [pc, #60]	; (80008ec <n64_init+0x70>)
 80008ae:	f7ff ffc8 	bl	8000842 <LL_GPIO_SetOutputPin>


	LL_GPIO_Ini.Mode = LL_GPIO_MODE_OUTPUT;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <n64_init+0x6c>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
	LL_GPIO_Ini.Pull = LL_GPIO_PULL_UP;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <n64_init+0x6c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	611a      	str	r2, [r3, #16]
	LL_GPIO_Ini.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <n64_init+0x6c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
	LL_GPIO_Ini.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <n64_init+0x6c>)
 80008c6:	2203      	movs	r2, #3
 80008c8:	609a      	str	r2, [r3, #8]
	LL_GPIO_Ini.Pin = LL_GPIO_PIN_10;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <n64_init+0x6c>)
 80008cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008d0:	601a      	str	r2, [r3, #0]
	LL_GPIO_Init(GPIOA, &LL_GPIO_Ini);
 80008d2:	4905      	ldr	r1, [pc, #20]	; (80008e8 <n64_init+0x6c>)
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <n64_init+0x70>)
 80008d6:	f004 fe80 	bl	80055da <LL_GPIO_Init>
	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_10);
 80008da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008de:	4803      	ldr	r0, [pc, #12]	; (80008ec <n64_init+0x70>)
 80008e0:	f7ff ffaf 	bl	8000842 <LL_GPIO_SetOutputPin>


}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001d8 	.word	0x200001d8
 80008ec:	40020000 	.word	0x40020000

080008f0 <reverse>:

uint8_t reverse(uint8_t b) {
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	091b      	lsrs	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	b25a      	sxtb	r2, r3
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	b25b      	sxtb	r3, r3
 8000908:	4313      	orrs	r3, r2
 800090a:	b25b      	sxtb	r3, r3
 800090c:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	109b      	asrs	r3, r3, #2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8000918:	b25a      	sxtb	r2, r3
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	b25b      	sxtb	r3, r3
 8000920:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8000924:	b25b      	sxtb	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b25b      	sxtb	r3, r3
 800092a:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	105b      	asrs	r3, r3, #1
 8000930:	b25b      	sxtb	r3, r3
 8000932:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8000936:	b25a      	sxtb	r2, r3
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	b25b      	sxtb	r3, r3
 800093e:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8000942:	b25b      	sxtb	r3, r3
 8000944:	4313      	orrs	r3, r2
 8000946:	b25b      	sxtb	r3, r3
 8000948:	71fb      	strb	r3, [r7, #7]
   return b;
 800094a:	79fb      	ldrb	r3, [r7, #7]
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <n64schedule_update>:

void n64schedule_update(void){
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
	n64_read_flag = 1;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <n64schedule_update+0x14>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	20000244 	.word	0x20000244

08000970 <map>:

int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {
 8000970:	b490      	push	{r4, r7}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4604      	mov	r4, r0
 8000978:	4608      	mov	r0, r1
 800097a:	4611      	mov	r1, r2
 800097c:	461a      	mov	r2, r3
 800097e:	4623      	mov	r3, r4
 8000980:	80fb      	strh	r3, [r7, #6]
 8000982:	4603      	mov	r3, r0
 8000984:	80bb      	strh	r3, [r7, #4]
 8000986:	460b      	mov	r3, r1
 8000988:	807b      	strh	r3, [r7, #2]
 800098a:	4613      	mov	r3, r2
 800098c:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800098e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000992:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800099c:	f9b7 2000 	ldrsh.w	r2, [r7]
 80009a0:	1a8a      	subs	r2, r1, r2
 80009a2:	fb02 f203 	mul.w	r2, r2, r3
 80009a6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80009aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009ae:	1acb      	subs	r3, r1, r3
 80009b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	883b      	ldrh	r3, [r7, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b21b      	sxth	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc90      	pop	{r4, r7}
 80009c6:	4770      	bx	lr

080009c8 <n64_main_loop>:

void n64_main_loop(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
	static int8_t min_X=0,max_X=0,max_Y=0,min_Y=0;
	int16_t X=0,Y=0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	817b      	strh	r3, [r7, #10]
 80009d2:	2300      	movs	r3, #0
 80009d4:	813b      	strh	r3, [r7, #8]
	if(!n64_read_flag){
 80009d6:	4b79      	ldr	r3, [pc, #484]	; (8000bbc <n64_main_loop+0x1f4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 80e9 	beq.w	8000bb2 <n64_main_loop+0x1ea>
		return;
	}
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10);
 80009e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e4:	4876      	ldr	r0, [pc, #472]	; (8000bc0 <n64_main_loop+0x1f8>)
 80009e6:	f7ff ff3a 	bl	800085e <LL_GPIO_ResetOutputPin>
	HAL_StatusTypeDef status;
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80009ea:	4876      	ldr	r0, [pc, #472]	; (8000bc4 <n64_main_loop+0x1fc>)
 80009ec:	f004 fa6a 	bl	8004ec4 <HAL_HalfDuplex_EnableTransmitter>
	status = HAL_UART_Transmit(&huart1, (uint8_t*) packet, 8, 1);
 80009f0:	2301      	movs	r3, #1
 80009f2:	2208      	movs	r2, #8
 80009f4:	4974      	ldr	r1, [pc, #464]	; (8000bc8 <n64_main_loop+0x200>)
 80009f6:	4873      	ldr	r0, [pc, #460]	; (8000bc4 <n64_main_loop+0x1fc>)
 80009f8:	f004 f931 	bl	8004c5e <HAL_UART_Transmit>
 80009fc:	4603      	mov	r3, r0
 80009fe:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <n64_main_loop+0x42>
		Error_Handler();
 8000a06:	f7ff fe77 	bl	80006f8 <Error_Handler>
	}
	//while ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) ? SET : RESET) == RESET);

	huart1.Instance->DR = (uint16_t)(0x01e0 & 0x01FFU);
 8000a0a:	4b6e      	ldr	r3, [pc, #440]	; (8000bc4 <n64_main_loop+0x1fc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a12:	605a      	str	r2, [r3, #4]
	//if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, 2) != HAL_OK)
	//while ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) ? SET : RESET) == RESET);
	while(!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_9));
 8000a14:	bf00      	nop
 8000a16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1a:	4869      	ldr	r0, [pc, #420]	; (8000bc0 <n64_main_loop+0x1f8>)
 8000a1c:	f7ff fefc 	bl	8000818 <LL_GPIO_IsInputPinSet>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f7      	beq.n	8000a16 <n64_main_loop+0x4e>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10);
 8000a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2a:	4865      	ldr	r0, [pc, #404]	; (8000bc0 <n64_main_loop+0x1f8>)
 8000a2c:	f7ff ff09 	bl	8000842 <LL_GPIO_SetOutputPin>

	HAL_HalfDuplex_EnableReceiver(&huart1);
 8000a30:	4864      	ldr	r0, [pc, #400]	; (8000bc4 <n64_main_loop+0x1fc>)
 8000a32:	f004 fa7b 	bl	8004f2c <HAL_HalfDuplex_EnableReceiver>

	status = HAL_UART_Receive(&huart1, (uint8_t *) in_buff, 33, 1);
 8000a36:	2301      	movs	r3, #1
 8000a38:	2221      	movs	r2, #33	; 0x21
 8000a3a:	4964      	ldr	r1, [pc, #400]	; (8000bcc <n64_main_loop+0x204>)
 8000a3c:	4861      	ldr	r0, [pc, #388]	; (8000bc4 <n64_main_loop+0x1fc>)
 8000a3e:	f004 f99f 	bl	8004d80 <HAL_UART_Receive>
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK) {
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f040 80a8 	bne.w	8000b9e <n64_main_loop+0x1d6>
		respons = 0;
 8000a4e:	4b60      	ldr	r3, [pc, #384]	; (8000bd0 <n64_main_loop+0x208>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 32; i++) {
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e014      	b.n	8000a84 <n64_main_loop+0xbc>
			if (in_buff[i] & (1 << 5))
 8000a5a:	4a5c      	ldr	r2, [pc, #368]	; (8000bcc <n64_main_loop+0x204>)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a62:	f003 0320 	and.w	r3, r3, #32
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d009      	beq.n	8000a7e <n64_main_loop+0xb6>
				respons |= (1 << i);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b56      	ldr	r3, [pc, #344]	; (8000bd0 <n64_main_loop+0x208>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	4a55      	ldr	r2, [pc, #340]	; (8000bd0 <n64_main_loop+0x208>)
 8000a7c:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 32; i++) {
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b1f      	cmp	r3, #31
 8000a88:	dde7      	ble.n	8000a5a <n64_main_loop+0x92>
		}

		controller = *((n64_controller_t*) &respons);
 8000a8a:	4b51      	ldr	r3, [pc, #324]	; (8000bd0 <n64_main_loop+0x208>)
 8000a8c:	4a51      	ldr	r2, [pc, #324]	; (8000bd4 <n64_main_loop+0x20c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6013      	str	r3, [r2, #0]
		controller.AxisX = reverse(controller.AxisX);
 8000a92:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <n64_main_loop+0x20c>)
 8000a94:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff28 	bl	80008f0 <reverse>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b25a      	sxtb	r2, r3
 8000aa4:	4b4b      	ldr	r3, [pc, #300]	; (8000bd4 <n64_main_loop+0x20c>)
 8000aa6:	709a      	strb	r2, [r3, #2]
		controller.AxisY = reverse(controller.AxisY);
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <n64_main_loop+0x20c>)
 8000aaa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff1d 	bl	80008f0 <reverse>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b25a      	sxtb	r2, r3
 8000aba:	4b46      	ldr	r3, [pc, #280]	; (8000bd4 <n64_main_loop+0x20c>)
 8000abc:	70da      	strb	r2, [r3, #3]

		controller.AxisY = (uint8_t)(((uint16_t)controller.AxisY+1)*-1);
 8000abe:	4b45      	ldr	r3, [pc, #276]	; (8000bd4 <n64_main_loop+0x20c>)
 8000ac0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	425b      	negs	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	b25a      	sxtb	r2, r3
 8000ad0:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <n64_main_loop+0x20c>)
 8000ad2:	70da      	strb	r2, [r3, #3]

		if(controller.AxisX<min_X) min_X = controller.AxisX;
 8000ad4:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <n64_main_loop+0x20c>)
 8000ad6:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000ada:	4b3f      	ldr	r3, [pc, #252]	; (8000bd8 <n64_main_loop+0x210>)
 8000adc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	da04      	bge.n	8000aee <n64_main_loop+0x126>
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <n64_main_loop+0x20c>)
 8000ae6:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000aea:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <n64_main_loop+0x210>)
 8000aec:	701a      	strb	r2, [r3, #0]
		if(controller.AxisX>max_X) max_X = controller.AxisX;
 8000aee:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <n64_main_loop+0x20c>)
 8000af0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000af4:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <n64_main_loop+0x214>)
 8000af6:	f993 3000 	ldrsb.w	r3, [r3]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	dd04      	ble.n	8000b08 <n64_main_loop+0x140>
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <n64_main_loop+0x20c>)
 8000b00:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <n64_main_loop+0x214>)
 8000b06:	701a      	strb	r2, [r3, #0]
		if(controller.AxisY<min_Y) min_Y = controller.AxisY;
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <n64_main_loop+0x20c>)
 8000b0a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000b0e:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <n64_main_loop+0x218>)
 8000b10:	f993 3000 	ldrsb.w	r3, [r3]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	da04      	bge.n	8000b22 <n64_main_loop+0x15a>
 8000b18:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <n64_main_loop+0x20c>)
 8000b1a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000b1e:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <n64_main_loop+0x218>)
 8000b20:	701a      	strb	r2, [r3, #0]
		if(controller.AxisY>max_Y) max_Y = controller.AxisY;
 8000b22:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <n64_main_loop+0x20c>)
 8000b24:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000b28:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <n64_main_loop+0x21c>)
 8000b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dd04      	ble.n	8000b3c <n64_main_loop+0x174>
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <n64_main_loop+0x20c>)
 8000b34:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <n64_main_loop+0x21c>)
 8000b3a:	701a      	strb	r2, [r3, #0]

		//compensates genuine controllers range
		//X = (127.0/83.0)*controller.AxisX;
		//Y = (127.0/83.0)*controller.AxisY;

		X=map(controller.AxisX,min_X,max_X,-128,127);
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <n64_main_loop+0x20c>)
 8000b3e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000b42:	b218      	sxth	r0, r3
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <n64_main_loop+0x210>)
 8000b46:	f993 3000 	ldrsb.w	r3, [r3]
 8000b4a:	b219      	sxth	r1, r3
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <n64_main_loop+0x214>)
 8000b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	237f      	movs	r3, #127	; 0x7f
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000b5c:	f7ff ff08 	bl	8000970 <map>
 8000b60:	4603      	mov	r3, r0
 8000b62:	817b      	strh	r3, [r7, #10]
		Y=map(controller.AxisY,min_Y,max_Y,-128,127);
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <n64_main_loop+0x20c>)
 8000b66:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000b6a:	b218      	sxth	r0, r3
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <n64_main_loop+0x218>)
 8000b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b72:	b219      	sxth	r1, r3
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <n64_main_loop+0x21c>)
 8000b76:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	237f      	movs	r3, #127	; 0x7f
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000b84:	f7ff fef4 	bl	8000970 <map>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	813b      	strh	r3, [r7, #8]

		controller.AxisX = (int8_t)X;
 8000b8c:	897b      	ldrh	r3, [r7, #10]
 8000b8e:	b25a      	sxtb	r2, r3
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <n64_main_loop+0x20c>)
 8000b92:	709a      	strb	r2, [r3, #2]
		controller.AxisY = (int8_t)Y;
 8000b94:	893b      	ldrh	r3, [r7, #8]
 8000b96:	b25a      	sxtb	r2, r3
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <n64_main_loop+0x20c>)
 8000b9a:	70da      	strb	r2, [r3, #3]
 8000b9c:	e005      	b.n	8000baa <n64_main_loop+0x1e2>

	}
	else if (status == HAL_TIMEOUT){
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d102      	bne.n	8000baa <n64_main_loop+0x1e2>
		__HAL_UART_FLUSH_DRREGISTER(&huart1);
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <n64_main_loop+0x1fc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
	}
	n64_read_flag=0;
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <n64_main_loop+0x1f4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	e000      	b.n	8000bb4 <n64_main_loop+0x1ec>
		return;
 8000bb2:	bf00      	nop

	}
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000244 	.word	0x20000244
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	20000558 	.word	0x20000558
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	200001f0 	.word	0x200001f0
 8000bd0:	20000240 	.word	0x20000240
 8000bd4:	200005e4 	.word	0x200005e4
 8000bd8:	20000245 	.word	0x20000245
 8000bdc:	20000246 	.word	0x20000246
 8000be0:	20000247 	.word	0x20000247
 8000be4:	20000248 	.word	0x20000248

08000be8 <n64_prepare_hid_report>:

void n64_prepare_hid_report(uint8_t* buffer){
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	uint16_t sw_buttons=0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	81fb      	strh	r3, [r7, #14]

	uint8_t RightX =127,RightY =127;
 8000bf4:	237f      	movs	r3, #127	; 0x7f
 8000bf6:	737b      	strb	r3, [r7, #13]
 8000bf8:	237f      	movs	r3, #127	; 0x7f
 8000bfa:	733b      	strb	r3, [r7, #12]

	if(controller.ButtonA) sw_buttons|=SWITCH_A;
 8000bfc:	4ba0      	ldr	r3, [pc, #640]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <n64_prepare_hid_report+0x2a>
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	81fb      	strh	r3, [r7, #14]
	if(controller.ButtonB) sw_buttons|=SWITCH_B;
 8000c12:	4b9b      	ldr	r3, [pc, #620]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <n64_prepare_hid_report+0x40>
 8000c20:	89fb      	ldrh	r3, [r7, #14]
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	81fb      	strh	r3, [r7, #14]
	if(controller.ButtonStart) sw_buttons|=SWITCH_START;
 8000c28:	4b95      	ldr	r3, [pc, #596]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <n64_prepare_hid_report+0x56>
 8000c36:	89fb      	ldrh	r3, [r7, #14]
 8000c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3c:	81fb      	strh	r3, [r7, #14]
	if(controller.ButtonL) sw_buttons|=SWITCH_L;
 8000c3e:	4b90      	ldr	r3, [pc, #576]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000c40:	785b      	ldrb	r3, [r3, #1]
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <n64_prepare_hid_report+0x6c>
 8000c4c:	89fb      	ldrh	r3, [r7, #14]
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	81fb      	strh	r3, [r7, #14]
	if(controller.ButtonR) sw_buttons|=SWITCH_R;
 8000c54:	4b8a      	ldr	r3, [pc, #552]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000c56:	785b      	ldrb	r3, [r3, #1]
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <n64_prepare_hid_report+0x82>
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	f043 0320 	orr.w	r3, r3, #32
 8000c68:	81fb      	strh	r3, [r7, #14]
	if(controller.ButtonZ) sw_buttons|=SWITCH_ZL;
 8000c6a:	4b85      	ldr	r3, [pc, #532]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <n64_prepare_hid_report+0x98>
 8000c78:	89fb      	ldrh	r3, [r7, #14]
 8000c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7e:	81fb      	strh	r3, [r7, #14]

	if(controller.ButtonCUp) RightY=0;
 8000c80:	4b7f      	ldr	r3, [pc, #508]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000c82:	785b      	ldrb	r3, [r3, #1]
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <n64_prepare_hid_report+0xaa>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	733b      	strb	r3, [r7, #12]
	if(controller.ButtonCDown) RightY=255;
 8000c92:	4b7b      	ldr	r3, [pc, #492]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <n64_prepare_hid_report+0xbc>
 8000ca0:	23ff      	movs	r3, #255	; 0xff
 8000ca2:	733b      	strb	r3, [r7, #12]
	if(controller.ButtonCLeft) RightX=0;
 8000ca4:	4b76      	ldr	r3, [pc, #472]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000ca6:	785b      	ldrb	r3, [r3, #1]
 8000ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <n64_prepare_hid_report+0xce>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	737b      	strb	r3, [r7, #13]
	if(controller.ButtonCRight) RightX=255;
 8000cb6:	4b72      	ldr	r3, [pc, #456]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000cb8:	785b      	ldrb	r3, [r3, #1]
 8000cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <n64_prepare_hid_report+0xe0>
 8000cc4:	23ff      	movs	r3, #255	; 0xff
 8000cc6:	737b      	strb	r3, [r7, #13]

	uint8_t dpad = 0, hat =0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	72fb      	strb	r3, [r7, #11]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	72bb      	strb	r3, [r7, #10]
	if(controller.ButtonUp) dpad |= 0x80;
 8000cd0:	4b6b      	ldr	r3, [pc, #428]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <n64_prepare_hid_report+0xfe>
 8000cde:	7afb      	ldrb	r3, [r7, #11]
 8000ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce4:	72fb      	strb	r3, [r7, #11]
	if(controller.ButtonDown) dpad |= 0x40;
 8000ce6:	4b66      	ldr	r3, [pc, #408]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	f003 0320 	and.w	r3, r3, #32
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <n64_prepare_hid_report+0x114>
 8000cf4:	7afb      	ldrb	r3, [r7, #11]
 8000cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfa:	72fb      	strb	r3, [r7, #11]
	if(controller.ButtonLeft) dpad |= 0x10;
 8000cfc:	4b60      	ldr	r3, [pc, #384]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <n64_prepare_hid_report+0x12a>
 8000d0a:	7afb      	ldrb	r3, [r7, #11]
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	72fb      	strb	r3, [r7, #11]
	if(controller.ButtonRight) dpad |= 0x20;
 8000d12:	4b5b      	ldr	r3, [pc, #364]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <n64_prepare_hid_report+0x140>
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	f043 0320 	orr.w	r3, r3, #32
 8000d26:	72fb      	strb	r3, [r7, #11]

	switch(dpad & 0xF0) {
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d2e:	2b50      	cmp	r3, #80	; 0x50
 8000d30:	d023      	beq.n	8000d7a <n64_prepare_hid_report+0x192>
 8000d32:	2b50      	cmp	r3, #80	; 0x50
 8000d34:	dc06      	bgt.n	8000d44 <n64_prepare_hid_report+0x15c>
 8000d36:	2b20      	cmp	r3, #32
 8000d38:	d016      	beq.n	8000d68 <n64_prepare_hid_report+0x180>
 8000d3a:	2b40      	cmp	r3, #64	; 0x40
 8000d3c:	d01a      	beq.n	8000d74 <n64_prepare_hid_report+0x18c>
 8000d3e:	2b10      	cmp	r3, #16
 8000d40:	d01e      	beq.n	8000d80 <n64_prepare_hid_report+0x198>
 8000d42:	e023      	b.n	8000d8c <n64_prepare_hid_report+0x1a4>
 8000d44:	2b80      	cmp	r3, #128	; 0x80
 8000d46:	d009      	beq.n	8000d5c <n64_prepare_hid_report+0x174>
 8000d48:	2b80      	cmp	r3, #128	; 0x80
 8000d4a:	dc02      	bgt.n	8000d52 <n64_prepare_hid_report+0x16a>
 8000d4c:	2b60      	cmp	r3, #96	; 0x60
 8000d4e:	d00e      	beq.n	8000d6e <n64_prepare_hid_report+0x186>
 8000d50:	e01c      	b.n	8000d8c <n64_prepare_hid_report+0x1a4>
 8000d52:	2b90      	cmp	r3, #144	; 0x90
 8000d54:	d017      	beq.n	8000d86 <n64_prepare_hid_report+0x19e>
 8000d56:	2ba0      	cmp	r3, #160	; 0xa0
 8000d58:	d003      	beq.n	8000d62 <n64_prepare_hid_report+0x17a>
 8000d5a:	e017      	b.n	8000d8c <n64_prepare_hid_report+0x1a4>
			case 0x80: // Top
				hat = 0x00;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	72bb      	strb	r3, [r7, #10]
				break;
 8000d60:	e016      	b.n	8000d90 <n64_prepare_hid_report+0x1a8>
			case 0xA0: // Top-Right
				hat = 0x01;
 8000d62:	2301      	movs	r3, #1
 8000d64:	72bb      	strb	r3, [r7, #10]
				break;
 8000d66:	e013      	b.n	8000d90 <n64_prepare_hid_report+0x1a8>
			case 0x20: // Right
				hat = 0x02;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	72bb      	strb	r3, [r7, #10]
				break;
 8000d6c:	e010      	b.n	8000d90 <n64_prepare_hid_report+0x1a8>
			case 0x60: // Bottom-Right
				hat = 0x03;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	72bb      	strb	r3, [r7, #10]
				break;
 8000d72:	e00d      	b.n	8000d90 <n64_prepare_hid_report+0x1a8>
			case 0x40: // Bottom
				hat= 0x04;
 8000d74:	2304      	movs	r3, #4
 8000d76:	72bb      	strb	r3, [r7, #10]
				break;
 8000d78:	e00a      	b.n	8000d90 <n64_prepare_hid_report+0x1a8>
			case 0x50: // Bottom-Left
				hat = 0x05;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	72bb      	strb	r3, [r7, #10]
				break;
 8000d7e:	e007      	b.n	8000d90 <n64_prepare_hid_report+0x1a8>
			case 0x10: // Left
				hat = 0x06;
 8000d80:	2306      	movs	r3, #6
 8000d82:	72bb      	strb	r3, [r7, #10]
				break;
 8000d84:	e004      	b.n	8000d90 <n64_prepare_hid_report+0x1a8>
			case 0x90: // Top-Left
				hat = 0x07;
 8000d86:	2307      	movs	r3, #7
 8000d88:	72bb      	strb	r3, [r7, #10]
				break;
 8000d8a:	e001      	b.n	8000d90 <n64_prepare_hid_report+0x1a8>
			default:
				hat = 0x08;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	72bb      	strb	r3, [r7, #10]
	}

	//LeftY = (uint8_t) ((uint16_t)(controller.AxisY+128));


	if((controller.ButtonL) &(controller.ButtonZ)&(controller.ButtonLeft)){
 8000d90:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000d92:	785b      	ldrb	r3, [r3, #1]
 8000d94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4013      	ands	r3, r2
 8000da8:	4a35      	ldr	r2, [pc, #212]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000daa:	7812      	ldrb	r2, [r2, #0]
 8000dac:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <n64_prepare_hid_report+0x1d8>
		sw_buttons|=SWITCH_CAPTURE;
 8000db8:	89fb      	ldrh	r3, [r7, #14]
 8000dba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dbe:	81fb      	strh	r3, [r7, #14]
	}
	if((controller.ButtonL) &(controller.ButtonZ)&(controller.ButtonUp)){
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000dc2:	785b      	ldrb	r3, [r3, #1]
 8000dc4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000dda:	7812      	ldrb	r2, [r2, #0]
 8000ddc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <n64_prepare_hid_report+0x208>
		sw_buttons|=SWITCH_SELECT;
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	81fb      	strh	r3, [r7, #14]
	}
	if((controller.ButtonL) &(controller.ButtonZ)&(controller.ButtonRight)){
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4013      	ands	r3, r2
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <n64_prepare_hid_report+0x238>
		sw_buttons|=SWITCH_HOME;
 8000e18:	89fb      	ldrh	r3, [r7, #14]
 8000e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e1e:	81fb      	strh	r3, [r7, #14]
	}

	buffer[0] = sw_buttons&0xff;
 8000e20:	89fb      	ldrh	r3, [r7, #14]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	701a      	strb	r2, [r3, #0]
	buffer[1] = (sw_buttons>>8)&0xff;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	89fa      	ldrh	r2, [r7, #14]
 8000e2e:	0a12      	lsrs	r2, r2, #8
 8000e30:	b292      	uxth	r2, r2
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	701a      	strb	r2, [r3, #0]
	buffer[2] = hat;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	7aba      	ldrb	r2, [r7, #10]
 8000e3c:	701a      	strb	r2, [r3, #0]
	buffer[3] = (uint8_t)(((int8_t) controller.AxisX)+128);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3303      	adds	r3, #3
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000e44:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	3a80      	subs	r2, #128	; 0x80
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
	buffer[4] = (uint8_t)(((int8_t) controller.AxisY)+128);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3304      	adds	r3, #4
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <n64_prepare_hid_report+0x298>)
 8000e56:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	3a80      	subs	r2, #128	; 0x80
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	701a      	strb	r2, [r3, #0]
	buffer[5] = RightX;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3305      	adds	r3, #5
 8000e66:	7b7a      	ldrb	r2, [r7, #13]
 8000e68:	701a      	strb	r2, [r3, #0]
	buffer[6] = RightY;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3306      	adds	r3, #6
 8000e6e:	7b3a      	ldrb	r2, [r7, #12]
 8000e70:	701a      	strb	r2, [r3, #0]

}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200005e4 	.word	0x200005e4

08000e84 <USBD_HID_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t * length)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2212      	movs	r2, #18
 8000e94:	801a      	strh	r2, [r3, #0]
  return (uint8_t *) USBD_DeviceDesc;
 8000e96:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <USBD_HID_DeviceDescriptor+0x20>)
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	20000030 	.word	0x20000030

08000ea8 <USBD_HID_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed,
                                      uint16_t * length)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *) USBD_LangIDDesc;
 8000eba:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	20000044 	.word	0x20000044

08000ecc <USBD_HID_ProductStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed,
                                       uint16_t * length)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d105      	bne.n	8000eea <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_PRODUCT_HS_STRING, USBD_StrDesc,
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <USBD_HID_ProductStrDescriptor+0x34>)
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <USBD_HID_ProductStrDescriptor+0x38>)
 8000ee4:	f007 fac1 	bl	800846a <USBD_GetString>
 8000ee8:	e004      	b.n	8000ef4 <USBD_HID_ProductStrDescriptor+0x28>
                   length);
  }
  else
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_PRODUCT_FS_STRING, USBD_StrDesc,
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	4904      	ldr	r1, [pc, #16]	; (8000f00 <USBD_HID_ProductStrDescriptor+0x34>)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <USBD_HID_ProductStrDescriptor+0x38>)
 8000ef0:	f007 fabb 	bl	800846a <USBD_GetString>
                   length);
  }
  return USBD_StrDesc;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <USBD_HID_ProductStrDescriptor+0x34>)
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200005e8 	.word	0x200005e8
 8000f04:	08008818 	.word	0x08008818

08000f08 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed,
                                            uint16_t * length)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *) (uint8_t *) USBD_MANUFACTURER_STRING, USBD_StrDesc,
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	4904      	ldr	r1, [pc, #16]	; (8000f28 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <USBD_HID_ManufacturerStrDescriptor+0x24>)
 8000f1a:	f007 faa6 	bl	800846a <USBD_GetString>
                 length);
  return USBD_StrDesc;
 8000f1e:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200005e8 	.word	0x200005e8
 8000f2c:	0800882c 	.word	0x0800882c

08000f30 <USBD_HID_SerialStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed,
                                      uint16_t * length)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	221a      	movs	r2, #26
 8000f40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000f42:	f000 f843 	bl	8000fcc <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8000f46:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <USBD_HID_SerialStrDescriptor+0x20>)
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000048 	.word	0x20000048

08000f54 <USBD_HID_ConfigStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed,
                                      uint16_t * length)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d105      	bne.n	8000f72 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_CONFIGURATION_HS_STRING,
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <USBD_HID_ConfigStrDescriptor+0x34>)
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <USBD_HID_ConfigStrDescriptor+0x38>)
 8000f6c:	f007 fa7d 	bl	800846a <USBD_GetString>
 8000f70:	e004      	b.n	8000f7c <USBD_HID_ConfigStrDescriptor+0x28>
                   USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_CONFIGURATION_FS_STRING,
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	4904      	ldr	r1, [pc, #16]	; (8000f88 <USBD_HID_ConfigStrDescriptor+0x34>)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <USBD_HID_ConfigStrDescriptor+0x38>)
 8000f78:	f007 fa77 	bl	800846a <USBD_GetString>
                   USBD_StrDesc, length);
  }
  return USBD_StrDesc;
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200005e8 	.word	0x200005e8
 8000f8c:	0800883c 	.word	0x0800883c

08000f90 <USBD_HID_InterfaceStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed,
                                         uint16_t * length)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d105      	bne.n	8000fae <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_INTERFACE_HS_STRING,
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8000fa6:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8000fa8:	f007 fa5f 	bl	800846a <USBD_GetString>
 8000fac:	e004      	b.n	8000fb8 <USBD_HID_InterfaceStrDescriptor+0x28>
                   USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_INTERFACE_FS_STRING,
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	4904      	ldr	r1, [pc, #16]	; (8000fc4 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8000fb4:	f007 fa59 	bl	800846a <USBD_GetString>
                   USBD_StrDesc, length);
  }
  return USBD_StrDesc;
 8000fb8:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200005e8 	.word	0x200005e8
 8000fc8:	08008848 	.word	0x08008848

08000fcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <Get_SerialNum+0x44>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <Get_SerialNum+0x48>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <Get_SerialNum+0x4c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d009      	beq.n	8001006 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	4909      	ldr	r1, [pc, #36]	; (800101c <Get_SerialNum+0x50>)
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f814 	bl	8001024 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <Get_SerialNum+0x54>)
 8001000:	68b8      	ldr	r0, [r7, #8]
 8001002:	f000 f80f 	bl	8001024 <IntToUnicode>
  }
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	1fff7a10 	.word	0x1fff7a10
 8001014:	1fff7a14 	.word	0x1fff7a14
 8001018:	1fff7a18 	.word	0x1fff7a18
 800101c:	2000004a 	.word	0x2000004a
 8001020:	2000005a 	.word	0x2000005a

08001024 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	4613      	mov	r3, r2
 8001030:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8001036:	2300      	movs	r3, #0
 8001038:	75fb      	strb	r3, [r7, #23]
 800103a:	e027      	b.n	800108c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	0f1b      	lsrs	r3, r3, #28
 8001040:	2b09      	cmp	r3, #9
 8001042:	d80b      	bhi.n	800105c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	461a      	mov	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	0f12      	lsrs	r2, r2, #28
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	3230      	adds	r2, #48	; 0x30
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	e00a      	b.n	8001072 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	461a      	mov	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	0f12      	lsrs	r2, r2, #28
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	3237      	adds	r2, #55	; 0x37
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	3301      	adds	r3, #1
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	4413      	add	r3, r2
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	3301      	adds	r3, #1
 800108a:	75fb      	strb	r3, [r7, #23]
 800108c:	7dfa      	ldrb	r2, [r7, #23]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	429a      	cmp	r2, r3
 8001092:	d3d3      	bcc.n	800103c <IntToUnicode+0x18>
  }
}
 8001094:	bf00      	nop
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010a6:	e003      	b.n	80010b0 <LoopCopyDataInit>

080010a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ae:	3104      	adds	r1, #4

080010b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010b8:	d3f6      	bcc.n	80010a8 <CopyDataInit>
  ldr  r2, =_sbss
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010bc:	e002      	b.n	80010c4 <LoopFillZerobss>

080010be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010c0:	f842 3b04 	str.w	r3, [r2], #4

080010c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010c8:	d3f9      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ca:	f000 f9b3 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f007 fa8f 	bl	80085f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fa27 	bl	8000524 <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010dc:	08008880 	.word	0x08008880
  ldr  r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010e4:	200001a8 	.word	0x200001a8
  ldr  r2, =_sbss
 80010e8:	200001a8 	.word	0x200001a8
  ldr  r3, = _ebss
 80010ec:	20000c04 	.word	0x20000c04

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <HAL_UART_MspInit>:
//  /* Enable the TIMx global Interrupt */
//  HAL_NVIC_EnableIRQ(TIMx_IRQn);
//}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_UART_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12c      	bne.n	8001170 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
	/* Peripheral clock enable */
	__HAL_RCC_USART1_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_UART_MspInit+0x88>)
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_UART_MspInit+0x88>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_UART_MspInit+0x88>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_UART_MspInit+0x88>)
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_UART_MspInit+0x88>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_UART_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
	/**USART1 GPIO Configuration
	PA9     ------> USART1_TX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800114e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001152:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;//GPIO_MODE_AF_OD;
 8001154:	2302      	movs	r3, #2
 8001156:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001160:	2307      	movs	r3, #7
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_UART_MspInit+0x8c>)
 800116c:	f001 f8da 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40011000 	.word	0x40011000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_MspInit>:

}


void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_MspInit+0x4c>)
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_MspInit+0x4c>)
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_MspInit+0x4c>)
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_MspInit+0x4c>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_TIM_Base_MspInit+0x48>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d115      	bne.n	8001212 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_TIM_Base_MspInit+0x4c>)
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_TIM_Base_MspInit+0x4c>)
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_TIM_Base_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2018      	movs	r0, #24
 8001208:	f001 f855 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800120c:	2018      	movs	r0, #24
 800120e:	f001 f86e 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40014000 	.word	0x40014000
 8001220:	40023800 	.word	0x40023800

08001224 <LL_GPIO_SetOutputPin>:
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	619a      	str	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_GPIO_ResetOutputPin>:
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	041a      	lsls	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001270:	e7fe      	b.n	8001270 <HardFault_Handler+0x4>

08001272 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001276:	e7fe      	b.n	8001276 <MemManage_Handler+0x4>

08001278 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800127c:	e7fe      	b.n	800127c <BusFault_Handler+0x4>

0800127e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001282:	e7fe      	b.n	8001282 <UsageFault_Handler+0x4>

08001284 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80012b0:	b598      	push	{r3, r4, r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  static __IO uint32_t hid_report_counter = 0;
  HAL_IncTick();
 80012b4:	f000 fee4 	bl	8002080 <HAL_IncTick>

  /* check Joystick state every polling interval (10ms) */
  if (hid_report_counter++ == USBD_HID_GetPollingInterval(&USBD_Device))
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <SysTick_Handler+0x38>)
 80012ba:	681c      	ldr	r4, [r3, #0]
 80012bc:	1c63      	adds	r3, r4, #1
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Handler+0x38>)
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <SysTick_Handler+0x3c>)
 80012c4:	f000 fe02 	bl	8001ecc <USBD_HID_GetPollingInterval>
 80012c8:	4603      	mov	r3, r0
 80012ca:	429c      	cmp	r4, r3
 80012cc:	d10a      	bne.n	80012e4 <SysTick_Handler+0x34>
  {
    GetReportData(HID_Buffer);
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <SysTick_Handler+0x40>)
 80012d0:	f000 f873 	bl	80013ba <GetReportData>

    /* send data though IN endpoint */
    //if ((HID_Buffer[0] != 0) || (HID_Buffer[1] != 0)|| (HID_Buffer[2] != 0))
    //{
    USBD_HID_SendReport(&USBD_Device, HID_Buffer, 8);
 80012d4:	2208      	movs	r2, #8
 80012d6:	4906      	ldr	r1, [pc, #24]	; (80012f0 <SysTick_Handler+0x40>)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <SysTick_Handler+0x3c>)
 80012da:	f000 fdc7 	bl	8001e6c <USBD_HID_SendReport>
    //}
    hid_report_counter = 0;
 80012de:	4b02      	ldr	r3, [pc, #8]	; (80012e8 <SysTick_Handler+0x38>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
  }



}
 80012e4:	bf00      	nop
 80012e6:	bd98      	pop	{r3, r4, r7, pc}
 80012e8:	2000024c 	.word	0x2000024c
 80012ec:	2000027c 	.word	0x2000027c
 80012f0:	200006e8 	.word	0x200006e8

080012f4 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <OTG_FS_IRQHandler+0x10>)
 80012fa:	f001 fafd 	bl	80028f8 <HAL_PCD_IRQHandler>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200006f0 	.word	0x200006f0

08001308 <OTG_FS_WKUP_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_WKUP_IRQHandler(void)
#else
void OTG_HS_WKUP_IRQHandler(void)
#endif
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  if ((&hpcd)->Init.low_power_enable)
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <OTG_FS_WKUP_IRQHandler+0x90>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d038      	beq.n	8001386 <OTG_FS_WKUP_IRQHandler+0x7e>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &=
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <OTG_FS_WKUP_IRQHandler+0x94>)
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <OTG_FS_WKUP_IRQHandler+0x94>)
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	f023 0306 	bic.w	r3, r3, #6
 800131e:	6113      	str	r3, [r2, #16]

    /* Configures system clock after wake-up from STOP: enable HSE, PLL and
     * select PLL as system clock source (HSE and PLL are disabled in STOP
     * mode) */

    __HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
 8001320:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132c:	bf00      	nop
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f9      	beq.n	800132e <OTG_FS_WKUP_IRQHandler+0x26>
    {
    }

    /* Enable the main PLL. */
    __HAL_RCC_PLL_ENABLE();
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <OTG_FS_WKUP_IRQHandler+0x9c>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001340:	bf00      	nop
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f9      	beq.n	8001342 <OTG_FS_WKUP_IRQHandler+0x3a>
    {
    }

    /* Select PLL as SYSCLK */
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_SYSCLKSOURCE_PLLCLK);
 800134e:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f023 0303 	bic.w	r3, r3, #3
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6093      	str	r3, [r2, #8]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800135e:	bf00      	nop
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b08      	cmp	r3, #8
 800136a:	d1f9      	bne.n	8001360 <OTG_FS_WKUP_IRQHandler+0x58>
    {
    }

    /* ungate PHY clock */
    __HAL_PCD_UNGATE_PHYCLOCK((&hpcd));
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <OTG_FS_WKUP_IRQHandler+0x90>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001374:	461a      	mov	r2, r3
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <OTG_FS_WKUP_IRQHandler+0x90>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6013      	str	r3, [r2, #0]
  }
#ifdef USE_USB_FS
  /* Clear EXTI pending Bit */
  __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <OTG_FS_WKUP_IRQHandler+0xa0>)
 8001388:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800138c:	615a      	str	r2, [r3, #20]
#else
  /* Clear EXTI pending Bit */
  __HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG();
#endif

}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	200006f0 	.word	0x200006f0
 800139c:	e000ed00 	.word	0xe000ed00
 80013a0:	40023800 	.word	0x40023800
 80013a4:	42470060 	.word	0x42470060
 80013a8:	40013c00 	.word	0x40013c00

080013ac <EXTI4_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON0_PIN);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f001 f939 	bl	8002628 <HAL_GPIO_EXTI_IRQHandler>
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}

080013ba <GetReportData>:
  * @brief  Gets Pointer Data.
  * @param  pbuf: Pointer to report
  * @retval None
  */
static void GetReportData(uint8_t * pbuf)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  //clears buffer
  pbuf[0] = 0;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
  pbuf[1] = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3301      	adds	r3, #1
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
  pbuf[2] = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3302      	adds	r3, #2
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
  pbuf[3] = 0;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3303      	adds	r3, #3
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
  pbuf[4] = 0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3304      	adds	r3, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
  pbuf[5] = 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3305      	adds	r3, #5
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
  pbuf[6] = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3306      	adds	r3, #6
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]

  //fills buffer with n64 hid report
  n64_prepare_hid_report(pbuf);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fbf5 	bl	8000be8 <n64_prepare_hid_report>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <TIM1_BRK_TIM9_IRQHandler+0x24>)
 800140e:	f003 f8ad 	bl	800456c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_2);
 8001412:	2104      	movs	r1, #4
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <TIM1_BRK_TIM9_IRQHandler+0x28>)
 8001416:	f7ff ff05 	bl	8001224 <LL_GPIO_SetOutputPin>
  LL_GPIO_ResetOutputPin(GPIOA, GPIO_PIN_2);
 800141a:	2104      	movs	r1, #4
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <TIM1_BRK_TIM9_IRQHandler+0x28>)
 800141e:	f7ff ff0f 	bl	8001240 <LL_GPIO_ResetOutputPin>
  n64schedule_update();
 8001422:	f7ff fa99 	bl	8000958 <n64schedule_update>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000059c 	.word	0x2000059c
 8001430:	40020000 	.word	0x40020000

08001434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001438:	4a16      	ldr	r2, [pc, #88]	; (8001494 <SystemInit+0x60>)
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <SystemInit+0x60>)
 800143c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <SystemInit+0x64>)
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <SystemInit+0x64>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <SystemInit+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <SystemInit+0x64>)
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <SystemInit+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <SystemInit+0x64>)
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <SystemInit+0x68>)
 800146e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001470:	4a09      	ldr	r2, [pc, #36]	; (8001498 <SystemInit+0x64>)
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <SystemInit+0x64>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SystemInit+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SystemInit+0x60>)
 8001484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001488:	609a      	str	r2, [r3, #8]
#endif
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	40023800 	.word	0x40023800
 800149c:	24003010 	.word	0x24003010

080014a0 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef * hpcd)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (hpcd->Instance == USB_OTG_FS)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b0:	d16b      	bne.n	800158a <HAL_PCD_MspInit+0xea>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4a37      	ldr	r2, [pc, #220]	; (8001594 <HAL_PCD_MspInit+0xf4>)
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <HAL_PCD_MspInit+0xf4>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <HAL_PCD_MspInit+0xf4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80014ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014e0:	230a      	movs	r3, #10
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	482b      	ldr	r0, [pc, #172]	; (8001598 <HAL_PCD_MspInit+0xf8>)
 80014ec:	f000 ff1a 	bl	8002324 <HAL_GPIO_Init>
    //GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    //GPIO_InitStruct.Pull = GPIO_NOPULL;
    //HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Configure ID pin */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f6:	2312      	movs	r3, #18
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014fe:	230a      	movs	r3, #10
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4823      	ldr	r0, [pc, #140]	; (8001598 <HAL_PCD_MspInit+0xf8>)
 800150a:	f000 ff0b 	bl	8002324 <HAL_GPIO_Init>

    /* Enable USB FS Clock */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800150e:	4a21      	ldr	r2, [pc, #132]	; (8001594 <HAL_PCD_MspInit+0xf4>)
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_PCD_MspInit+0xf4>)
 8001512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001518:	6353      	str	r3, [r2, #52]	; 0x34
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_PCD_MspInit+0xf4>)
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_PCD_MspInit+0xf4>)
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_PCD_MspInit+0xf4>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

    /* Set USBFS Interrupt priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2043      	movs	r0, #67	; 0x43
 800153c:	f000 febb 	bl	80022b6 <HAL_NVIC_SetPriority>

    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001540:	2043      	movs	r0, #67	; 0x43
 8001542:	f000 fed4 	bl	80022ee <HAL_NVIC_EnableIRQ>

    if (hpcd->Init.low_power_enable == 1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d11d      	bne.n	800158a <HAL_PCD_MspInit+0xea>
    {
      /* Enable EXTI Line 18 for USB wakeup */
      __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_PCD_MspInit+0xfc>)
 8001550:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001554:	615a      	str	r2, [r3, #20]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <HAL_PCD_MspInit+0xfc>)
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_PCD_MspInit+0xfc>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001560:	60d3      	str	r3, [r2, #12]
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_PCD_MspInit+0xfc>)
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_PCD_MspInit+0xfc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800156c:	6093      	str	r3, [r2, #8]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT();
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_PCD_MspInit+0xfc>)
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_PCD_MspInit+0xfc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001578:	6013      	str	r3, [r2, #0]

      /* Set EXTI Wakeup Interrupt priority */
      HAL_NVIC_SetPriority(OTG_FS_WKUP_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	202a      	movs	r0, #42	; 0x2a
 8001580:	f000 fe99 	bl	80022b6 <HAL_NVIC_SetPriority>

      /* Enable EXTI Interrupt */
      HAL_NVIC_EnableIRQ(OTG_FS_WKUP_IRQn);
 8001584:	202a      	movs	r0, #42	; 0x2a
 8001586:	f000 feb2 	bl	80022ee <HAL_NVIC_EnableIRQ>
//
//    /* Enable USBHS Interrupt */
//    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
//  }
//
}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *) hpcd->Setup);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4610      	mov	r0, r2
 80015b8:	f005 fe07 	bl	80071ca <USBD_LL_SetupStage>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80015d6:	78fa      	ldrb	r2, [r7, #3]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f005 fe3f 	bl	8007270 <USBD_LL_DataOutStage>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800160c:	78fa      	ldrb	r2, [r7, #3]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	334c      	adds	r3, #76	; 0x4c
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	4619      	mov	r1, r3
 8001622:	f005 fed6 	bl	80073d2 <USBD_LL_DataInStage>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800163c:	4618      	mov	r0, r3
 800163e:	f006 f80a 	bl	8007656 <USBD_LL_SOF>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8001652:	2301      	movs	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]

  /* Set USB Current Speed */
  switch (hpcd->Init.speed)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <HAL_PCD_ResetCallback+0x1a>
 800165e:	2b02      	cmp	r3, #2
 8001660:	d003      	beq.n	800166a <HAL_PCD_ResetCallback+0x20>
 8001662:	e005      	b.n	8001670 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
    break;
 8001668:	e005      	b.n	8001676 <HAL_PCD_ResetCallback+0x2c>

  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
    break;
 800166e:	e002      	b.n	8001676 <HAL_PCD_ResetCallback+0x2c>

  default:
    speed = USBD_SPEED_FULL;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
    break;
 8001674:	bf00      	nop
  }

  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800167c:	4618      	mov	r0, r3
 800167e:	f005 ff5a 	bl	8007536 <USBD_LL_Reset>

  USBD_LL_SetSpeed(hpcd->pData, speed);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f005 ffa4 	bl	80075da <USBD_LL_SetSpeed>
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
//    __HAL_PCD_GATE_PHYCLOCK(hpcd);
//#endif
//  }
//  else
//  {
    USBD_LL_Suspend(hpcd->pData);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 ffa5 	bl	80075fa <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6013      	str	r3, [r2, #0]

    /* Enter in STOP mode */
    if (hpcd->Init.low_power_enable)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_PCD_SuspendCallback+0x42>
    {
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
      SCB->SCR |=
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_PCD_SuspendCallback+0x4c>)
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <HAL_PCD_SuspendCallback+0x4c>)
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	f043 0306 	orr.w	r3, r3, #6
 80016dc:	6113      	str	r3, [r2, #16]
        (uint32_t) ((uint32_t)
                    (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
//  }
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((hpcd->Init.low_power_enable) && (remotewakeupon == 0))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00b      	beq.n	8001714 <HAL_PCD_ResumeCallback+0x28>
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_PCD_ResumeCallback+0x5c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_PCD_ResumeCallback+0x28>
  {
    SystemClockConfig_STOP();
 8001704:	f000 f976 	bl	80019f4 <SystemClockConfig_STOP>

    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &=
 8001708:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_PCD_ResumeCallback+0x60>)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_PCD_ResumeCallback+0x60>)
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f023 0306 	bic.w	r3, r3, #6
 8001712:	6113      	str	r3, [r2, #16]
      (uint32_t) ~
      ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
  }
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	6013      	str	r3, [r2, #0]
  USBD_LL_Resume(hpcd->pData);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001734:	4618      	mov	r0, r3
 8001736:	f005 ff76 	bl	8007626 <USBD_LL_Resume>
  remotewakeupon = 0;
 800173a:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_PCD_ResumeCallback+0x5c>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000250 	.word	0x20000250
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f005 ffc7 	bl	80076fa <USBD_LL_IsoOUTIncomplete>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f005 ff83 	bl	8007696 <USBD_LL_IsoINIncomplete>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 ffd9 	bl	800775e <USBD_LL_DevConnected>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 ffd6 	bl	8007774 <USBD_LL_DevDisconnected>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef * pdev)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USB_FS
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <USBD_LL_Init+0x88>)
 80017da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017de:	601a      	str	r2, [r3, #0]
  hpcd.Init.dev_endpoints = 4;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <USBD_LL_Init+0x88>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	605a      	str	r2, [r3, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <USBD_LL_Init+0x88>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd.Init.dma_enable = 0;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <USBD_LL_Init+0x88>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  hpcd.Init.low_power_enable = 0;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <USBD_LL_Init+0x88>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <USBD_LL_Init+0x88>)
 80017fa:	2202      	movs	r2, #2
 80017fc:	619a      	str	r2, [r3, #24]
  hpcd.Init.Sof_enable = 0;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <USBD_LL_Init+0x88>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <USBD_LL_Init+0x88>)
 8001806:	2202      	movs	r2, #2
 8001808:	60da      	str	r2, [r3, #12]
  hpcd.Init.vbus_sensing_enable = DISABLE;//1;
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <USBD_LL_Init+0x88>)
 800180c:	2200      	movs	r2, #0
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <USBD_LL_Init+0x88>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <USBD_LL_Init+0x88>)
 800181c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  /* Initialize LL Driver */
  if (HAL_PCD_Init(&hpcd) != HAL_OK)
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <USBD_LL_Init+0x88>)
 8001822:	f000 ff19 	bl	8002658 <HAL_PCD_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <USBD_LL_Init+0x60>
  {
    Error_Handler();
 800182c:	f7fe ff64 	bl	80006f8 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd, 0x80);
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	4809      	ldr	r0, [pc, #36]	; (8001858 <USBD_LL_Init+0x88>)
 8001834:	f002 f983 	bl	8003b3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd, 0, 0x40);
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	2100      	movs	r1, #0
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <USBD_LL_Init+0x88>)
 800183e:	f002 f937 	bl	8003ab0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd, 1, 0x80);
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	2101      	movs	r1, #1
 8001846:	4804      	ldr	r0, [pc, #16]	; (8001858 <USBD_LL_Init+0x88>)
 8001848:	f002 f932 	bl	8003ab0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetRxFiFo(&hpcd, 0x200);
  HAL_PCDEx_SetTxFiFo(&hpcd, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd, 1, 0x100);
#endif

  return USBD_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200006f0 	.word	0x200006f0

0800185c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800186a:	4618      	mov	r0, r3
 800186c:	f001 f811 	bl	8002892 <HAL_PCD_Start>
  return USBD_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <USBD_LL_OpenEP>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type, uint16_t ep_mps)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	4608      	mov	r0, r1
 8001884:	4611      	mov	r1, r2
 8001886:	461a      	mov	r2, r3
 8001888:	4603      	mov	r3, r0
 800188a:	70fb      	strb	r3, [r7, #3]
 800188c:	460b      	mov	r3, r1
 800188e:	70bb      	strb	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800189a:	78bb      	ldrb	r3, [r7, #2]
 800189c:	883a      	ldrh	r2, [r7, #0]
 800189e:	78f9      	ldrb	r1, [r7, #3]
 80018a0:	f001 fcfc 	bl	800329c <HAL_PCD_EP_Open>

  return USBD_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 fd51 	bl	800336c <HAL_PCD_EP_Close>
  return USBD_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 fe1d 	bl	800352a <HAL_PCD_EP_SetStall>
  return USBD_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <USBD_LL_ClearStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev,
                                        uint8_t ep_addr)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f001 fe6e 	bl	80035f2 <HAL_PCD_EP_ClrStall>
  return USBD_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001932:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8001934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001938:	2b00      	cmp	r3, #0
 800193a:	da0b      	bge.n	8001954 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001942:	68f9      	ldr	r1, [r7, #12]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	333e      	adds	r3, #62	; 0x3e
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	e00b      	b.n	800196c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800195a:	68f9      	ldr	r1, [r7, #12]
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800196a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <USBD_LL_SetUSBAddress>:
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev,
                                         uint8_t dev_addr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fc5f 	bl	8003252 <HAL_PCD_SetAddress>
  return USBD_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <USBD_LL_Transmit>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev,
                                    uint8_t ep_addr,
                                    uint8_t * pbuf, uint32_t size)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	460b      	mov	r3, r1
 80019ac:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80019b4:	7af9      	ldrb	r1, [r7, #11]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	f001 fd6c 	bl	8003496 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <USBD_LL_PrepareReceive>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev,
                                          uint8_t ep_addr,
                                          uint8_t * pbuf, uint32_t size)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	460b      	mov	r3, r1
 80019d6:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80019de:	7af9      	ldrb	r1, [r7, #11]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	f001 fd0c 	bl	8003400 <HAL_PCD_EP_Receive>
  return USBD_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <SystemClockConfig_STOP>:
  * @brief  Configures system clock after wakeup from STOP mode.
  * @param  None
  * @retval None
  */
static void SystemClockConfig_STOP(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* Configures system clock after wake-up from STOP: enable HSE, PLL and
   * select PLL as system clock source (HSE and PLL are disabled in STOP mode)
   */

  __HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
 80019f8:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <SystemClockConfig_STOP+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <SystemClockConfig_STOP+0x5c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a04:	bf00      	nop
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <SystemClockConfig_STOP+0x5c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f9      	beq.n	8001a06 <SystemClockConfig_STOP+0x12>
  {
  }

  /* Enable the main PLL. */
  __HAL_RCC_PLL_ENABLE();
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <SystemClockConfig_STOP+0x60>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a18:	bf00      	nop
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <SystemClockConfig_STOP+0x5c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f9      	beq.n	8001a1a <SystemClockConfig_STOP+0x26>
  {
  }

  /* Select PLL as SYSCLK */
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_SYSCLKSOURCE_PLLCLK);
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <SystemClockConfig_STOP+0x5c>)
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <SystemClockConfig_STOP+0x5c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 0303 	bic.w	r3, r3, #3
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6093      	str	r3, [r2, #8]

  /* Wait till system clock switch to PLL */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a36:	bf00      	nop
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <SystemClockConfig_STOP+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d1f9      	bne.n	8001a38 <SystemClockConfig_STOP+0x44>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	42470060 	.word	0x42470060

08001a58 <HAL_GPIO_EXTI_Callback>:
  *         Handle remote-wakeup through key button
  * @param  GPIO_Pin
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == KEY_BUTTON0_PIN)
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d13f      	bne.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x90>
  {
    if ((((USBD_HandleTypeDef *) hpcd.pData)->dev_remote_wakeup == 1) &&
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001a6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001a6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d138      	bne.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x90>
        (((USBD_HandleTypeDef *) hpcd.pData)->dev_state ==
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001a78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001a80:	b2db      	uxtb	r3, r3
    if ((((USBD_HandleTypeDef *) hpcd.pData)->dev_remote_wakeup == 1) &&
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d130      	bne.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x90>
         USBD_STATE_SUSPENDED))
    {
      if ((&hpcd)->Init.low_power_enable)
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_EXTI_Callback+0x46>
      {
        /* Reset SLEEPDEEP bit of Cortex System Control Register */
        SCB->SCR &=
 8001a8e:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f023 0306 	bic.w	r3, r3, #6
 8001a98:	6113      	str	r3, [r2, #16]
          (uint32_t) ~
          ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));

        SystemClockConfig_STOP();
 8001a9a:	f7ff ffab 	bl	80019f4 <SystemClockConfig_STOP>
      }

      /* Ungate PHY clock */
      __HAL_PCD_UNGATE_PHYCLOCK((&hpcd));
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Activate Remote wakeup */
      HAL_PCD_ActivateRemoteWakeup((&hpcd));
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001aba:	f001 fe21 	bl	8003700 <HAL_PCD_ActivateRemoteWakeup>

      /* Remote wakeup delay */
      HAL_Delay(10);
 8001abe:	200a      	movs	r0, #10
 8001ac0:	f000 fafe 	bl	80020c0 <HAL_Delay>

      /* Disable Remote wakeup */
      HAL_PCD_DeActivateRemoteWakeup((&hpcd));
 8001ac4:	480a      	ldr	r0, [pc, #40]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ac6:	f001 fe29 	bl	800371c <HAL_PCD_DeActivateRemoteWakeup>

      /* change state to configured */
      ((USBD_HandleTypeDef *) hpcd.pData)->dev_state = USBD_STATE_CONFIGURED;
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001acc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

      /* Change remote_wakeup feature to 0 */
      ((USBD_HandleTypeDef *) hpcd.pData)->dev_remote_wakeup = 0;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ad8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001adc:	2200      	movs	r2, #0
 8001ade:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
      remotewakeupon = 1;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200006f0 	.word	0x200006f0
 8001af4:	e000ed00 	.word	0xe000ed00
 8001af8:	20000250 	.word	0x20000250

08001afc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8001b08:	2010      	movs	r0, #16
 8001b0a:	f006 fd95 	bl	8008638 <malloc>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <USBD_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	32b0      	adds	r2, #176	; 0xb0
 8001b22:	2100      	movs	r1, #0
 8001b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e048      	b.n	8001bbe <USBD_HID_Init+0xc2>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	32b0      	adds	r2, #176	; 0xb0
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	32b0      	adds	r2, #176	; 0xb0
 8001b46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7c1b      	ldrb	r3, [r3, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10d      	bne.n	8001b74 <USBD_HID_Init+0x78>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <USBD_HID_Init+0xcc>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f003 020f 	and.w	r2, r3, #15
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3326      	adds	r3, #38	; 0x26
 8001b6e:	2207      	movs	r2, #7
 8001b70:	801a      	strh	r2, [r3, #0]
 8001b72:	e00c      	b.n	8001b8e <USBD_HID_Init+0x92>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <USBD_HID_Init+0xcc>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	f003 020f 	and.w	r2, r3, #15
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	3326      	adds	r3, #38	; 0x26
 8001b8a:	220a      	movs	r2, #10
 8001b8c:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <USBD_HID_Init+0xcc>)
 8001b90:	7819      	ldrb	r1, [r3, #0]
 8001b92:	2340      	movs	r3, #64	; 0x40
 8001b94:	2203      	movs	r2, #3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fe6f 	bl	800187a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <USBD_HID_Init+0xcc>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f003 020f 	and.w	r2, r3, #15
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3324      	adds	r3, #36	; 0x24
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000013a 	.word	0x2000013a

08001bcc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <USBD_HID_DeInit+0x8c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fe65 	bl	80018ae <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <USBD_HID_DeInit+0x8c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f003 020f 	and.w	r2, r3, #15
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3324      	adds	r3, #36	; 0x24
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <USBD_HID_DeInit+0x8c>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	f003 020f 	and.w	r2, r3, #15
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3326      	adds	r3, #38	; 0x26
 8001c14:	2200      	movs	r2, #0
 8001c16:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	32b0      	adds	r2, #176	; 0xb0
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d011      	beq.n	8001c4e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	32b0      	adds	r2, #176	; 0xb0
 8001c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f006 fd05 	bl	8008648 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	32b0      	adds	r2, #176	; 0xb0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000013a 	.word	0x2000013a

08001c5c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	32b0      	adds	r2, #176	; 0xb0
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0e8      	b.n	8001e5a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d046      	beq.n	8001d22 <USBD_HID_Setup+0xc6>
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	f040 80d8 	bne.w	8001e4a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	3b02      	subs	r3, #2
 8001ca0:	2b09      	cmp	r3, #9
 8001ca2:	d836      	bhi.n	8001d12 <USBD_HID_Setup+0xb6>
 8001ca4:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <USBD_HID_Setup+0x50>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001d03 	.word	0x08001d03
 8001cb0:	08001ce3 	.word	0x08001ce3
 8001cb4:	08001d13 	.word	0x08001d13
 8001cb8:	08001d13 	.word	0x08001d13
 8001cbc:	08001d13 	.word	0x08001d13
 8001cc0:	08001d13 	.word	0x08001d13
 8001cc4:	08001d13 	.word	0x08001d13
 8001cc8:	08001d13 	.word	0x08001d13
 8001ccc:	08001cf1 	.word	0x08001cf1
 8001cd0:	08001cd5 	.word	0x08001cd5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	885b      	ldrh	r3, [r3, #2]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	601a      	str	r2, [r3, #0]
          break;
 8001ce0:	e01e      	b.n	8001d20 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f006 fc1e 	bl	800852a <USBD_CtlSendData>
          break;
 8001cee:	e017      	b.n	8001d20 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	885b      	ldrh	r3, [r3, #2]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]
          break;
 8001d00:	e00e      	b.n	8001d20 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2201      	movs	r2, #1
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f006 fc0d 	bl	800852a <USBD_CtlSendData>
          break;
 8001d10:	e006      	b.n	8001d20 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f006 fb97 	bl	8008448 <USBD_CtlError>
          ret = USBD_FAIL;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8001d1e:	bf00      	nop
      }
      break;
 8001d20:	e09a      	b.n	8001e58 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	785b      	ldrb	r3, [r3, #1]
 8001d26:	2b0b      	cmp	r3, #11
 8001d28:	f200 8086 	bhi.w	8001e38 <USBD_HID_Setup+0x1dc>
 8001d2c:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <USBD_HID_Setup+0xd8>)
 8001d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d32:	bf00      	nop
 8001d34:	08001d65 	.word	0x08001d65
 8001d38:	08001e47 	.word	0x08001e47
 8001d3c:	08001e39 	.word	0x08001e39
 8001d40:	08001e39 	.word	0x08001e39
 8001d44:	08001e39 	.word	0x08001e39
 8001d48:	08001e39 	.word	0x08001e39
 8001d4c:	08001d8f 	.word	0x08001d8f
 8001d50:	08001e39 	.word	0x08001e39
 8001d54:	08001e39 	.word	0x08001e39
 8001d58:	08001e39 	.word	0x08001e39
 8001d5c:	08001de7 	.word	0x08001de7
 8001d60:	08001e11 	.word	0x08001e11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d107      	bne.n	8001d80 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8001d70:	f107 030a 	add.w	r3, r7, #10
 8001d74:	2202      	movs	r2, #2
 8001d76:	4619      	mov	r1, r3
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f006 fbd6 	bl	800852a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001d7e:	e063      	b.n	8001e48 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f006 fb60 	bl	8008448 <USBD_CtlError>
            ret = USBD_FAIL;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	75fb      	strb	r3, [r7, #23]
          break;
 8001d8c:	e05c      	b.n	8001e48 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	885b      	ldrh	r3, [r3, #2]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b22      	cmp	r3, #34	; 0x22
 8001d98:	d108      	bne.n	8001dac <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	88db      	ldrh	r3, [r3, #6]
 8001d9e:	2b56      	cmp	r3, #86	; 0x56
 8001da0:	bf28      	it	cs
 8001da2:	2356      	movcs	r3, #86	; 0x56
 8001da4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_JOYPAD_ReportDesc;
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <USBD_HID_Setup+0x208>)
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	e015      	b.n	8001dd8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	885b      	ldrh	r3, [r3, #2]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b21      	cmp	r3, #33	; 0x21
 8001db6:	d108      	bne.n	8001dca <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <USBD_HID_Setup+0x20c>)
 8001dba:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	88db      	ldrh	r3, [r3, #6]
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	bf28      	it	cs
 8001dc4:	2309      	movcs	r3, #9
 8001dc6:	82bb      	strh	r3, [r7, #20]
 8001dc8:	e006      	b.n	8001dd8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8001dca:	6839      	ldr	r1, [r7, #0]
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f006 fb3b 	bl	8008448 <USBD_CtlError>
            ret = USBD_FAIL;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	75fb      	strb	r3, [r7, #23]
            break;
 8001dd6:	e037      	b.n	8001e48 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8001dd8:	8abb      	ldrh	r3, [r7, #20]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	6939      	ldr	r1, [r7, #16]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f006 fba3 	bl	800852a <USBD_CtlSendData>
          break;
 8001de4:	e030      	b.n	8001e48 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d107      	bne.n	8001e02 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3308      	adds	r3, #8
 8001df6:	2201      	movs	r2, #1
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f006 fb95 	bl	800852a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001e00:	e022      	b.n	8001e48 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8001e02:	6839      	ldr	r1, [r7, #0]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f006 fb1f 	bl	8008448 <USBD_CtlError>
            ret = USBD_FAIL;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8001e0e:	e01b      	b.n	8001e48 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d106      	bne.n	8001e2a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	885b      	ldrh	r3, [r3, #2]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001e28:	e00e      	b.n	8001e48 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f006 fb0b 	bl	8008448 <USBD_CtlError>
            ret = USBD_FAIL;
 8001e32:	2303      	movs	r3, #3
 8001e34:	75fb      	strb	r3, [r7, #23]
          break;
 8001e36:	e007      	b.n	8001e48 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8001e38:	6839      	ldr	r1, [r7, #0]
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f006 fb04 	bl	8008448 <USBD_CtlError>
          ret = USBD_FAIL;
 8001e40:	2303      	movs	r3, #3
 8001e42:	75fb      	strb	r3, [r7, #23]
          break;
 8001e44:	e000      	b.n	8001e48 <USBD_HID_Setup+0x1ec>
          break;
 8001e46:	bf00      	nop
      }
      break;
 8001e48:	e006      	b.n	8001e58 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8001e4a:	6839      	ldr	r1, [r7, #0]
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f006 fafb 	bl	8008448 <USBD_CtlError>
      ret = USBD_FAIL;
 8001e52:	2303      	movs	r3, #3
 8001e54:	75fb      	strb	r3, [r7, #23]
      break;
 8001e56:	bf00      	nop
  }

  return (uint8_t)ret;
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200000e4 	.word	0x200000e4
 8001e68:	200000cc 	.word	0x200000cc

08001e6c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	4613      	mov	r3, r2
 8001e78:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	32b0      	adds	r2, #176	; 0xb0
 8001e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e88:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e014      	b.n	8001ebe <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d10d      	bne.n	8001ebc <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	7b1b      	ldrb	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <USBD_HID_SendReport+0x5c>)
 8001eb0:	7819      	ldrb	r1, [r3, #0]
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff fd71 	bl	800199e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000013a 	.word	0x2000013a

08001ecc <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7c1b      	ldrb	r3, [r3, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8001edc:	2308      	movs	r3, #8
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e001      	b.n	8001ee6 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8001ee2:	230a      	movs	r3, #10
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8001efc:	2181      	movs	r1, #129	; 0x81
 8001efe:	4809      	ldr	r0, [pc, #36]	; (8001f24 <USBD_HID_GetFSCfgDesc+0x30>)
 8001f00:	f005 fc75 	bl	80077ee <USBD_GetEpDesc>
 8001f04:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	220a      	movs	r2, #10
 8001f10:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2229      	movs	r2, #41	; 0x29
 8001f16:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8001f18:	4b02      	ldr	r3, [pc, #8]	; (8001f24 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200000a0 	.word	0x200000a0

08001f28 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8001f30:	2181      	movs	r1, #129	; 0x81
 8001f32:	4809      	ldr	r0, [pc, #36]	; (8001f58 <USBD_HID_GetHSCfgDesc+0x30>)
 8001f34:	f005 fc5b 	bl	80077ee <USBD_GetEpDesc>
 8001f38:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2207      	movs	r2, #7
 8001f44:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2229      	movs	r2, #41	; 0x29
 8001f4a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8001f4c:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200000a0 	.word	0x200000a0

08001f5c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8001f64:	2181      	movs	r1, #129	; 0x81
 8001f66:	4809      	ldr	r0, [pc, #36]	; (8001f8c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8001f68:	f005 fc41 	bl	80077ee <USBD_GetEpDesc>
 8001f6c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	220a      	movs	r2, #10
 8001f78:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2229      	movs	r2, #41	; 0x29
 8001f7e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8001f80:	4b02      	ldr	r3, [pc, #8]	; (8001f8c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200000a0 	.word	0x200000a0

08001f90 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	32b0      	adds	r2, #176	; 0xb0
 8001fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001faa:	2200      	movs	r2, #0
 8001fac:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	220a      	movs	r2, #10
 8001fc8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8001fca:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	200000d8 	.word	0x200000d8

08001fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_Init+0x40>)
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_Init+0x40>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fec:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_Init+0x40>)
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_Init+0x40>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff8:	4a08      	ldr	r2, [pc, #32]	; (800201c <HAL_Init+0x40>)
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_Init+0x40>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002004:	2003      	movs	r0, #3
 8002006:	f000 f94b 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200a:	200f      	movs	r0, #15
 800200c:	f000 f808 	bl	8002020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002010:	f7ff f8b8 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_InitTick+0x54>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x58>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002036:	fbb3 f3f1 	udiv	r3, r3, r1
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f963 	bl	800230a <HAL_SYSTICK_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00e      	b.n	800206c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d80a      	bhi.n	800206a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f000 f92b 	bl	80022b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002060:	4a06      	ldr	r2, [pc, #24]	; (800207c <HAL_InitTick+0x5c>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000064 	.word	0x20000064
 8002078:	20000140 	.word	0x20000140
 800207c:	2000013c 	.word	0x2000013c

08002080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_IncTick+0x20>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_IncTick+0x24>)
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000140 	.word	0x20000140
 80020a4:	20000bfc 	.word	0x20000bfc

080020a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return uwTick;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_GetTick+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000bfc 	.word	0x20000bfc

080020c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff ffee 	bl	80020a8 <HAL_GetTick>
 80020cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d005      	beq.n	80020e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_Delay+0x40>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020e6:	bf00      	nop
 80020e8:	f7ff ffde 	bl	80020a8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1ad2      	subs	r2, r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d3f7      	bcc.n	80020e8 <HAL_Delay+0x28>
  {
  }
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000140 	.word	0x20000140

08002104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002120:	4013      	ands	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800212c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <__NVIC_GetPriorityGrouping+0x18>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 0307 	and.w	r3, r3, #7
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	2b00      	cmp	r3, #0
 8002178:	db0b      	blt.n	8002192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217a:	4909      	ldr	r1, [pc, #36]	; (80021a0 <__NVIC_EnableIRQ+0x38>)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	79fa      	ldrb	r2, [r7, #7]
 8002184:	f002 021f 	and.w	r2, r2, #31
 8002188:	2001      	movs	r0, #1
 800218a:	fa00 f202 	lsl.w	r2, r0, r2
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000e100 	.word	0xe000e100

080021a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	db0a      	blt.n	80021ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b8:	490d      	ldr	r1, [pc, #52]	; (80021f0 <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021cc:	e00a      	b.n	80021e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ce:	4909      	ldr	r1, [pc, #36]	; (80021f4 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	0112      	lsls	r2, r2, #4
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	440b      	add	r3, r1
 80021e2:	761a      	strb	r2, [r3, #24]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f1c3 0307 	rsb	r3, r3, #7
 8002212:	2b04      	cmp	r3, #4
 8002214:	bf28      	it	cs
 8002216:	2304      	movcs	r3, #4
 8002218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3304      	adds	r3, #4
 800221e:	2b06      	cmp	r3, #6
 8002220:	d902      	bls.n	8002228 <NVIC_EncodePriority+0x30>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3b03      	subs	r3, #3
 8002226:	e000      	b.n	800222a <NVIC_EncodePriority+0x32>
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	2201      	movs	r2, #1
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	1e5a      	subs	r2, r3, #1
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	401a      	ands	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223e:	2101      	movs	r1, #1
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	1e59      	subs	r1, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226c:	d301      	bcc.n	8002272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226e:	2301      	movs	r3, #1
 8002270:	e00f      	b.n	8002292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <SysTick_Config+0x40>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227a:	210f      	movs	r1, #15
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f7ff ff90 	bl	80021a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <SysTick_Config+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <SysTick_Config+0x40>)
 800228c:	2207      	movs	r2, #7
 800228e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010

080022a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff2b 	bl	8002104 <__NVIC_SetPriorityGrouping>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c8:	f7ff ff40 	bl	800214c <__NVIC_GetPriorityGrouping>
 80022cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	6978      	ldr	r0, [r7, #20]
 80022d4:	f7ff ff90 	bl	80021f8 <NVIC_EncodePriority>
 80022d8:	4602      	mov	r2, r0
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff5f 	bl	80021a4 <__NVIC_SetPriority>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff33 	bl	8002168 <__NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffa2 	bl	800225c <SysTick_Config>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	e159      	b.n	80025f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8148 	bne.w	80025ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d005      	beq.n	8002376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	2b02      	cmp	r3, #2
 8002374:	d130      	bne.n	80023d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 0201 	and.w	r2, r3, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d017      	beq.n	8002414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d123      	bne.n	8002468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	220f      	movs	r2, #15
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	08da      	lsrs	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3208      	adds	r2, #8
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a2 	beq.w	80025ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4a56      	ldr	r2, [pc, #344]	; (8002608 <HAL_GPIO_Init+0x2e4>)
 80024b0:	4b55      	ldr	r3, [pc, #340]	; (8002608 <HAL_GPIO_Init+0x2e4>)
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_GPIO_Init+0x2e4>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c6:	4a51      	ldr	r2, [pc, #324]	; (800260c <HAL_GPIO_Init+0x2e8>)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a48      	ldr	r2, [pc, #288]	; (8002610 <HAL_GPIO_Init+0x2ec>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x202>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a47      	ldr	r2, [pc, #284]	; (8002614 <HAL_GPIO_Init+0x2f0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x1fe>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a46      	ldr	r2, [pc, #280]	; (8002618 <HAL_GPIO_Init+0x2f4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x1fa>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a45      	ldr	r2, [pc, #276]	; (800261c <HAL_GPIO_Init+0x2f8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x1f6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a44      	ldr	r2, [pc, #272]	; (8002620 <HAL_GPIO_Init+0x2fc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x1f2>
 8002512:	2304      	movs	r3, #4
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002516:	2307      	movs	r3, #7
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x204>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x204>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002526:	2300      	movs	r3, #0
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002538:	4934      	ldr	r1, [pc, #208]	; (800260c <HAL_GPIO_Init+0x2e8>)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_GPIO_Init+0x300>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <HAL_GPIO_Init+0x300>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_GPIO_Init+0x300>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_GPIO_Init+0x300>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_GPIO_Init+0x300>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025be:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_GPIO_Init+0x300>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_GPIO_Init+0x300>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e8:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <HAL_GPIO_Init+0x300>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3301      	adds	r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	f67f aea2 	bls.w	8002340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	3724      	adds	r7, #36	; 0x24
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40023800 	.word	0x40023800
 800260c:	40013800 	.word	0x40013800
 8002610:	40020000 	.word	0x40020000
 8002614:	40020400 	.word	0x40020400
 8002618:	40020800 	.word	0x40020800
 800261c:	40020c00 	.word	0x40020c00
 8002620:	40021000 	.word	0x40021000
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800263e:	4a05      	ldr	r2, [pc, #20]	; (8002654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fa06 	bl	8001a58 <HAL_GPIO_EXTI_Callback>
  }
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40013c00 	.word	0x40013c00

08002658 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265a:	b08f      	sub	sp, #60	; 0x3c
 800265c:	af0a      	add	r7, sp, #40	; 0x28
 800265e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e10f      	b.n	800288a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d106      	bne.n	800268a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7fe ff0b 	bl	80014a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2203      	movs	r2, #3
 800268e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 f91e 	bl	80058ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	687e      	ldr	r6, [r7, #4]
 80026b6:	466d      	mov	r5, sp
 80026b8:	f106 0410 	add.w	r4, r6, #16
 80026bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026cc:	1d33      	adds	r3, r6, #4
 80026ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d0:	6838      	ldr	r0, [r7, #0]
 80026d2:	f002 fff5 	bl	80056c0 <USB_CoreInit>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d0      	b.n	800288a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 f90c 	bl	800590c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e04a      	b.n	8002790 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	333d      	adds	r3, #61	; 0x3d
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	333c      	adds	r3, #60	; 0x3c
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	b298      	uxth	r0, r3
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	3344      	adds	r3, #68	; 0x44
 8002736:	4602      	mov	r2, r0
 8002738:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	3340      	adds	r3, #64	; 0x40
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3348      	adds	r3, #72	; 0x48
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	334c      	adds	r3, #76	; 0x4c
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	3354      	adds	r3, #84	; 0x54
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	3301      	adds	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d3af      	bcc.n	80026fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
 800279e:	e044      	b.n	800282a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	3301      	adds	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	d3b5      	bcc.n	80027a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	687e      	ldr	r6, [r7, #4]
 800283c:	466d      	mov	r5, sp
 800283e:	f106 0410 	add.w	r4, r6, #16
 8002842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800284e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002852:	1d33      	adds	r3, r6, #4
 8002854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002856:	6838      	ldr	r0, [r7, #0]
 8002858:	f003 f8a4 	bl	80059a4 <USB_DevInit>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00d      	b.n	800288a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f004 fa37 	bl	8006cf6 <USB_DevDisconnect>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002892 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_PCD_Start+0x1c>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e020      	b.n	80028f0 <HAL_PCD_Start+0x5e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d109      	bne.n	80028d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d005      	beq.n	80028d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fff6 	bl	80058c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 f9e5 	bl	8006cb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b08d      	sub	sp, #52	; 0x34
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f004 faa7 	bl	8006e62 <USB_GetMode>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 8498 	bne.w	800324c <HAL_PCD_IRQHandler+0x954>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f004 fa0b 	bl	8006d3c <USB_ReadInterrupts>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 848e 	beq.w	800324a <HAL_PCD_IRQHandler+0x952>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f004 f9f8 	bl	8006d3c <USB_ReadInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d107      	bne.n	8002966 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	6952      	ldr	r2, [r2, #20]
 8002960:	f002 0202 	and.w	r2, r2, #2
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f004 f9e6 	bl	8006d3c <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b10      	cmp	r3, #16
 8002978:	d161      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	6992      	ldr	r2, [r2, #24]
 8002984:	f022 0210 	bic.w	r2, r2, #16
 8002988:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	0c5b      	lsrs	r3, r3, #17
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d124      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d035      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6a38      	ldr	r0, [r7, #32]
 80029d6:	f004 f810 	bl	80069fa <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e6:	441a      	add	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	6a1a      	ldr	r2, [r3, #32]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f8:	441a      	add	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	621a      	str	r2, [r3, #32]
 80029fe:	e016      	b.n	8002a2e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	0c5b      	lsrs	r3, r3, #17
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	2b06      	cmp	r3, #6
 8002a0a:	d110      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a12:	2208      	movs	r2, #8
 8002a14:	4619      	mov	r1, r3
 8002a16:	6a38      	ldr	r0, [r7, #32]
 8002a18:	f003 ffef 	bl	80069fa <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a28:	441a      	add	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	6992      	ldr	r2, [r2, #24]
 8002a38:	f042 0210 	orr.w	r2, r2, #16
 8002a3c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 f97a 	bl	8006d3c <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a52:	f040 80a8 	bne.w	8002ba6 <HAL_PCD_IRQHandler+0x2ae>
    {
      epnum = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 f97f 	bl	8006d62 <USB_ReadDevAllOutEpInterrupt>
 8002a64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a66:	e09a      	b.n	8002b9e <HAL_PCD_IRQHandler+0x2a6>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 808f 	beq.w	8002b92 <HAL_PCD_IRQHandler+0x29a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 f9a3 	bl	8006dca <USB_ReadDevOutEPInterrupt>
 8002a84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00c      	beq.n	8002aaa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fed5 	bl	8003854 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00c      	beq.n	8002ace <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 ffab 	bl	8003a24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2310      	movs	r3, #16
 8002ae8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d031      	beq.n	8002b58 <HAL_PCD_IRQHandler+0x260>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b80      	cmp	r3, #128	; 0x80
 8002afe:	d10a      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x21e>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b06:	461a      	mov	r2, r3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b14:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	78db      	ldrb	r3, [r3, #3]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d108      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x24e>
            {
              ep->is_iso_incomplete = 0U;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7fe fe05 	bl	8001750 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b52:	461a      	mov	r2, r3
 8002b54:	2302      	movs	r3, #2
 8002b56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <HAL_PCD_IRQHandler+0x27c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2320      	movs	r3, #32
 8002b72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_PCD_IRQHandler+0x29a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	3301      	adds	r3, #1
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	085b      	lsrs	r3, r3, #1
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f47f af61 	bne.w	8002a68 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 f8c6 	bl	8006d3c <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bba:	f040 80dc 	bne.w	8002d76 <HAL_PCD_IRQHandler+0x47e>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 f8e7 	bl	8006d96 <USB_ReadDevAllInEpInterrupt>
 8002bc8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bce:	e0ce      	b.n	8002d6e <HAL_PCD_IRQHandler+0x476>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80c3 	beq.w	8002d62 <HAL_PCD_IRQHandler+0x46a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 f90d 	bl	8006e06 <USB_ReadDevInEPInterrupt>
 8002bec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d058      	beq.n	8002caa <HAL_PCD_IRQHandler+0x3b2>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	2201      	movs	r2, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d132      	bne.n	8002c9e <HAL_PCD_IRQHandler+0x3a6>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	334c      	adds	r3, #76	; 0x4c
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4403      	add	r3, r0
 8002c58:	3348      	adds	r3, #72	; 0x48
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4419      	add	r1, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4403      	add	r3, r0
 8002c6c:	334c      	adds	r3, #76	; 0x4c
 8002c6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d113      	bne.n	8002c9e <HAL_PCD_IRQHandler+0x3a6>
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3354      	adds	r3, #84	; 0x54
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d108      	bne.n	8002c9e <HAL_PCD_IRQHandler+0x3a6>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c96:	461a      	mov	r2, r3
 8002c98:	2101      	movs	r1, #1
 8002c9a:	f004 f915 	bl	8006ec8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7fe fca8 	bl	80015fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x3ce>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x3ea>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2310      	movs	r3, #16
 8002ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_PCD_IRQHandler+0x406>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2340      	movs	r3, #64	; 0x40
 8002cfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d023      	beq.n	8002d50 <HAL_PCD_IRQHandler+0x458>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d0a:	6a38      	ldr	r0, [r7, #32]
 8002d0c:	f002 ffb0 	bl	8005c70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	3338      	adds	r3, #56	; 0x38
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	3304      	adds	r3, #4
 8002d22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	78db      	ldrb	r3, [r3, #3]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d108      	bne.n	8002d3e <HAL_PCD_IRQHandler+0x446>
            {
              ep->is_iso_incomplete = 0U;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	4619      	mov	r1, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7fe fd1b 	bl	8001774 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_PCD_IRQHandler+0x46a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fceb 	bl	8003738 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	3301      	adds	r3, #1
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f af2d 	bne.w	8002bd0 <HAL_PCD_IRQHandler+0x2d8>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 ffde 	bl	8006d3c <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d8a:	d123      	bne.n	8002dd4 <HAL_PCD_IRQHandler+0x4dc>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	461a      	mov	r2, r3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x4c6>
      {
        hpcd->LPM_State = LPM_L0;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002db4:	2100      	movs	r1, #0
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fed2 	bl	8003b60 <HAL_PCDEx_LPM_Callback>
 8002dbc:	e002      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x4cc>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe fc94 	bl	80016ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	6952      	ldr	r2, [r2, #20]
 8002dce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 ffaf 	bl	8006d3c <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de8:	d112      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x518>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_PCD_IRQHandler+0x508>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe fc4e 	bl	800169c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	6952      	ldr	r2, [r2, #20]
 8002e0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e0e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 ff91 	bl	8006d3c <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	f040 80c1 	bne.w	8002faa <HAL_PCD_IRQHandler+0x6b2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2e:	461a      	mov	r2, r3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2110      	movs	r1, #16
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 ff13 	bl	8005c70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4e:	e049      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x5ec>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e70:	4619      	mov	r1, r3
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e84:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e92:	461a      	mov	r2, r3
 8002e94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e98:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002eba:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002edc:	600b      	str	r3, [r1, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d8b0      	bhi.n	8002e50 <HAL_PCD_IRQHandler+0x558>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d018      	beq.n	8002f3e <HAL_PCD_IRQHandler+0x646>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f12:	461a      	mov	r2, r3
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1e:	f043 030b 	orr.w	r3, r3, #11
 8002f22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f043 030b 	orr.w	r3, r3, #11
 8002f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3c:	e017      	b.n	8002f6e <HAL_PCD_IRQHandler+0x676>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f44:	461a      	mov	r2, r3
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5e:	461a      	mov	r2, r3
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f043 030b 	orr.w	r3, r3, #11
 8002f6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f74:	461a      	mov	r2, r3
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f94:	461a      	mov	r2, r3
 8002f96:	f003 ff97 	bl	8006ec8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	6952      	ldr	r2, [r2, #20]
 8002fa4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fec4 	bl	8006d3c <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fbe:	d124      	bne.n	800300a <HAL_PCD_IRQHandler+0x712>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 ff5a 	bl	8006e7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 fecc 	bl	8005d6c <USB_GetDevSpeed>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681c      	ldr	r4, [r3, #0]
 8002fe0:	f001 f9de 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f002 fbc8 	bl	8005784 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe fb28 	bl	800164a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	6952      	ldr	r2, [r2, #20]
 8003004:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003008:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f003 fe94 	bl	8006d3c <USB_ReadInterrupts>
 8003014:	4603      	mov	r3, r0
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b08      	cmp	r3, #8
 800301c:	d10a      	bne.n	8003034 <HAL_PCD_IRQHandler+0x73c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe fb05 	bl	800162e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	6952      	ldr	r2, [r2, #20]
 800302e:	f002 0208 	and.w	r2, r2, #8
 8003032:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f003 fe7f 	bl	8006d3c <USB_ReadInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003044:	2b80      	cmp	r3, #128	; 0x80
 8003046:	d122      	bne.n	800308e <HAL_PCD_IRQHandler+0x796>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	e014      	b.n	8003084 <HAL_PCD_IRQHandler+0x78c>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d105      	bne.n	800307e <HAL_PCD_IRQHandler+0x786>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fb10 	bl	800369e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	3301      	adds	r3, #1
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	429a      	cmp	r2, r3
 800308c:	d8e5      	bhi.n	800305a <HAL_PCD_IRQHandler+0x762>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f003 fe52 	bl	8006d3c <USB_ReadInterrupts>
 8003098:	4603      	mov	r3, r0
 800309a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a2:	d13b      	bne.n	800311c <HAL_PCD_IRQHandler+0x824>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030a4:	2301      	movs	r3, #1
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	e02b      	b.n	8003102 <HAL_PCD_IRQHandler+0x80a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3340      	adds	r3, #64	; 0x40
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d115      	bne.n	80030fc <HAL_PCD_IRQHandler+0x804>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	da12      	bge.n	80030fc <HAL_PCD_IRQHandler+0x804>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	333f      	adds	r3, #63	; 0x3f
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fad1 	bl	800369e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	3301      	adds	r3, #1
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	429a      	cmp	r2, r3
 800310a:	d8ce      	bhi.n	80030aa <HAL_PCD_IRQHandler+0x7b2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	6952      	ldr	r2, [r2, #20]
 8003116:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800311a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f003 fe0b 	bl	8006d3c <USB_ReadInterrupts>
 8003126:	4603      	mov	r3, r0
 8003128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800312c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003130:	d156      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x8e8>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003132:	2301      	movs	r3, #1
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e046      	b.n	80031c6 <HAL_PCD_IRQHandler+0x8ce>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314c:	4613      	mov	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d12f      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x8c8>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003160:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003162:	2b00      	cmp	r3, #0
 8003164:	da2c      	bge.n	80031c0 <HAL_PCD_IRQHandler+0x8c8>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003172:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003176:	429a      	cmp	r2, r3
 8003178:	d122      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x8c8>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x8c8>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ae:	461a      	mov	r2, r3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031bc:	6053      	str	r3, [r2, #4]
            break;
 80031be:	e007      	b.n	80031d0 <HAL_PCD_IRQHandler+0x8d8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	3301      	adds	r3, #1
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d8b3      	bhi.n	8003138 <HAL_PCD_IRQHandler+0x840>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	6952      	ldr	r2, [r2, #20]
 80031da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f003 fda9 	bl	8006d3c <USB_ReadInterrupts>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d10a      	bne.n	800320c <HAL_PCD_IRQHandler+0x914>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe face 	bl	8001798 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	6952      	ldr	r2, [r2, #20]
 8003206:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800320a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f003 fd93 	bl	8006d3c <USB_ReadInterrupts>
 8003216:	4603      	mov	r3, r0
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	d115      	bne.n	800324c <HAL_PCD_IRQHandler+0x954>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_PCD_IRQHandler+0x940>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe fabe 	bl	80017b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	6851      	ldr	r1, [r2, #4]
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	e000      	b.n	800324c <HAL_PCD_IRQHandler+0x954>
      return;
 800324a:	bf00      	nop
    }
  }
}
 800324c:	3734      	adds	r7, #52	; 0x34
 800324e:	46bd      	mov	sp, r7
 8003250:	bd90      	pop	{r4, r7, pc}

08003252 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_PCD_SetAddress+0x1a>
 8003268:	2302      	movs	r3, #2
 800326a:	e013      	b.n	8003294 <HAL_PCD_SetAddress+0x42>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f003 fceb 	bl	8006c60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	4608      	mov	r0, r1
 80032a6:	4611      	mov	r1, r2
 80032a8:	461a      	mov	r2, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	70fb      	strb	r3, [r7, #3]
 80032ae:	460b      	mov	r3, r1
 80032b0:	803b      	strh	r3, [r7, #0]
 80032b2:	4613      	mov	r3, r2
 80032b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	da0f      	bge.n	80032e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	3338      	adds	r3, #56	; 0x38
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	3304      	adds	r3, #4
 80032d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	705a      	strb	r2, [r3, #1]
 80032e0:	e00f      	b.n	8003302 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 020f 	and.w	r2, r3, #15
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	3304      	adds	r3, #4
 80032fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800330e:	883a      	ldrh	r2, [r7, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	78ba      	ldrb	r2, [r7, #2]
 8003318:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	785b      	ldrb	r3, [r3, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800332c:	78bb      	ldrb	r3, [r7, #2]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d102      	bne.n	8003338 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_PCD_EP_Open+0xaa>
 8003342:	2302      	movs	r3, #2
 8003344:	e00e      	b.n	8003364 <HAL_PCD_EP_Open+0xc8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68f9      	ldr	r1, [r7, #12]
 8003354:	4618      	mov	r0, r3
 8003356:	f002 fd2e 	bl	8005db6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003362:	7afb      	ldrb	r3, [r7, #11]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800337c:	2b00      	cmp	r3, #0
 800337e:	da0f      	bge.n	80033a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	f003 020f 	and.w	r2, r3, #15
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	3338      	adds	r3, #56	; 0x38
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	3304      	adds	r3, #4
 8003396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	705a      	strb	r2, [r3, #1]
 800339e:	e00f      	b.n	80033c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_PCD_EP_Close+0x6e>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e00e      	b.n	80033f8 <HAL_PCD_EP_Close+0x8c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68f9      	ldr	r1, [r7, #12]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f002 fd6f 	bl	8005ecc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	460b      	mov	r3, r1
 800340e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	f003 020f 	and.w	r2, r3, #15
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2200      	movs	r2, #0
 8003440:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003442:	7afb      	ldrb	r3, [r7, #11]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	b2da      	uxtb	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d102      	bne.n	800345c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800345c:	7afb      	ldrb	r3, [r7, #11]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	6979      	ldr	r1, [r7, #20]
 8003474:	f003 f86e 	bl	8006554 <USB_EP0StartXfer>
 8003478:	e008      	b.n	800348c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	6979      	ldr	r1, [r7, #20]
 8003488:	f002 fe04 	bl	8006094 <USB_EPStartXfer>
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	460b      	mov	r3, r1
 80034a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a6:	7afb      	ldrb	r3, [r7, #11]
 80034a8:	f003 020f 	and.w	r2, r3, #15
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	3338      	adds	r3, #56	; 0x38
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	3304      	adds	r3, #4
 80034bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2201      	movs	r2, #1
 80034d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d6:	7afb      	ldrb	r3, [r7, #11]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d102      	bne.n	80034f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034f0:	7afb      	ldrb	r3, [r7, #11]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	6979      	ldr	r1, [r7, #20]
 8003508:	f003 f824 	bl	8006554 <USB_EP0StartXfer>
 800350c:	e008      	b.n	8003520 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	6979      	ldr	r1, [r7, #20]
 800351c:	f002 fdba 	bl	8006094 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	460b      	mov	r3, r1
 8003534:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 020f 	and.w	r2, r3, #15
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	d901      	bls.n	8003548 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e050      	b.n	80035ea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800354c:	2b00      	cmp	r3, #0
 800354e:	da0f      	bge.n	8003570 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	f003 020f 	and.w	r2, r3, #15
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	3338      	adds	r3, #56	; 0x38
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	4413      	add	r3, r2
 8003564:	3304      	adds	r3, #4
 8003566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	705a      	strb	r2, [r3, #1]
 800356e:	e00d      	b.n	800358c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	3304      	adds	r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_PCD_EP_SetStall+0x82>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e01e      	b.n	80035ea <HAL_PCD_EP_SetStall+0xc0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68f9      	ldr	r1, [r7, #12]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 fa74 	bl	8006aa8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	b2d9      	uxtb	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035da:	461a      	mov	r2, r3
 80035dc:	f003 fc74 	bl	8006ec8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	f003 020f 	and.w	r2, r3, #15
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	429a      	cmp	r2, r3
 800360a:	d901      	bls.n	8003610 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e042      	b.n	8003696 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003614:	2b00      	cmp	r3, #0
 8003616:	da0f      	bge.n	8003638 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f003 020f 	and.w	r2, r3, #15
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	3338      	adds	r3, #56	; 0x38
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	3304      	adds	r3, #4
 800362e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	705a      	strb	r2, [r3, #1]
 8003636:	e00f      	b.n	8003658 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	f003 020f 	and.w	r2, r3, #15
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	3304      	adds	r3, #4
 8003650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	b2da      	uxtb	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_PCD_EP_ClrStall+0x86>
 8003674:	2302      	movs	r3, #2
 8003676:	e00e      	b.n	8003696 <HAL_PCD_EP_ClrStall+0xa4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68f9      	ldr	r1, [r7, #12]
 8003686:	4618      	mov	r0, r3
 8003688:	f003 fa80 	bl	8006b8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	da0c      	bge.n	80036cc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	3338      	adds	r3, #56	; 0x38
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	3304      	adds	r3, #4
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e00c      	b.n	80036e6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	f003 020f 	and.w	r2, r3, #15
 80036d2:	4613      	mov	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68f9      	ldr	r1, [r7, #12]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f003 f898 	bl	8006822 <USB_EPStopXfer>
 80036f2:	4603      	mov	r3, r0
 80036f4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036f6:	7afb      	ldrb	r3, [r7, #11]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  Activate remote wakeup signalling
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  return (USB_ActivateRemoteWakeup(hpcd->Instance));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f003 fc71 	bl	8006ff4 <USB_ActivateRemoteWakeup>
 8003712:	4603      	mov	r3, r0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  De-activate remote wakeup signalling.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  return (USB_DeActivateRemoteWakeup(hpcd->Instance));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f003 fc83 	bl	8007034 <USB_DeActivateRemoteWakeup>
 800372e:	4603      	mov	r3, r0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af02      	add	r7, sp, #8
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	3338      	adds	r3, #56	; 0x38
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	429a      	cmp	r2, r3
 800376a:	d901      	bls.n	8003770 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e06d      	b.n	800384c <PCD_WriteEmptyTxFifo+0x114>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	429a      	cmp	r2, r3
 8003784:	d202      	bcs.n	800378c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	3303      	adds	r3, #3
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003794:	e02b      	b.n	80037ee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d202      	bcs.n	80037b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3303      	adds	r3, #3
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4603      	mov	r3, r0
 80037d0:	6978      	ldr	r0, [r7, #20]
 80037d2:	f003 f8d4 	bl	800697e <USB_WritePacket>

    ep->xfer_buff  += len;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a1a      	ldr	r2, [r3, #32]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	441a      	add	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	429a      	cmp	r2, r3
 8003802:	d309      	bcc.n	8003818 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800380c:	429a      	cmp	r2, r3
 800380e:	d203      	bcs.n	8003818 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1be      	bne.n	8003796 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	429a      	cmp	r2, r3
 8003822:	d812      	bhi.n	800384a <PCD_WriteEmptyTxFifo+0x112>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	2201      	movs	r2, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003838:	4619      	mov	r1, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	43db      	mvns	r3, r3
 8003846:	4013      	ands	r3, r2
 8003848:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	333c      	adds	r3, #60	; 0x3c
 800386c:	3304      	adds	r3, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d17b      	bne.n	8003982 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d015      	beq.n	80038c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4a61      	ldr	r2, [pc, #388]	; (8003a1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	f240 80b9 	bls.w	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80b3 	beq.w	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b6:	461a      	mov	r2, r3
 80038b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038bc:	6093      	str	r3, [r2, #8]
 80038be:	e0a7      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d6:	461a      	mov	r2, r3
 80038d8:	2320      	movs	r3, #32
 80038da:	6093      	str	r3, [r2, #8]
 80038dc:	e098      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f040 8093 	bne.w	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	4a4b      	ldr	r2, [pc, #300]	; (8003a1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d90f      	bls.n	8003912 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	461a      	mov	r2, r3
 800390a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390e:	6093      	str	r3, [r2, #8]
 8003910:	e07e      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	0159      	lsls	r1, r3, #5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	440b      	add	r3, r1
 8003934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393e:	1ad2      	subs	r2, r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d114      	bne.n	8003974 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800395c:	461a      	mov	r2, r3
 800395e:	2101      	movs	r1, #1
 8003960:	f003 fab2 	bl	8006ec8 <USB_EP0_OutStart>
 8003964:	e006      	b.n	8003974 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	441a      	add	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd fe22 	bl	80015c4 <HAL_PCD_DataOutStageCallback>
 8003980:	e046      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d124      	bne.n	80039d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a0:	461a      	mov	r2, r3
 80039a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a6:	6093      	str	r3, [r2, #8]
 80039a8:	e032      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	2320      	movs	r3, #32
 80039c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fd fdf9 	bl	80015c4 <HAL_PCD_DataOutStageCallback>
 80039d2:	e01d      	b.n	8003a10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d114      	bne.n	8003a04 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039fc:	461a      	mov	r2, r3
 80039fe:	2100      	movs	r1, #0
 8003a00:	f003 fa62 	bl	8006ec8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd fdda 	bl	80015c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	4f54300a 	.word	0x4f54300a
 8003a20:	4f54310a 	.word	0x4f54310a

08003a24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	333c      	adds	r3, #60	; 0x3c
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a15      	ldr	r2, [pc, #84]	; (8003aac <PCD_EP_OutSetupPacket_int+0x88>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d90e      	bls.n	8003a78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d009      	beq.n	8003a78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a70:	461a      	mov	r2, r3
 8003a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fd fd91 	bl	80015a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <PCD_EP_OutSetupPacket_int+0x88>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d90c      	bls.n	8003aa0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d108      	bne.n	8003aa0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	f003 fa14 	bl	8006ec8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	4f54300a 	.word	0x4f54300a

08003ab0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
 8003abc:	4613      	mov	r3, r2
 8003abe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d107      	bne.n	8003ade <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	883a      	ldrh	r2, [r7, #0]
 8003ad4:	0411      	lsls	r1, r2, #16
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
 8003adc:	e028      	b.n	8003b30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4413      	add	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	e00d      	b.n	8003b0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	3340      	adds	r3, #64	; 0x40
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4413      	add	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d3ec      	bcc.n	8003af2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	883a      	ldrh	r2, [r7, #0]
 8003b22:	0410      	lsls	r0, r2, #16
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	4302      	orrs	r2, r0
 8003b28:	3340      	adds	r3, #64	; 0x40
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e264      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d075      	beq.n	8003c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b96:	4ba3      	ldr	r3, [pc, #652]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d00c      	beq.n	8003bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba2:	4ba0      	ldr	r3, [pc, #640]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d112      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bae:	4b9d      	ldr	r3, [pc, #628]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bba:	d10b      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	4b99      	ldr	r3, [pc, #612]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d05b      	beq.n	8003c80 <HAL_RCC_OscConfig+0x108>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d157      	bne.n	8003c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e23f      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bdc:	d106      	bne.n	8003bec <HAL_RCC_OscConfig+0x74>
 8003bde:	4a91      	ldr	r2, [pc, #580]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	4b90      	ldr	r3, [pc, #576]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e01d      	b.n	8003c28 <HAL_RCC_OscConfig+0xb0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x98>
 8003bf6:	4a8b      	ldr	r2, [pc, #556]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	4b8a      	ldr	r3, [pc, #552]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4a88      	ldr	r2, [pc, #544]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	4b87      	ldr	r3, [pc, #540]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0xb0>
 8003c10:	4a84      	ldr	r2, [pc, #528]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	4b84      	ldr	r3, [pc, #528]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4a81      	ldr	r2, [pc, #516]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003c1e:	4b81      	ldr	r3, [pc, #516]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fe fa3a 	bl	80020a8 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fe fa36 	bl	80020a8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e204      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0xc0>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fe fa26 	bl	80020a8 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe fa22 	bl	80020a8 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e1f0      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	4b6c      	ldr	r3, [pc, #432]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0xe8>
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d063      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8e:	4b65      	ldr	r3, [pc, #404]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b62      	ldr	r3, [pc, #392]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	4b5c      	ldr	r3, [pc, #368]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_RCC_OscConfig+0x152>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e1c4      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cca:	4956      	ldr	r1, [pc, #344]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	4b55      	ldr	r3, [pc, #340]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	e03a      	b.n	8003d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce8:	4b4f      	ldr	r3, [pc, #316]	; (8003e28 <HAL_RCC_OscConfig+0x2b0>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fe f9db 	bl	80020a8 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf6:	f7fe f9d7 	bl	80020a8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e1a5      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	4b46      	ldr	r3, [pc, #280]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d14:	4943      	ldr	r1, [pc, #268]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	4b43      	ldr	r3, [pc, #268]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]
 8003d28:	e015      	b.n	8003d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2a:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <HAL_RCC_OscConfig+0x2b0>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fe f9ba 	bl	80020a8 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d38:	f7fe f9b6 	bl	80020a8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e184      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d030      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6a:	4b30      	ldr	r3, [pc, #192]	; (8003e2c <HAL_RCC_OscConfig+0x2b4>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fe f99a 	bl	80020a8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d78:	f7fe f996 	bl	80020a8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e164      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x200>
 8003d96:	e015      	b.n	8003dc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d98:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_RCC_OscConfig+0x2b4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9e:	f7fe f983 	bl	80020a8 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da6:	f7fe f97f 	bl	80020a8 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e14d      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a0 	beq.w	8003f12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	4a0f      	ldr	r2, [pc, #60]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCC_OscConfig+0x2b8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d121      	bne.n	8003e52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0e:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <HAL_RCC_OscConfig+0x2b8>)
 8003e10:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_RCC_OscConfig+0x2b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe f945 	bl	80020a8 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	e011      	b.n	8003e46 <HAL_RCC_OscConfig+0x2ce>
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	42470000 	.word	0x42470000
 8003e2c:	42470e80 	.word	0x42470e80
 8003e30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e34:	f7fe f938 	bl	80020a8 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e106      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b85      	ldr	r3, [pc, #532]	; (800405c <HAL_RCC_OscConfig+0x4e4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d106      	bne.n	8003e68 <HAL_RCC_OscConfig+0x2f0>
 8003e5a:	4a81      	ldr	r2, [pc, #516]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003e5c:	4b80      	ldr	r3, [pc, #512]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
 8003e66:	e01c      	b.n	8003ea2 <HAL_RCC_OscConfig+0x32a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	d10c      	bne.n	8003e8a <HAL_RCC_OscConfig+0x312>
 8003e70:	4a7b      	ldr	r2, [pc, #492]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003e72:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	f043 0304 	orr.w	r3, r3, #4
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7c:	4a78      	ldr	r2, [pc, #480]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003e7e:	4b78      	ldr	r3, [pc, #480]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	e00b      	b.n	8003ea2 <HAL_RCC_OscConfig+0x32a>
 8003e8a:	4a75      	ldr	r2, [pc, #468]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003e8c:	4b74      	ldr	r3, [pc, #464]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6713      	str	r3, [r2, #112]	; 0x70
 8003e96:	4a72      	ldr	r2, [pc, #456]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003e98:	4b71      	ldr	r3, [pc, #452]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d015      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eaa:	f7fe f8fd 	bl	80020a8 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f7fe f8f9 	bl	80020a8 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e0c5      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec8:	4b65      	ldr	r3, [pc, #404]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ee      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x33a>
 8003ed4:	e014      	b.n	8003f00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe f8e7 	bl	80020a8 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fe f8e3 	bl	80020a8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0af      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef4:	4b5a      	ldr	r3, [pc, #360]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1ee      	bne.n	8003ede <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d105      	bne.n	8003f12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f06:	4a56      	ldr	r2, [pc, #344]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003f08:	4b55      	ldr	r3, [pc, #340]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 809b 	beq.w	8004052 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f1c:	4b50      	ldr	r3, [pc, #320]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d05c      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d141      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f30:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <HAL_RCC_OscConfig+0x4ec>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f36:	f7fe f8b7 	bl	80020a8 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fe f8b3 	bl	80020a8 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e081      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f50:	4b43      	ldr	r3, [pc, #268]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f5c:	4940      	ldr	r1, [pc, #256]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	019b      	lsls	r3, r3, #6
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	3b01      	subs	r3, #1
 8003f78:	041b      	lsls	r3, r3, #16
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	061b      	lsls	r3, r3, #24
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f86:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCC_OscConfig+0x4ec>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fe f88c 	bl	80020a8 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f94:	f7fe f888 	bl	80020a8 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e056      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa6:	4b2e      	ldr	r3, [pc, #184]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x41c>
 8003fb2:	e04e      	b.n	8004052 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb4:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <HAL_RCC_OscConfig+0x4ec>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fe f875 	bl	80020a8 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fe f871 	bl	80020a8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e03f      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd4:	4b22      	ldr	r3, [pc, #136]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f0      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x44a>
 8003fe0:	e037      	b.n	8004052 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e032      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fee:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <HAL_RCC_OscConfig+0x4e8>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d028      	beq.n	800404e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004006:	429a      	cmp	r2, r3
 8004008:	d121      	bne.n	800404e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d11a      	bne.n	800404e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800401e:	4013      	ands	r3, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004024:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004026:	4293      	cmp	r3, r2
 8004028:	d111      	bne.n	800404e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	3b01      	subs	r3, #1
 8004038:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d107      	bne.n	800404e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d001      	beq.n	8004052 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40007000 	.word	0x40007000
 8004060:	40023800 	.word	0x40023800
 8004064:	42470060 	.word	0x42470060

08004068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0cc      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b68      	ldr	r3, [pc, #416]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0207 	and.w	r2, r3, #7
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d20c      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b65      	ldr	r3, [pc, #404]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b63      	ldr	r3, [pc, #396]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0207 	and.w	r2, r3, #7
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0b8      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d020      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040bc:	4a59      	ldr	r2, [pc, #356]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	4b59      	ldr	r3, [pc, #356]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d4:	4a53      	ldr	r2, [pc, #332]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e0:	4950      	ldr	r1, [pc, #320]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d044      	beq.n	8004188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d119      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e07f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d003      	beq.n	8004126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	2b03      	cmp	r3, #3
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	4b3f      	ldr	r3, [pc, #252]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e06f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e067      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4937      	ldr	r1, [pc, #220]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	4b36      	ldr	r3, [pc, #216]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 0203 	bic.w	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004158:	f7fd ffa6 	bl	80020a8 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fd ffa2 	bl	80020a8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e04f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b25      	ldr	r3, [pc, #148]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0207 	and.w	r2, r3, #7
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d90c      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b22      	ldr	r3, [pc, #136]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0207 	and.w	r2, r3, #7
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e032      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041bc:	4919      	ldr	r1, [pc, #100]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041da:	4912      	ldr	r1, [pc, #72]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ee:	f000 f821 	bl	8004234 <HAL_RCC_GetSysClockFreq>
 80041f2:	4601      	mov	r1, r0
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	5cd3      	ldrb	r3, [r2, r3]
 8004202:	fa21 f303 	lsr.w	r3, r1, r3
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd ff06 	bl	8002020 <HAL_InitTick>

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023c00 	.word	0x40023c00
 8004224:	40023800 	.word	0x40023800
 8004228:	08008858 	.word	0x08008858
 800422c:	20000064 	.word	0x20000064
 8004230:	2000013c 	.word	0x2000013c

08004234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004238:	b087      	sub	sp, #28
 800423a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800423c:	2200      	movs	r2, #0
 800423e:	60fa      	str	r2, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	617a      	str	r2, [r7, #20]
 8004244:	2200      	movs	r2, #0
 8004246:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8004248:	2200      	movs	r2, #0
 800424a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800424c:	4a51      	ldr	r2, [pc, #324]	; (8004394 <HAL_RCC_GetSysClockFreq+0x160>)
 800424e:	6892      	ldr	r2, [r2, #8]
 8004250:	f002 020c 	and.w	r2, r2, #12
 8004254:	2a04      	cmp	r2, #4
 8004256:	d007      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x34>
 8004258:	2a08      	cmp	r2, #8
 800425a:	d008      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x3a>
 800425c:	2a00      	cmp	r2, #0
 800425e:	f040 8090 	bne.w	8004382 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004262:	4b4d      	ldr	r3, [pc, #308]	; (8004398 <HAL_RCC_GetSysClockFreq+0x164>)
 8004264:	613b      	str	r3, [r7, #16]
       break;
 8004266:	e08f      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004268:	4b4c      	ldr	r3, [pc, #304]	; (800439c <HAL_RCC_GetSysClockFreq+0x168>)
 800426a:	613b      	str	r3, [r7, #16]
      break;
 800426c:	e08c      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800426e:	4a49      	ldr	r2, [pc, #292]	; (8004394 <HAL_RCC_GetSysClockFreq+0x160>)
 8004270:	6852      	ldr	r2, [r2, #4]
 8004272:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004276:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004278:	4a46      	ldr	r2, [pc, #280]	; (8004394 <HAL_RCC_GetSysClockFreq+0x160>)
 800427a:	6852      	ldr	r2, [r2, #4]
 800427c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004280:	2a00      	cmp	r2, #0
 8004282:	d023      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004284:	4b43      	ldr	r3, [pc, #268]	; (8004394 <HAL_RCC_GetSysClockFreq+0x160>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	f04f 0400 	mov.w	r4, #0
 800428e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	ea03 0301 	and.w	r3, r3, r1
 800429a:	ea04 0402 	and.w	r4, r4, r2
 800429e:	4a3f      	ldr	r2, [pc, #252]	; (800439c <HAL_RCC_GetSysClockFreq+0x168>)
 80042a0:	fb02 f104 	mul.w	r1, r2, r4
 80042a4:	2200      	movs	r2, #0
 80042a6:	fb02 f203 	mul.w	r2, r2, r3
 80042aa:	440a      	add	r2, r1
 80042ac:	493b      	ldr	r1, [pc, #236]	; (800439c <HAL_RCC_GetSysClockFreq+0x168>)
 80042ae:	fba3 0101 	umull	r0, r1, r3, r1
 80042b2:	1853      	adds	r3, r2, r1
 80042b4:	4619      	mov	r1, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f04f 0400 	mov.w	r4, #0
 80042bc:	461a      	mov	r2, r3
 80042be:	4623      	mov	r3, r4
 80042c0:	f7fb ff8a 	bl	80001d8 <__aeabi_uldivmod>
 80042c4:	4603      	mov	r3, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e04c      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042cc:	4a31      	ldr	r2, [pc, #196]	; (8004394 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ce:	6852      	ldr	r2, [r2, #4]
 80042d0:	0992      	lsrs	r2, r2, #6
 80042d2:	4611      	mov	r1, r2
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f240 15ff 	movw	r5, #511	; 0x1ff
 80042dc:	f04f 0600 	mov.w	r6, #0
 80042e0:	ea05 0501 	and.w	r5, r5, r1
 80042e4:	ea06 0602 	and.w	r6, r6, r2
 80042e8:	4629      	mov	r1, r5
 80042ea:	4632      	mov	r2, r6
 80042ec:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80042f0:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80042f4:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80042f8:	4651      	mov	r1, sl
 80042fa:	465a      	mov	r2, fp
 80042fc:	46aa      	mov	sl, r5
 80042fe:	46b3      	mov	fp, r6
 8004300:	4655      	mov	r5, sl
 8004302:	465e      	mov	r6, fp
 8004304:	1b4d      	subs	r5, r1, r5
 8004306:	eb62 0606 	sbc.w	r6, r2, r6
 800430a:	4629      	mov	r1, r5
 800430c:	4632      	mov	r2, r6
 800430e:	0194      	lsls	r4, r2, #6
 8004310:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004314:	018b      	lsls	r3, r1, #6
 8004316:	1a5b      	subs	r3, r3, r1
 8004318:	eb64 0402 	sbc.w	r4, r4, r2
 800431c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8004320:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8004324:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8004328:	4643      	mov	r3, r8
 800432a:	464c      	mov	r4, r9
 800432c:	4655      	mov	r5, sl
 800432e:	465e      	mov	r6, fp
 8004330:	18ed      	adds	r5, r5, r3
 8004332:	eb46 0604 	adc.w	r6, r6, r4
 8004336:	462b      	mov	r3, r5
 8004338:	4634      	mov	r4, r6
 800433a:	02a2      	lsls	r2, r4, #10
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	029b      	lsls	r3, r3, #10
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800434e:	4618      	mov	r0, r3
 8004350:	4621      	mov	r1, r4
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f04f 0400 	mov.w	r4, #0
 8004358:	461a      	mov	r2, r3
 800435a:	4623      	mov	r3, r4
 800435c:	f7fb ff3c 	bl	80001d8 <__aeabi_uldivmod>
 8004360:	4603      	mov	r3, r0
 8004362:	460c      	mov	r4, r1
 8004364:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_GetSysClockFreq+0x160>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	0c1b      	lsrs	r3, r3, #16
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	3301      	adds	r3, #1
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	613b      	str	r3, [r7, #16]
      break;
 8004380:	e002      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCC_GetSysClockFreq+0x164>)
 8004384:	613b      	str	r3, [r7, #16]
      break;
 8004386:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004388:	693b      	ldr	r3, [r7, #16]
}
 800438a:	4618      	mov	r0, r3
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004394:	40023800 	.word	0x40023800
 8004398:	00f42400 	.word	0x00f42400
 800439c:	017d7840 	.word	0x017d7840

080043a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000064 	.word	0x20000064

080043b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043bc:	f7ff fff0 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043c0:	4601      	mov	r1, r0
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	4a03      	ldr	r2, [pc, #12]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ce:	5cd3      	ldrb	r3, [r2, r3]
 80043d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40023800 	.word	0x40023800
 80043dc:	08008868 	.word	0x08008868

080043e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043e4:	f7ff ffdc 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043e8:	4601      	mov	r1, r0
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0b5b      	lsrs	r3, r3, #13
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	4a03      	ldr	r2, [pc, #12]	; (8004404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	08008868 	.word	0x08008868

08004408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e041      	b.n	800449e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fc fed0 	bl	80011d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f000 fa86 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d001      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e044      	b.n	800454a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	68d2      	ldr	r2, [r2, #12]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <HAL_TIM_Base_Start_IT+0xb0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d018      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x6c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d013      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x6c>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1a      	ldr	r2, [pc, #104]	; (800455c <HAL_TIM_Base_Start_IT+0xb4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x6c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a19      	ldr	r2, [pc, #100]	; (8004560 <HAL_TIM_Base_Start_IT+0xb8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x6c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a17      	ldr	r2, [pc, #92]	; (8004564 <HAL_TIM_Base_Start_IT+0xbc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x6c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a16      	ldr	r2, [pc, #88]	; (8004568 <HAL_TIM_Base_Start_IT+0xc0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d111      	bne.n	8004538 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b06      	cmp	r3, #6
 8004524:	d010      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	e007      	b.n	8004548 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40010000 	.word	0x40010000
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40014000 	.word	0x40014000

0800456c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d122      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d11b      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0202 	mvn.w	r2, #2
 8004598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9b4 	bl	800491c <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f9a6 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f9b7 	bl	8004930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d122      	bne.n	800461c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d11b      	bne.n	800461c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0204 	mvn.w	r2, #4
 80045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f98a 	bl	800491c <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f97c 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f98d 	bl	8004930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b08      	cmp	r3, #8
 8004628:	d122      	bne.n	8004670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b08      	cmp	r3, #8
 8004636:	d11b      	bne.n	8004670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0208 	mvn.w	r2, #8
 8004640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2204      	movs	r2, #4
 8004646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f960 	bl	800491c <HAL_TIM_IC_CaptureCallback>
 800465c:	e005      	b.n	800466a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f952 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f963 	bl	8004930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b10      	cmp	r3, #16
 800467c:	d122      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b10      	cmp	r3, #16
 800468a:	d11b      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0210 	mvn.w	r2, #16
 8004694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2208      	movs	r2, #8
 800469a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f936 	bl	800491c <HAL_TIM_IC_CaptureCallback>
 80046b0:	e005      	b.n	80046be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f928 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f939 	bl	8004930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10e      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d107      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0201 	mvn.w	r2, #1
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f902 	bl	80048f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b80      	cmp	r3, #128	; 0x80
 80046fc:	d10e      	bne.n	800471c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004708:	2b80      	cmp	r3, #128	; 0x80
 800470a:	d107      	bne.n	800471c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa42 	bl	8004ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d10e      	bne.n	8004748 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d107      	bne.n	8004748 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8fe 	bl	8004944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b20      	cmp	r3, #32
 8004754:	d10e      	bne.n	8004774 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b20      	cmp	r3, #32
 8004762:	d107      	bne.n	8004774 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0220 	mvn.w	r2, #32
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa0c 	bl	8004b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_TIM_ConfigClockSource+0x1c>
 8004794:	2302      	movs	r3, #2
 8004796:	e0a9      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x170>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d067      	beq.n	80048a0 <HAL_TIM_ConfigClockSource+0x124>
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d80b      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x70>
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d073      	beq.n	80048c0 <HAL_TIM_ConfigClockSource+0x144>
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d802      	bhi.n	80047e2 <HAL_TIM_ConfigClockSource+0x66>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d06f      	beq.n	80048c0 <HAL_TIM_ConfigClockSource+0x144>
 80047e0:	e077      	b.n	80048d2 <HAL_TIM_ConfigClockSource+0x156>
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d06c      	beq.n	80048c0 <HAL_TIM_ConfigClockSource+0x144>
 80047e6:	2b30      	cmp	r3, #48	; 0x30
 80047e8:	d06a      	beq.n	80048c0 <HAL_TIM_ConfigClockSource+0x144>
 80047ea:	e072      	b.n	80048d2 <HAL_TIM_ConfigClockSource+0x156>
 80047ec:	2b70      	cmp	r3, #112	; 0x70
 80047ee:	d00d      	beq.n	800480c <HAL_TIM_ConfigClockSource+0x90>
 80047f0:	2b70      	cmp	r3, #112	; 0x70
 80047f2:	d804      	bhi.n	80047fe <HAL_TIM_ConfigClockSource+0x82>
 80047f4:	2b50      	cmp	r3, #80	; 0x50
 80047f6:	d033      	beq.n	8004860 <HAL_TIM_ConfigClockSource+0xe4>
 80047f8:	2b60      	cmp	r3, #96	; 0x60
 80047fa:	d041      	beq.n	8004880 <HAL_TIM_ConfigClockSource+0x104>
 80047fc:	e069      	b.n	80048d2 <HAL_TIM_ConfigClockSource+0x156>
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004802:	d069      	beq.n	80048d8 <HAL_TIM_ConfigClockSource+0x15c>
 8004804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004808:	d017      	beq.n	800483a <HAL_TIM_ConfigClockSource+0xbe>
 800480a:	e062      	b.n	80048d2 <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6899      	ldr	r1, [r3, #8]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f000 f996 	bl	8004b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800482e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	609a      	str	r2, [r3, #8]
      break;
 8004838:	e04f      	b.n	80048da <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6899      	ldr	r1, [r3, #8]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f000 f97f 	bl	8004b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	6892      	ldr	r2, [r2, #8]
 8004858:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800485c:	609a      	str	r2, [r3, #8]
      break;
 800485e:	e03c      	b.n	80048da <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	461a      	mov	r2, r3
 800486e:	f000 f8f3 	bl	8004a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2150      	movs	r1, #80	; 0x50
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f94c 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 800487e:	e02c      	b.n	80048da <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	461a      	mov	r2, r3
 800488e:	f000 f912 	bl	8004ab6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2160      	movs	r1, #96	; 0x60
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f93c 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 800489e:	e01c      	b.n	80048da <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	461a      	mov	r2, r3
 80048ae:	f000 f8d3 	bl	8004a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2140      	movs	r1, #64	; 0x40
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f92c 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 80048be:	e00c      	b.n	80048da <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f000 f923 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 80048d0:	e003      	b.n	80048da <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
      break;
 80048d6:	e000      	b.n	80048da <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80048d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a34      	ldr	r2, [pc, #208]	; (8004a3c <TIM_Base_SetConfig+0xe4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00f      	beq.n	8004990 <TIM_Base_SetConfig+0x38>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004976:	d00b      	beq.n	8004990 <TIM_Base_SetConfig+0x38>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a31      	ldr	r2, [pc, #196]	; (8004a40 <TIM_Base_SetConfig+0xe8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_Base_SetConfig+0x38>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a30      	ldr	r2, [pc, #192]	; (8004a44 <TIM_Base_SetConfig+0xec>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0x38>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <TIM_Base_SetConfig+0xf0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d108      	bne.n	80049a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a25      	ldr	r2, [pc, #148]	; (8004a3c <TIM_Base_SetConfig+0xe4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01b      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d017      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a22      	ldr	r2, [pc, #136]	; (8004a40 <TIM_Base_SetConfig+0xe8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a21      	ldr	r2, [pc, #132]	; (8004a44 <TIM_Base_SetConfig+0xec>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00f      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <TIM_Base_SetConfig+0xf0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <TIM_Base_SetConfig+0xf4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <TIM_Base_SetConfig+0xf8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_Base_SetConfig+0x8a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <TIM_Base_SetConfig+0xfc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d108      	bne.n	80049f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <TIM_Base_SetConfig+0xe4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d103      	bne.n	8004a28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	615a      	str	r2, [r3, #20]
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f023 0201 	bic.w	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 030a 	bic.w	r3, r3, #10
 8004a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b087      	sub	sp, #28
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0210 	bic.w	r2, r3, #16
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	031b      	lsls	r3, r3, #12
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f043 0307 	orr.w	r3, r3, #7
 8004b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	021a      	lsls	r2, r3, #8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	609a      	str	r2, [r3, #8]
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e047      	b.n	8004c56 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fc fa8a 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2224      	movs	r2, #36	; 0x24
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	68d2      	ldr	r2, [r2, #12]
 8004bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fa39 	bl	8005070 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	6912      	ldr	r2, [r2, #16]
 8004c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	6952      	ldr	r2, [r2, #20]
 8004c18:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004c1c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	6952      	ldr	r2, [r2, #20]
 8004c28:	f042 0208 	orr.w	r2, r2, #8
 8004c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	68d2      	ldr	r2, [r2, #12]
 8004c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b08a      	sub	sp, #40	; 0x28
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d17b      	bne.n	8004d76 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_UART_Transmit+0x2c>
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e074      	b.n	8004d78 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_UART_Transmit+0x3e>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e06d      	b.n	8004d78 <HAL_UART_Transmit+0x11a>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2221      	movs	r2, #33	; 0x21
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cb2:	f7fd f9f9 	bl	80020a8 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	88fa      	ldrh	r2, [r7, #6]
 8004cc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ccc:	d108      	bne.n	8004ce0 <HAL_UART_Transmit+0x82>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	e003      	b.n	8004ce8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cf0:	e029      	b.n	8004d46 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f949 	bl	8004f94 <UART_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e035      	b.n	8004d78 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	8812      	ldrh	r2, [r2, #0]
 8004d1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d1e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	3302      	adds	r3, #2
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	e007      	b.n	8004d38 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	7812      	ldrb	r2, [r2, #0]
 8004d30:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	3301      	adds	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1d0      	bne.n	8004cf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2200      	movs	r2, #0
 8004d58:	2140      	movs	r1, #64	; 0x40
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f91a 	bl	8004f94 <UART_WaitOnFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e006      	b.n	8004d78 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e000      	b.n	8004d78 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004d76:	2302      	movs	r3, #2
  }
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3720      	adds	r7, #32
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	; 0x28
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	f040 808c 	bne.w	8004eba <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_UART_Receive+0x2e>
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e084      	b.n	8004ebc <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_UART_Receive+0x40>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e07d      	b.n	8004ebc <HAL_UART_Receive+0x13c>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2222      	movs	r2, #34	; 0x22
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ddc:	f7fd f964 	bl	80020a8 <HAL_GetTick>
 8004de0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df6:	d108      	bne.n	8004e0a <HAL_UART_Receive+0x8a>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	e003      	b.n	8004e12 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e1a:	e043      	b.n	8004ea4 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2200      	movs	r2, #0
 8004e24:	2120      	movs	r1, #32
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f8b4 	bl	8004f94 <UART_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e042      	b.n	8004ebc <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10c      	bne.n	8004e56 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	3302      	adds	r3, #2
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	e01f      	b.n	8004e96 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5e:	d007      	beq.n	8004e70 <HAL_UART_Receive+0xf0>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <HAL_UART_Receive+0xfe>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e008      	b.n	8004e90 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	3301      	adds	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1b6      	bne.n	8004e1c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e000      	b.n	8004ebc <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004eba:	2302      	movs	r3, #2
  }
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e020      	b.n	8004f20 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2224      	movs	r2, #36	; 0x24
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f023 030c 	bic.w	r3, r3, #12
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f043 0308 	orr.w	r3, r3, #8
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e020      	b.n	8004f88 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2224      	movs	r2, #36	; 0x24
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f023 030c 	bic.w	r3, r3, #12
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b090      	sub	sp, #64	; 0x40
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa4:	e050      	b.n	8005048 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d04c      	beq.n	8005048 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fb4:	f7fd f878 	bl	80020a8 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d941      	bls.n	8005048 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fe4:	637a      	str	r2, [r7, #52]	; 0x34
 8004fe6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e5      	bne.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	613b      	str	r3, [r7, #16]
   return(result);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3314      	adds	r3, #20
 8005016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005018:	623a      	str	r2, [r7, #32]
 800501a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	69f9      	ldr	r1, [r7, #28]
 800501e:	6a3a      	ldr	r2, [r7, #32]
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	61bb      	str	r3, [r7, #24]
   return(result);
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e5      	bne.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e00f      	b.n	8005068 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	401a      	ands	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	429a      	cmp	r2, r3
 8005064:	d09f      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3740      	adds	r7, #64	; 0x40
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	b091      	sub	sp, #68	; 0x44
 8005076:	af00      	add	r7, sp, #0
 8005078:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800507a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	431a      	orrs	r2, r3
 800509a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	431a      	orrs	r2, r3
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	6819      	ldr	r1, [r3, #0]
 80050ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80050b6:	f022 020c 	bic.w	r2, r2, #12
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	4313      	orrs	r3, r2
 80050be:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4bba      	ldr	r3, [pc, #744]	; (80053c4 <UART_SetConfig+0x354>)
 80050dc:	429a      	cmp	r2, r3
 80050de:	d004      	beq.n	80050ea <UART_SetConfig+0x7a>
 80050e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4bb8      	ldr	r3, [pc, #736]	; (80053c8 <UART_SetConfig+0x358>)
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d103      	bne.n	80050f2 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050ea:	f7ff f979 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 80050ee:	63f8      	str	r0, [r7, #60]	; 0x3c
 80050f0:	e002      	b.n	80050f8 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050f2:	f7ff f961 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 80050f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005100:	f040 80a7 	bne.w	8005252 <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	62ba      	str	r2, [r7, #40]	; 0x28
 800510a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510c:	4619      	mov	r1, r3
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	460b      	mov	r3, r1
 8005114:	4614      	mov	r4, r2
 8005116:	18db      	adds	r3, r3, r3
 8005118:	eb44 0404 	adc.w	r4, r4, r4
 800511c:	185b      	adds	r3, r3, r1
 800511e:	eb44 0402 	adc.w	r4, r4, r2
 8005122:	00e0      	lsls	r0, r4, #3
 8005124:	6178      	str	r0, [r7, #20]
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800512c:	6178      	str	r0, [r7, #20]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005136:	185d      	adds	r5, r3, r1
 8005138:	eb44 0602 	adc.w	r6, r4, r2
 800513c:	4628      	mov	r0, r5
 800513e:	4631      	mov	r1, r6
 8005140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	18db      	adds	r3, r3, r3
 800514a:	eb44 0404 	adc.w	r4, r4, r4
 800514e:	461a      	mov	r2, r3
 8005150:	4623      	mov	r3, r4
 8005152:	f7fb f841 	bl	80001d8 <__aeabi_uldivmod>
 8005156:	4603      	mov	r3, r0
 8005158:	460c      	mov	r4, r1
 800515a:	461a      	mov	r2, r3
 800515c:	4b9b      	ldr	r3, [pc, #620]	; (80053cc <UART_SetConfig+0x35c>)
 800515e:	fba3 2302 	umull	r2, r3, r3, r2
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	011e      	lsls	r6, r3, #4
 8005166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005168:	4619      	mov	r1, r3
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	460b      	mov	r3, r1
 8005170:	4614      	mov	r4, r2
 8005172:	18db      	adds	r3, r3, r3
 8005174:	eb44 0404 	adc.w	r4, r4, r4
 8005178:	185b      	adds	r3, r3, r1
 800517a:	eb44 0402 	adc.w	r4, r4, r2
 800517e:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8005182:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8005186:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 800518a:	4653      	mov	r3, sl
 800518c:	465c      	mov	r4, fp
 800518e:	eb13 0a01 	adds.w	sl, r3, r1
 8005192:	eb44 0b02 	adc.w	fp, r4, r2
 8005196:	4650      	mov	r0, sl
 8005198:	4659      	mov	r1, fp
 800519a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f04f 0400 	mov.w	r4, #0
 80051a2:	18db      	adds	r3, r3, r3
 80051a4:	eb44 0404 	adc.w	r4, r4, r4
 80051a8:	461a      	mov	r2, r3
 80051aa:	4623      	mov	r3, r4
 80051ac:	f7fb f814 	bl	80001d8 <__aeabi_uldivmod>
 80051b0:	4603      	mov	r3, r0
 80051b2:	460c      	mov	r4, r1
 80051b4:	461a      	mov	r2, r3
 80051b6:	4b85      	ldr	r3, [pc, #532]	; (80053cc <UART_SetConfig+0x35c>)
 80051b8:	fba3 1302 	umull	r1, r3, r3, r2
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	2164      	movs	r1, #100	; 0x64
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	3332      	adds	r3, #50	; 0x32
 80051ca:	4a80      	ldr	r2, [pc, #512]	; (80053cc <UART_SetConfig+0x35c>)
 80051cc:	fba2 2303 	umull	r2, r3, r2, r3
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051d8:	441e      	add	r6, r3
 80051da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051dc:	4619      	mov	r1, r3
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4614      	mov	r4, r2
 80051e6:	18db      	adds	r3, r3, r3
 80051e8:	eb44 0404 	adc.w	r4, r4, r4
 80051ec:	185b      	adds	r3, r3, r1
 80051ee:	eb44 0402 	adc.w	r4, r4, r2
 80051f2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80051f6:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80051fa:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80051fe:	4643      	mov	r3, r8
 8005200:	464c      	mov	r4, r9
 8005202:	eb13 0801 	adds.w	r8, r3, r1
 8005206:	eb44 0902 	adc.w	r9, r4, r2
 800520a:	4640      	mov	r0, r8
 800520c:	4649      	mov	r1, r9
 800520e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f04f 0400 	mov.w	r4, #0
 8005216:	18db      	adds	r3, r3, r3
 8005218:	eb44 0404 	adc.w	r4, r4, r4
 800521c:	461a      	mov	r2, r3
 800521e:	4623      	mov	r3, r4
 8005220:	f7fa ffda 	bl	80001d8 <__aeabi_uldivmod>
 8005224:	4603      	mov	r3, r0
 8005226:	460c      	mov	r4, r1
 8005228:	461a      	mov	r2, r3
 800522a:	4b68      	ldr	r3, [pc, #416]	; (80053cc <UART_SetConfig+0x35c>)
 800522c:	fba3 1302 	umull	r1, r3, r3, r2
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	2164      	movs	r1, #100	; 0x64
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	3332      	adds	r3, #50	; 0x32
 800523e:	4a63      	ldr	r2, [pc, #396]	; (80053cc <UART_SetConfig+0x35c>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	4433      	add	r3, r6
 800524c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005250:	e0b3      	b.n	80053ba <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525a:	4619      	mov	r1, r3
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	460b      	mov	r3, r1
 8005262:	4614      	mov	r4, r2
 8005264:	18db      	adds	r3, r3, r3
 8005266:	eb44 0404 	adc.w	r4, r4, r4
 800526a:	185b      	adds	r3, r3, r1
 800526c:	eb44 0402 	adc.w	r4, r4, r2
 8005270:	00e6      	lsls	r6, r4, #3
 8005272:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8005276:	00dd      	lsls	r5, r3, #3
 8005278:	462b      	mov	r3, r5
 800527a:	4634      	mov	r4, r6
 800527c:	185d      	adds	r5, r3, r1
 800527e:	eb44 0602 	adc.w	r6, r4, r2
 8005282:	4628      	mov	r0, r5
 8005284:	4631      	mov	r1, r6
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f04f 0400 	mov.w	r4, #0
 800528e:	00a5      	lsls	r5, r4, #2
 8005290:	62fd      	str	r5, [r7, #44]	; 0x2c
 8005292:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8005294:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8005298:	62fd      	str	r5, [r7, #44]	; 0x2c
 800529a:	009c      	lsls	r4, r3, #2
 800529c:	62bc      	str	r4, [r7, #40]	; 0x28
 800529e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052a2:	f7fa ff99 	bl	80001d8 <__aeabi_uldivmod>
 80052a6:	4603      	mov	r3, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b47      	ldr	r3, [pc, #284]	; (80053cc <UART_SetConfig+0x35c>)
 80052ae:	fba3 1302 	umull	r1, r3, r3, r2
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	011d      	lsls	r5, r3, #4
 80052b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b8:	4619      	mov	r1, r3
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	460b      	mov	r3, r1
 80052c0:	4614      	mov	r4, r2
 80052c2:	18db      	adds	r3, r3, r3
 80052c4:	eb44 0404 	adc.w	r4, r4, r4
 80052c8:	185b      	adds	r3, r3, r1
 80052ca:	eb44 0402 	adc.w	r4, r4, r2
 80052ce:	00e0      	lsls	r0, r4, #3
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	00d8      	lsls	r0, r3, #3
 80052dc:	60b8      	str	r0, [r7, #8]
 80052de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052e2:	eb13 0801 	adds.w	r8, r3, r1
 80052e6:	eb44 0902 	adc.w	r9, r4, r2
 80052ea:	4640      	mov	r0, r8
 80052ec:	4649      	mov	r1, r9
 80052ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f04f 0400 	mov.w	r4, #0
 80052f6:	00a6      	lsls	r6, r4, #2
 80052f8:	627e      	str	r6, [r7, #36]	; 0x24
 80052fa:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80052fc:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8005300:	627e      	str	r6, [r7, #36]	; 0x24
 8005302:	009c      	lsls	r4, r3, #2
 8005304:	623c      	str	r4, [r7, #32]
 8005306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800530a:	f7fa ff65 	bl	80001d8 <__aeabi_uldivmod>
 800530e:	4603      	mov	r3, r0
 8005310:	460c      	mov	r4, r1
 8005312:	461a      	mov	r2, r3
 8005314:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <UART_SetConfig+0x35c>)
 8005316:	fba3 1302 	umull	r1, r3, r3, r2
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	2164      	movs	r1, #100	; 0x64
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	3332      	adds	r3, #50	; 0x32
 8005328:	4a28      	ldr	r2, [pc, #160]	; (80053cc <UART_SetConfig+0x35c>)
 800532a:	fba2 1303 	umull	r1, r3, r2, r3
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005334:	441d      	add	r5, r3
 8005336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005338:	4619      	mov	r1, r3
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	460b      	mov	r3, r1
 8005340:	4614      	mov	r4, r2
 8005342:	18db      	adds	r3, r3, r3
 8005344:	eb44 0404 	adc.w	r4, r4, r4
 8005348:	185b      	adds	r3, r3, r1
 800534a:	eb44 0402 	adc.w	r4, r4, r2
 800534e:	00e0      	lsls	r0, r4, #3
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	00d8      	lsls	r0, r3, #3
 800535c:	6038      	str	r0, [r7, #0]
 800535e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8005362:	eb13 0801 	adds.w	r8, r3, r1
 8005366:	eb44 0902 	adc.w	r9, r4, r2
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f04f 0400 	mov.w	r4, #0
 8005376:	00a6      	lsls	r6, r4, #2
 8005378:	61fe      	str	r6, [r7, #28]
 800537a:	69fe      	ldr	r6, [r7, #28]
 800537c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8005380:	61fe      	str	r6, [r7, #28]
 8005382:	009c      	lsls	r4, r3, #2
 8005384:	61bc      	str	r4, [r7, #24]
 8005386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800538a:	f7fa ff25 	bl	80001d8 <__aeabi_uldivmod>
 800538e:	4603      	mov	r3, r0
 8005390:	460c      	mov	r4, r1
 8005392:	461a      	mov	r2, r3
 8005394:	4b0d      	ldr	r3, [pc, #52]	; (80053cc <UART_SetConfig+0x35c>)
 8005396:	fba3 1302 	umull	r1, r3, r3, r2
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	2164      	movs	r1, #100	; 0x64
 800539e:	fb01 f303 	mul.w	r3, r1, r3
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	3332      	adds	r3, #50	; 0x32
 80053a8:	4a08      	ldr	r2, [pc, #32]	; (80053cc <UART_SetConfig+0x35c>)
 80053aa:	fba2 1303 	umull	r1, r3, r2, r3
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	442b      	add	r3, r5
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	6093      	str	r3, [r2, #8]
}
 80053ba:	bf00      	nop
 80053bc:	3744      	adds	r7, #68	; 0x44
 80053be:	46bd      	mov	sp, r7
 80053c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c4:	40011000 	.word	0x40011000
 80053c8:	40011400 	.word	0x40011400
 80053cc:	51eb851f 	.word	0x51eb851f

080053d0 <LL_GPIO_SetPinMode>:
{
 80053d0:	b480      	push	{r7}
 80053d2:	b089      	sub	sp, #36	; 0x24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	fa93 f3a3 	rbit	r3, r3
 80053ea:	613b      	str	r3, [r7, #16]
  return result;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	fab3 f383 	clz	r3, r3
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	2103      	movs	r1, #3
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	401a      	ands	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	fa93 f3a3 	rbit	r3, r3
 800540a:	61bb      	str	r3, [r7, #24]
  return result;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	fab3 f383 	clz	r3, r3
 8005412:	b2db      	uxtb	r3, r3
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	601a      	str	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	3724      	adds	r7, #36	; 0x24
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_GPIO_SetPinOutputType>:
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	43db      	mvns	r3, r3
 8005442:	401a      	ands	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	431a      	orrs	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	605a      	str	r2, [r3, #4]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <LL_GPIO_SetPinSpeed>:
{
 800545e:	b480      	push	{r7}
 8005460:	b089      	sub	sp, #36	; 0x24
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	fa93 f3a3 	rbit	r3, r3
 8005478:	613b      	str	r3, [r7, #16]
  return result;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	fab3 f383 	clz	r3, r3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	2103      	movs	r1, #3
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	401a      	ands	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	fa93 f3a3 	rbit	r3, r3
 8005498:	61bb      	str	r3, [r7, #24]
  return result;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	fab3 f383 	clz	r3, r3
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	431a      	orrs	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	609a      	str	r2, [r3, #8]
}
 80054b0:	bf00      	nop
 80054b2:	3724      	adds	r7, #36	; 0x24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <LL_GPIO_SetPinPull>:
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	; 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	fa93 f3a3 	rbit	r3, r3
 80054d6:	613b      	str	r3, [r7, #16]
  return result;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	fab3 f383 	clz	r3, r3
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	2103      	movs	r1, #3
 80054e4:	fa01 f303 	lsl.w	r3, r1, r3
 80054e8:	43db      	mvns	r3, r3
 80054ea:	401a      	ands	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	fa93 f3a3 	rbit	r3, r3
 80054f6:	61bb      	str	r3, [r7, #24]
  return result;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	60da      	str	r2, [r3, #12]
}
 800550e:	bf00      	nop
 8005510:	3724      	adds	r7, #36	; 0x24
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <LL_GPIO_SetAFPin_0_7>:
{
 800551a:	b480      	push	{r7}
 800551c:	b089      	sub	sp, #36	; 0x24
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1a      	ldr	r2, [r3, #32]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	fa93 f3a3 	rbit	r3, r3
 8005534:	613b      	str	r3, [r7, #16]
  return result;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	fab3 f383 	clz	r3, r3
 800553c:	b2db      	uxtb	r3, r3
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	210f      	movs	r1, #15
 8005542:	fa01 f303 	lsl.w	r3, r1, r3
 8005546:	43db      	mvns	r3, r3
 8005548:	401a      	ands	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	61bb      	str	r3, [r7, #24]
  return result;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	fab3 f383 	clz	r3, r3
 800555c:	b2db      	uxtb	r3, r3
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	fa01 f303 	lsl.w	r3, r1, r3
 8005566:	431a      	orrs	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	621a      	str	r2, [r3, #32]
}
 800556c:	bf00      	nop
 800556e:	3724      	adds	r7, #36	; 0x24
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <LL_GPIO_SetAFPin_8_15>:
{
 8005578:	b480      	push	{r7}
 800557a:	b089      	sub	sp, #36	; 0x24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	fa93 f3a3 	rbit	r3, r3
 8005594:	613b      	str	r3, [r7, #16]
  return result;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	fab3 f383 	clz	r3, r3
 800559c:	b2db      	uxtb	r3, r3
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	210f      	movs	r1, #15
 80055a2:	fa01 f303 	lsl.w	r3, r1, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	401a      	ands	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	fa93 f3a3 	rbit	r3, r3
 80055b6:	61bb      	str	r3, [r7, #24]
  return result;
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	fab3 f383 	clz	r3, r3
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80055ce:	bf00      	nop
 80055d0:	3724      	adds	r7, #36	; 0x24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b088      	sub	sp, #32
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	fa93 f3a3 	rbit	r3, r3
 80055f8:	613b      	str	r3, [r7, #16]
  return result;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	fab3 f383 	clz	r3, r3
 8005600:	b2db      	uxtb	r3, r3
 8005602:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005604:	e050      	b.n	80056a8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	2101      	movs	r1, #1
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d042      	beq.n	80056a2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d003      	beq.n	800562c <LL_GPIO_Init+0x52>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d10d      	bne.n	8005648 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	461a      	mov	r2, r3
 8005632:	69b9      	ldr	r1, [r7, #24]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ff12 	bl	800545e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	461a      	mov	r2, r3
 8005640:	69b9      	ldr	r1, [r7, #24]
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fef3 	bl	800542e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	461a      	mov	r2, r3
 800564e:	69b9      	ldr	r1, [r7, #24]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ff33 	bl	80054bc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d11a      	bne.n	8005694 <LL_GPIO_Init+0xba>
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	fa93 f3a3 	rbit	r3, r3
 8005668:	60bb      	str	r3, [r7, #8]
  return result;
 800566a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800566c:	fab3 f383 	clz	r3, r3
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b07      	cmp	r3, #7
 8005674:	d807      	bhi.n	8005686 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	461a      	mov	r2, r3
 800567c:	69b9      	ldr	r1, [r7, #24]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ff4b 	bl	800551a <LL_GPIO_SetAFPin_0_7>
 8005684:	e006      	b.n	8005694 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	461a      	mov	r2, r3
 800568c:	69b9      	ldr	r1, [r7, #24]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff ff72 	bl	8005578 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	461a      	mov	r2, r3
 800569a:	69b9      	ldr	r1, [r7, #24]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff fe97 	bl	80053d0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	3301      	adds	r3, #1
 80056a6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	fa22 f303 	lsr.w	r3, r2, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1a7      	bne.n	8005606 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c0:	b084      	sub	sp, #16
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	f107 001c 	add.w	r0, r7, #28
 80056ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d122      	bne.n	800571e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005702:	2b01      	cmp	r3, #1
 8005704:	d105      	bne.n	8005712 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 fc3a 	bl	8006f8c <USB_CoreReset>
 8005718:	4603      	mov	r3, r0
 800571a:	73fb      	strb	r3, [r7, #15]
 800571c:	e01a      	b.n	8005754 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 fc2e 	bl	8006f8c <USB_CoreReset>
 8005730:	4603      	mov	r3, r0
 8005732:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	639a      	str	r2, [r3, #56]	; 0x38
 8005746:	e005      	b.n	8005754 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	2b01      	cmp	r3, #1
 8005758:	d10b      	bne.n	8005772 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f043 0206 	orr.w	r2, r3, #6
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f043 0220 	orr.w	r2, r3, #32
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005772:	7bfb      	ldrb	r3, [r7, #15]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800577e:	b004      	add	sp, #16
 8005780:	4770      	bx	lr
	...

08005784 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d165      	bne.n	8005864 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4a41      	ldr	r2, [pc, #260]	; (80058a0 <USB_SetTurnaroundTime+0x11c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d906      	bls.n	80057ae <USB_SetTurnaroundTime+0x2a>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4a40      	ldr	r2, [pc, #256]	; (80058a4 <USB_SetTurnaroundTime+0x120>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d802      	bhi.n	80057ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057a8:	230f      	movs	r3, #15
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	e062      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	4a3c      	ldr	r2, [pc, #240]	; (80058a4 <USB_SetTurnaroundTime+0x120>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d906      	bls.n	80057c4 <USB_SetTurnaroundTime+0x40>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <USB_SetTurnaroundTime+0x124>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d802      	bhi.n	80057c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057be:	230e      	movs	r3, #14
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	e057      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4a38      	ldr	r2, [pc, #224]	; (80058a8 <USB_SetTurnaroundTime+0x124>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d906      	bls.n	80057da <USB_SetTurnaroundTime+0x56>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4a37      	ldr	r2, [pc, #220]	; (80058ac <USB_SetTurnaroundTime+0x128>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d802      	bhi.n	80057da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057d4:	230d      	movs	r3, #13
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	e04c      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	4a33      	ldr	r2, [pc, #204]	; (80058ac <USB_SetTurnaroundTime+0x128>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d906      	bls.n	80057f0 <USB_SetTurnaroundTime+0x6c>
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4a32      	ldr	r2, [pc, #200]	; (80058b0 <USB_SetTurnaroundTime+0x12c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d802      	bhi.n	80057f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057ea:	230c      	movs	r3, #12
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e041      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4a2f      	ldr	r2, [pc, #188]	; (80058b0 <USB_SetTurnaroundTime+0x12c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d906      	bls.n	8005806 <USB_SetTurnaroundTime+0x82>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4a2e      	ldr	r2, [pc, #184]	; (80058b4 <USB_SetTurnaroundTime+0x130>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d802      	bhi.n	8005806 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005800:	230b      	movs	r3, #11
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e036      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4a2a      	ldr	r2, [pc, #168]	; (80058b4 <USB_SetTurnaroundTime+0x130>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d906      	bls.n	800581c <USB_SetTurnaroundTime+0x98>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4a29      	ldr	r2, [pc, #164]	; (80058b8 <USB_SetTurnaroundTime+0x134>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d802      	bhi.n	800581c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005816:	230a      	movs	r3, #10
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e02b      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <USB_SetTurnaroundTime+0x134>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d906      	bls.n	8005832 <USB_SetTurnaroundTime+0xae>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4a25      	ldr	r2, [pc, #148]	; (80058bc <USB_SetTurnaroundTime+0x138>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d802      	bhi.n	8005832 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800582c:	2309      	movs	r3, #9
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e020      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4a21      	ldr	r2, [pc, #132]	; (80058bc <USB_SetTurnaroundTime+0x138>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d906      	bls.n	8005848 <USB_SetTurnaroundTime+0xc4>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4a20      	ldr	r2, [pc, #128]	; (80058c0 <USB_SetTurnaroundTime+0x13c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d802      	bhi.n	8005848 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005842:	2308      	movs	r3, #8
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	e015      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4a1d      	ldr	r2, [pc, #116]	; (80058c0 <USB_SetTurnaroundTime+0x13c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d906      	bls.n	800585e <USB_SetTurnaroundTime+0xda>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <USB_SetTurnaroundTime+0x140>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d802      	bhi.n	800585e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005858:	2307      	movs	r3, #7
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	e00a      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800585e:	2306      	movs	r3, #6
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e007      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d102      	bne.n	8005870 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800586a:	2309      	movs	r3, #9
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	e001      	b.n	8005874 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005870:	2309      	movs	r3, #9
 8005872:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	029b      	lsls	r3, r3, #10
 8005888:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800588c:	431a      	orrs	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	00d8acbf 	.word	0x00d8acbf
 80058a4:	00e4e1bf 	.word	0x00e4e1bf
 80058a8:	00f423ff 	.word	0x00f423ff
 80058ac:	0106737f 	.word	0x0106737f
 80058b0:	011a499f 	.word	0x011a499f
 80058b4:	01312cff 	.word	0x01312cff
 80058b8:	014ca43f 	.word	0x014ca43f
 80058bc:	016e35ff 	.word	0x016e35ff
 80058c0:	01a6ab1f 	.word	0x01a6ab1f
 80058c4:	01e847ff 	.word	0x01e847ff

080058c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f043 0201 	orr.w	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f023 0201 	bic.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d115      	bne.n	800595a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800593a:	2001      	movs	r0, #1
 800593c:	f7fc fbc0 	bl	80020c0 <HAL_Delay>
      ms++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fa8b 	bl	8006e62 <USB_GetMode>
 800594c:	4603      	mov	r3, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	d01e      	beq.n	8005990 <USB_SetCurrentMode+0x84>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b31      	cmp	r3, #49	; 0x31
 8005956:	d9f0      	bls.n	800593a <USB_SetCurrentMode+0x2e>
 8005958:	e01a      	b.n	8005990 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d115      	bne.n	800598c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800596c:	2001      	movs	r0, #1
 800596e:	f7fc fba7 	bl	80020c0 <HAL_Delay>
      ms++;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 fa72 	bl	8006e62 <USB_GetMode>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <USB_SetCurrentMode+0x84>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b31      	cmp	r3, #49	; 0x31
 8005988:	d9f0      	bls.n	800596c <USB_SetCurrentMode+0x60>
 800598a:	e001      	b.n	8005990 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e005      	b.n	800599c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b32      	cmp	r3, #50	; 0x32
 8005994:	d101      	bne.n	800599a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059a4:	b084      	sub	sp, #16
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	e009      	b.n	80059d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	3340      	adds	r3, #64	; 0x40
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	2200      	movs	r2, #0
 80059d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3301      	adds	r3, #1
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b0e      	cmp	r3, #14
 80059dc:	d9f2      	bls.n	80059c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d11d      	bne.n	8005a20 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	461a      	mov	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f043 0302 	orr.w	r3, r3, #2
 80059f8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8005a1e:	e00b      	b.n	8005a38 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2300      	movs	r3, #0
 8005a42:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d10c      	bne.n	8005a76 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d104      	bne.n	8005a6c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a62:	2100      	movs	r1, #0
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f967 	bl	8005d38 <USB_SetDevSpeed>
 8005a6a:	e008      	b.n	8005a7e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f962 	bl	8005d38 <USB_SetDevSpeed>
 8005a74:	e003      	b.n	8005a7e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a76:	2103      	movs	r1, #3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f95d 	bl	8005d38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a7e:	2110      	movs	r1, #16
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f8f5 	bl	8005c70 <USB_FlushTxFifo>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f921 	bl	8005cd8 <USB_FlushRxFifo>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	e043      	b.n	8005b52 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae0:	d118      	bne.n	8005b14 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af4:	461a      	mov	r2, r3
 8005af6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	e013      	b.n	8005b26 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e008      	b.n	8005b26 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	461a      	mov	r2, r3
 8005b22:	2300      	movs	r3, #0
 8005b24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b32:	461a      	mov	r2, r3
 8005b34:	2300      	movs	r3, #0
 8005b36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	461a      	mov	r2, r3
 8005b46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d8b7      	bhi.n	8005aca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	e043      	b.n	8005be8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b76:	d118      	bne.n	8005baa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e013      	b.n	8005bbc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	e008      	b.n	8005bbc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005be0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3301      	adds	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d8b7      	bhi.n	8005b60 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d105      	bne.n	8005c26 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f043 0210 	orr.w	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <USB_DevInit+0x2c8>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f043 0208 	orr.w	r2, r3, #8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d107      	bne.n	8005c5a <USB_DevInit+0x2b6>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c52:	f043 0304 	orr.w	r3, r3, #4
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c66:	b004      	add	sp, #16
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	803c3800 	.word	0x803c3800

08005c70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4a13      	ldr	r2, [pc, #76]	; (8005cd4 <USB_FlushTxFifo+0x64>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d901      	bls.n	8005c90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e01b      	b.n	8005cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	daf2      	bge.n	8005c7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	019b      	lsls	r3, r3, #6
 8005ca0:	f043 0220 	orr.w	r2, r3, #32
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <USB_FlushTxFifo+0x64>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e006      	b.n	8005cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d0f0      	beq.n	8005ca8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	00030d40 	.word	0x00030d40

08005cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a11      	ldr	r2, [pc, #68]	; (8005d34 <USB_FlushRxFifo+0x5c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d901      	bls.n	8005cf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e018      	b.n	8005d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	daf2      	bge.n	8005ce4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2210      	movs	r2, #16
 8005d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a08      	ldr	r2, [pc, #32]	; (8005d34 <USB_FlushRxFifo+0x5c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e006      	b.n	8005d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d0f0      	beq.n	8005d08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	00030d40 	.word	0x00030d40

08005d38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	4619      	mov	r1, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0306 	and.w	r3, r3, #6
 8005d84:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d102      	bne.n	8005d92 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75fb      	strb	r3, [r7, #23]
 8005d90:	e00a      	b.n	8005da8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d002      	beq.n	8005d9e <USB_GetDevSpeed+0x32>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b06      	cmp	r3, #6
 8005d9c:	d102      	bne.n	8005da4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	75fb      	strb	r3, [r7, #23]
 8005da2:	e001      	b.n	8005da8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005da4:	230f      	movs	r3, #15
 8005da6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d13c      	bne.n	8005e4c <USB_ActivateEndpoint+0x96>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd8:	4618      	mov	r0, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de0:	69da      	ldr	r2, [r3, #28]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	2101      	movs	r1, #1
 8005dec:	fa01 f303 	lsl.w	r3, r1, r3
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	4313      	orrs	r3, r2
 8005df4:	61c3      	str	r3, [r0, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d158      	bne.n	8005ebe <USB_ActivateEndpoint+0x108>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	4618      	mov	r0, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	791b      	ldrb	r3, [r3, #4]
 8005e34:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e36:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	059b      	lsls	r3, r3, #22
 8005e3c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e48:	6003      	str	r3, [r0, #0]
 8005e4a:	e038      	b.n	8005ebe <USB_ActivateEndpoint+0x108>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	4618      	mov	r0, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	2101      	movs	r1, #1
 8005e66:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6a:	041b      	lsls	r3, r3, #16
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	61c3      	str	r3, [r0, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d11b      	bne.n	8005ebe <USB_ActivateEndpoint+0x108>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e92:	4618      	mov	r0, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	791b      	ldrb	r3, [r3, #4]
 8005eae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ebc:	6003      	str	r3, [r0, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d165      	bne.n	8005fb4 <USB_DeactivateEndpoint+0xe8>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005efe:	d121      	bne.n	8005f44 <USB_DeactivateEndpoint+0x78>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f20:	600b      	str	r3, [r1, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2e:	4619      	mov	r1, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f42:	600b      	str	r3, [r1, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	43db      	mvns	r3, r3
 8005f66:	4013      	ands	r3, r2
 8005f68:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f70:	4618      	mov	r0, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	2101      	movs	r1, #1
 8005f84:	fa01 f303 	lsl.w	r3, r1, r3
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	61c3      	str	r3, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4b37      	ldr	r3, [pc, #220]	; (800608c <USB_DeactivateEndpoint+0x1c0>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	600b      	str	r3, [r1, #0]
 8005fb2:	e064      	b.n	800607e <USB_DeactivateEndpoint+0x1b2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fca:	d121      	bne.n	8006010 <USB_DeactivateEndpoint+0x144>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	4619      	mov	r1, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fec:	600b      	str	r3, [r1, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800600e:	600b      	str	r3, [r1, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	4618      	mov	r0, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	2101      	movs	r1, #1
 800602a:	fa01 f303 	lsl.w	r3, r1, r3
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	43db      	mvns	r3, r3
 8006032:	4013      	ands	r3, r2
 8006034:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	4618      	mov	r0, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	2101      	movs	r1, #1
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	041b      	lsls	r3, r3, #16
 8006056:	43db      	mvns	r3, r3
 8006058:	4013      	ands	r3, r2
 800605a:	61c3      	str	r3, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	4619      	mov	r1, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <USB_DeactivateEndpoint+0x1c4>)
 800607a:	4013      	ands	r3, r2
 800607c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	ec337800 	.word	0xec337800
 8006090:	eff37800 	.word	0xeff37800

08006094 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af02      	add	r7, sp, #8
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	4613      	mov	r3, r2
 80060a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	f040 816c 	bne.w	800638e <USB_EPStartXfer+0x2fa>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d135      	bne.n	800612a <USB_EPStartXfer+0x96>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ca:	4619      	mov	r1, r3
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	4619      	mov	r1, r3
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006104:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006112:	4619      	mov	r1, r3
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	0cdb      	lsrs	r3, r3, #19
 8006124:	04db      	lsls	r3, r3, #19
 8006126:	610b      	str	r3, [r1, #16]
 8006128:	e07a      	b.n	8006220 <USB_EPStartXfer+0x18c>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006136:	4619      	mov	r1, r3
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	0cdb      	lsrs	r3, r3, #19
 8006148:	04db      	lsls	r3, r3, #19
 800614a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006158:	4619      	mov	r1, r3
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800616c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006170:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	4618      	mov	r0, r3
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6999      	ldr	r1, [r3, #24]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	440b      	add	r3, r1
 8006198:	1e59      	subs	r1, r3, #1
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	fbb1 f3f3 	udiv	r3, r1, r3
 80061a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80061a4:	4ba1      	ldr	r3, [pc, #644]	; (800642c <USB_EPStartXfer+0x398>)
 80061a6:	400b      	ands	r3, r1
 80061a8:	4313      	orrs	r3, r2
 80061aa:	6103      	str	r3, [r0, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	4619      	mov	r1, r3
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d0:	4313      	orrs	r3, r2
 80061d2:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	791b      	ldrb	r3, [r3, #4]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d121      	bne.n	8006220 <USB_EPStartXfer+0x18c>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e8:	4619      	mov	r1, r3
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80061fc:	610b      	str	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	4619      	mov	r1, r3
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800621e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d14e      	bne.n	80062c4 <USB_EPStartXfer+0x230>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <USB_EPStartXfer+0x1ae>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	461a      	mov	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	791b      	ldrb	r3, [r3, #4]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d12a      	bne.n	80062a0 <USB_EPStartXfer+0x20c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d111      	bne.n	800627e <USB_EPStartXfer+0x1ea>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006266:	4619      	mov	r1, r3
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800627a:	600b      	str	r3, [r1, #0]
 800627c:	e010      	b.n	80062a0 <USB_EPStartXfer+0x20c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628a:	4619      	mov	r1, r3
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629e:	600b      	str	r3, [r1, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	4619      	mov	r1, r3
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062c0:	600b      	str	r3, [r1, #0]
 80062c2:	e140      	b.n	8006546 <USB_EPStartXfer+0x4b2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	4619      	mov	r1, r3
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062e4:	600b      	str	r3, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	791b      	ldrb	r3, [r3, #4]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d016      	beq.n	800631c <USB_EPStartXfer+0x288>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8127 	beq.w	8006546 <USB_EPStartXfer+0x4b2>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fe:	4618      	mov	r0, r3
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	2101      	movs	r1, #1
 8006312:	fa01 f303 	lsl.w	r3, r1, r3
 8006316:	4313      	orrs	r3, r2
 8006318:	6343      	str	r3, [r0, #52]	; 0x34
 800631a:	e114      	b.n	8006546 <USB_EPStartXfer+0x4b2>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d111      	bne.n	8006350 <USB_EPStartXfer+0x2bc>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	4619      	mov	r1, r3
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800634c:	600b      	str	r3, [r1, #0]
 800634e:	e010      	b.n	8006372 <USB_EPStartXfer+0x2de>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635c:	4619      	mov	r1, r3
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006370:	600b      	str	r3, [r1, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6919      	ldr	r1, [r3, #16]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	781a      	ldrb	r2, [r3, #0]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	b298      	uxth	r0, r3
 8006380:	79fb      	ldrb	r3, [r7, #7]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	4603      	mov	r3, r0
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 faf9 	bl	800697e <USB_WritePacket>
 800638c:	e0db      	b.n	8006546 <USB_EPStartXfer+0x4b2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639a:	4619      	mov	r1, r3
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	0cdb      	lsrs	r3, r3, #19
 80063ac:	04db      	lsls	r3, r3, #19
 80063ae:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	4619      	mov	r1, r3
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063d4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d128      	bne.n	8006430 <USB_EPStartXfer+0x39c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ea:	4619      	mov	r1, r3
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006402:	4313      	orrs	r3, r2
 8006404:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006412:	4619      	mov	r1, r3
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006426:	610b      	str	r3, [r1, #16]
 8006428:	e03c      	b.n	80064a4 <USB_EPStartXfer+0x410>
 800642a:	bf00      	nop
 800642c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4413      	add	r3, r2
 800643a:	1e5a      	subs	r2, r3, #1
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	8afa      	ldrh	r2, [r7, #22]
 800644c:	fb02 f203 	mul.w	r2, r2, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006460:	4618      	mov	r0, r3
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	8afb      	ldrh	r3, [r7, #22]
 8006472:	04d9      	lsls	r1, r3, #19
 8006474:	4b36      	ldr	r3, [pc, #216]	; (8006550 <USB_EPStartXfer+0x4bc>)
 8006476:	400b      	ands	r3, r1
 8006478:	4313      	orrs	r3, r2
 800647a:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006488:	4619      	mov	r1, r3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a0:	4313      	orrs	r3, r2
 80064a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d10d      	bne.n	80064c6 <USB_EPStartXfer+0x432>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <USB_EPStartXfer+0x432>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064be:	461a      	mov	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	6153      	str	r3, [r2, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	791b      	ldrb	r3, [r3, #4]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d12a      	bne.n	8006524 <USB_EPStartXfer+0x490>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d111      	bne.n	8006502 <USB_EPStartXfer+0x46e>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ea:	4619      	mov	r1, r3
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064fe:	600b      	str	r3, [r1, #0]
 8006500:	e010      	b.n	8006524 <USB_EPStartXfer+0x490>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	4619      	mov	r1, r3
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006522:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006530:	4619      	mov	r1, r3
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006544:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3720      	adds	r7, #32
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	1ff80000 	.word	0x1ff80000

08006554 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b01      	cmp	r3, #1
 8006572:	f040 80d8 	bne.w	8006726 <USB_EP0StartXfer+0x1d2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d135      	bne.n	80065ea <USB_EP0StartXfer+0x96>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658a:	4619      	mov	r1, r3
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800659e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b0:	4619      	mov	r1, r3
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065c4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d2:	4619      	mov	r1, r3
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	0cdb      	lsrs	r3, r3, #19
 80065e4:	04db      	lsls	r3, r3, #19
 80065e6:	610b      	str	r3, [r1, #16]
 80065e8:	e052      	b.n	8006690 <USB_EP0StartXfer+0x13c>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f6:	4619      	mov	r1, r3
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	0cdb      	lsrs	r3, r3, #19
 8006608:	04db      	lsls	r3, r3, #19
 800660a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006618:	4619      	mov	r1, r3
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800662c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006630:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	429a      	cmp	r2, r3
 800663c:	d903      	bls.n	8006646 <USB_EP0StartXfer+0xf2>
      {
        ep->xfer_len = ep->maxpacket;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006652:	4619      	mov	r1, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006666:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	4619      	mov	r1, r3
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800668c:	4313      	orrs	r3, r2
 800668e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d11f      	bne.n	80066d6 <USB_EP0StartXfer+0x182>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <USB_EP0StartXfer+0x15e>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	461a      	mov	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066be:	4619      	mov	r1, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066d2:	600b      	str	r3, [r1, #0]
 80066d4:	e09e      	b.n	8006814 <USB_EP0StartXfer+0x2c0>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e2:	4619      	mov	r1, r3
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066f6:	600b      	str	r3, [r1, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8089 	beq.w	8006814 <USB_EP0StartXfer+0x2c0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006708:	4618      	mov	r0, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	2101      	movs	r1, #1
 800671c:	fa01 f303 	lsl.w	r3, r1, r3
 8006720:	4313      	orrs	r3, r2
 8006722:	6343      	str	r3, [r0, #52]	; 0x34
 8006724:	e076      	b.n	8006814 <USB_EP0StartXfer+0x2c0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006732:	4619      	mov	r1, r3
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	0cdb      	lsrs	r3, r3, #19
 8006744:	04db      	lsls	r3, r3, #19
 8006746:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006754:	4619      	mov	r1, r3
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006768:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800676c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <USB_EP0StartXfer+0x22a>
    {
      ep->xfer_len = ep->maxpacket;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	4619      	mov	r1, r3
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067a6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b4:	4619      	mov	r1, r3
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067cc:	4313      	orrs	r3, r2
 80067ce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d10d      	bne.n	80067f2 <USB_EP0StartXfer+0x29e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <USB_EP0StartXfer+0x29e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ea:	461a      	mov	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	6153      	str	r3, [r2, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fe:	4619      	mov	r1, r3
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006812:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006822:	b480      	push	{r7}
 8006824:	b087      	sub	sp, #28
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d14c      	bne.n	80068da <USB_EPStopXfer+0xb8>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006858:	f040 808a 	bne.w	8006970 <USB_EPStopXfer+0x14e>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686a:	4619      	mov	r1, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006880:	600b      	str	r3, [r1, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	4619      	mov	r1, r3
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068a6:	600b      	str	r3, [r1, #0]

      do
      {
        count++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d902      	bls.n	80068be <USB_EPStopXfer+0x9c>
        {
          ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	75fb      	strb	r3, [r7, #23]
          break;
 80068bc:	e058      	b.n	8006970 <USB_EPStopXfer+0x14e>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d6:	d0e7      	beq.n	80068a8 <USB_EPStopXfer+0x86>
 80068d8:	e04a      	b.n	8006970 <USB_EPStopXfer+0x14e>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068f2:	d13d      	bne.n	8006970 <USB_EPStopXfer+0x14e>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	4619      	mov	r1, r3
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006918:	600b      	str	r3, [r1, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	4619      	mov	r1, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800693e:	600b      	str	r3, [r1, #0]

      do
      {
        count++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3301      	adds	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f242 7210 	movw	r2, #10000	; 0x2710
 800694c:	4293      	cmp	r3, r2
 800694e:	d902      	bls.n	8006956 <USB_EPStopXfer+0x134>
        {
          ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	75fb      	strb	r3, [r7, #23]
          break;
 8006954:	e00c      	b.n	8006970 <USB_EPStopXfer+0x14e>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800696a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800696e:	d0e7      	beq.n	8006940 <USB_EPStopXfer+0x11e>
    }
  }

  return ret;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
}
 8006972:	4618      	mov	r0, r3
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800697e:	b480      	push	{r7}
 8006980:	b089      	sub	sp, #36	; 0x24
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	4611      	mov	r1, r2
 800698a:	461a      	mov	r2, r3
 800698c:	460b      	mov	r3, r1
 800698e:	71fb      	strb	r3, [r7, #7]
 8006990:	4613      	mov	r3, r2
 8006992:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800699c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d123      	bne.n	80069ec <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069a4:	88bb      	ldrh	r3, [r7, #4]
 80069a6:	3303      	adds	r3, #3
 80069a8:	089b      	lsrs	r3, r3, #2
 80069aa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069ac:	2300      	movs	r3, #0
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	e018      	b.n	80069e4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	031a      	lsls	r2, r3, #12
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069be:	461a      	mov	r2, r3
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3301      	adds	r3, #1
 80069ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	3301      	adds	r3, #1
 80069d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	3301      	adds	r3, #1
 80069d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	3301      	adds	r3, #1
 80069dc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	3301      	adds	r3, #1
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d3e2      	bcc.n	80069b2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3724      	adds	r7, #36	; 0x24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b08b      	sub	sp, #44	; 0x2c
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	4613      	mov	r3, r2
 8006a06:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a10:	88fb      	ldrh	r3, [r7, #6]
 8006a12:	089b      	lsrs	r3, r3, #2
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a20:	2300      	movs	r3, #0
 8006a22:	623b      	str	r3, [r7, #32]
 8006a24:	e014      	b.n	8006a50 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	3301      	adds	r3, #1
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	3301      	adds	r3, #1
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	3301      	adds	r3, #1
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	623b      	str	r3, [r7, #32]
 8006a50:	6a3a      	ldr	r2, [r7, #32]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3e6      	bcc.n	8006a26 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a58:	8bfb      	ldrh	r3, [r7, #30]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01d      	beq.n	8006a9a <USB_ReadPacket+0xa0>
  {
    i = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a62:	f107 0310 	add.w	r3, r7, #16
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a6c:	6812      	ldr	r2, [r2, #0]
 8006a6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	701a      	strb	r2, [r3, #0]
      i++;
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	3301      	adds	r3, #1
 8006a86:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a8e:	8bfb      	ldrh	r3, [r7, #30]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a94:	8bfb      	ldrh	r3, [r7, #30]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1ea      	bne.n	8006a70 <USB_ReadPacket+0x76>
  }

  return ((void *)pDest);
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	372c      	adds	r7, #44	; 0x2c
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d12e      	bne.n	8006b22 <USB_EPSetStall+0x7a>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	db13      	blt.n	8006afe <USB_EPSetStall+0x56>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d010      	beq.n	8006afe <USB_EPSetStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	4619      	mov	r1, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006afc:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b1e:	600b      	str	r3, [r1, #0]
 8006b20:	e02d      	b.n	8006b7e <USB_EPSetStall+0xd6>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	db13      	blt.n	8006b5c <USB_EPSetStall+0xb4>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d010      	beq.n	8006b5c <USB_EPSetStall+0xb4>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b46:	4619      	mov	r1, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b5a:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b68:	4619      	mov	r1, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b7c:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d12a      	bne.n	8006bfe <USB_EPClearStall+0x72>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bc8:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	791b      	ldrb	r3, [r3, #4]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d003      	beq.n	8006bda <USB_EPClearStall+0x4e>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d13b      	bne.n	8006c52 <USB_EPClearStall+0xc6>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be6:	4619      	mov	r1, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bfa:	600b      	str	r3, [r1, #0]
 8006bfc:	e029      	b.n	8006c52 <USB_EPClearStall+0xc6>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c1e:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	791b      	ldrb	r3, [r3, #4]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d003      	beq.n	8006c30 <USB_EPClearStall+0xa4>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	791b      	ldrb	r3, [r3, #4]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d110      	bne.n	8006c52 <USB_EPClearStall+0xc6>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c50:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	461a      	mov	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c84:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f023 0303 	bic.w	r3, r3, #3
 8006cd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd8:	461a      	mov	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f023 0302 	bic.w	r3, r3, #2
 8006ce6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d08:	461a      	mov	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f043 0302 	orr.w	r3, r3, #2
 8006d2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4013      	ands	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d54:	68fb      	ldr	r3, [r7, #12]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	4013      	ands	r3, r2
 8006d84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	0c1b      	lsrs	r3, r3, #16
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	4013      	ands	r3, r2
 8006db8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	b29b      	uxth	r3, r3
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4013      	ands	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006df8:	68bb      	ldr	r3, [r7, #8]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b087      	sub	sp, #28
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	fa22 f303 	lsr.w	r3, r2, r3
 8006e36:	01db      	lsls	r3, r3, #7
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	4013      	ands	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e54:	68bb      	ldr	r3, [r7, #8]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e90:	461a      	mov	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e9e:	f023 0307 	bic.w	r3, r3, #7
 8006ea2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eaa:	461a      	mov	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	333c      	adds	r3, #60	; 0x3c
 8006ede:	3304      	adds	r3, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4a28      	ldr	r2, [pc, #160]	; (8006f88 <USB_EP0_OutStart+0xc0>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d90a      	bls.n	8006f02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006efc:	d101      	bne.n	8006f02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e03b      	b.n	8006f7a <USB_EP0_OutStart+0xb2>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	461a      	mov	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f22:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	f043 0318 	orr.w	r3, r3, #24
 8006f38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f40:	461a      	mov	r2, r3
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f4e:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f50:	7afb      	ldrb	r3, [r7, #11]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d110      	bne.n	8006f78 <USB_EP0_OutStart+0xb0>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	461a      	mov	r2, r3
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	4f54300a 	.word	0x4f54300a

08006f8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a13      	ldr	r2, [pc, #76]	; (8006ff0 <USB_CoreReset+0x64>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e01b      	b.n	8006fe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	daf2      	bge.n	8006f98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f043 0201 	orr.w	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4a09      	ldr	r2, [pc, #36]	; (8006ff0 <USB_CoreReset+0x64>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d901      	bls.n	8006fd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e006      	b.n	8006fe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d0f0      	beq.n	8006fc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	00030d40 	.word	0x00030d40

08006ff4 <USB_ActivateRemoteWakeup>:
  * @brief  USB_ActivateRemoteWakeup active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60fb      	str	r3, [r7, #12]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b01      	cmp	r3, #1
 800700e:	d10a      	bne.n	8007026 <USB_ActivateRemoteWakeup+0x32>
  {
    /* active Remote wakeup signalling */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_RWUSIG;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007016:	461a      	mov	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f043 0301 	orr.w	r3, r3, #1
 8007024:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USB_DeActivateRemoteWakeup>:
  * @brief  USB_DeActivateRemoteWakeup de-active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60fb      	str	r3, [r7, #12]

  /* active Remote wakeup signalling */
  USBx_DEVICE->DCTL &= ~(USB_OTG_DCTL_RWUSIG);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	e01f      	b.n	80070bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	79fa      	ldrb	r2, [r7, #7]
 80070ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f7fa fb8d 	bl	80017d0 <USBD_LL_Init>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070d8:	2303      	movs	r3, #3
 80070da:	e025      	b.n	8007128 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	32ae      	adds	r2, #174	; 0xae
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00f      	beq.n	8007118 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32ae      	adds	r2, #174	; 0xae
 8007102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	f107 020e 	add.w	r2, r7, #14
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
 8007110:	4602      	mov	r2, r0
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7fa fb8f 	bl	800185c <USBD_LL_Start>
 800713e:	4603      	mov	r3, r0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007150:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007174:	2b00      	cmp	r3, #0
 8007176:	d009      	beq.n	800718c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	78fa      	ldrb	r2, [r7, #3]
 8007182:	4611      	mov	r1, r2
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	4798      	blx	r3
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	4611      	mov	r1, r2
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 f8f9 	bl	80083d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071f0:	461a      	mov	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	2b01      	cmp	r3, #1
 8007204:	d00e      	beq.n	8007224 <USBD_LL_SetupStage+0x5a>
 8007206:	2b01      	cmp	r3, #1
 8007208:	d302      	bcc.n	8007210 <USBD_LL_SetupStage+0x46>
 800720a:	2b02      	cmp	r3, #2
 800720c:	d014      	beq.n	8007238 <USBD_LL_SetupStage+0x6e>
 800720e:	e01d      	b.n	800724c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fb5d 	bl	80078d8 <USBD_StdDevReq>
 800721e:	4603      	mov	r3, r0
 8007220:	73fb      	strb	r3, [r7, #15]
      break;
 8007222:	e020      	b.n	8007266 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fbc5 	bl	80079bc <USBD_StdItfReq>
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
      break;
 8007236:	e016      	b.n	8007266 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fc25 	bl	8007a90 <USBD_StdEPReq>
 8007246:	4603      	mov	r3, r0
 8007248:	73fb      	strb	r3, [r7, #15]
      break;
 800724a:	e00c      	b.n	8007266 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007252:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007256:	b2db      	uxtb	r3, r3
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fa fb3a 	bl	80018d4 <USBD_LL_StallEP>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]
      break;
 8007264:	bf00      	nop
  }

  return ret;
 8007266:	7bfb      	ldrb	r3, [r7, #15]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	460b      	mov	r3, r1
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d16c      	bne.n	8007362 <USBD_LL_DataOutStage+0xf2>
  {
    pep = &pdev->ep_out[0];
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800728e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007296:	2b03      	cmp	r3, #3
 8007298:	f040 8096 	bne.w	80073c8 <USBD_LL_DataOutStage+0x158>
    {
      if (pep->rem_length > pep->maxpacket)
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d913      	bls.n	80072d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	1ad2      	subs	r2, r2, r3
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4293      	cmp	r3, r2
 80072c0:	bf28      	it	cs
 80072c2:	4613      	movcs	r3, r2
 80072c4:	461a      	mov	r2, r3
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f001 f95a 	bl	8008582 <USBD_CtlContinueRx>
 80072ce:	e07b      	b.n	80073c8 <USBD_LL_DataOutStage+0x158>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d007      	beq.n	80072ee <USBD_LL_DataOutStage+0x7e>
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d302      	bcc.n	80072e8 <USBD_LL_DataOutStage+0x78>
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d00e      	beq.n	8007304 <USBD_LL_DataOutStage+0x94>
 80072e6:	e018      	b.n	800731a <USBD_LL_DataOutStage+0xaa>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	75bb      	strb	r3, [r7, #22]
            break;
 80072ec:	e018      	b.n	8007320 <USBD_LL_DataOutStage+0xb0>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	4619      	mov	r1, r3
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 fa5e 	bl	80077ba <USBD_CoreFindIF>
 80072fe:	4603      	mov	r3, r0
 8007300:	75bb      	strb	r3, [r7, #22]
            break;
 8007302:	e00d      	b.n	8007320 <USBD_LL_DataOutStage+0xb0>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800730a:	b2db      	uxtb	r3, r3
 800730c:	4619      	mov	r1, r3
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fa60 	bl	80077d4 <USBD_CoreFindEP>
 8007314:	4603      	mov	r3, r0
 8007316:	75bb      	strb	r3, [r7, #22]
            break;
 8007318:	e002      	b.n	8007320 <USBD_LL_DataOutStage+0xb0>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	75bb      	strb	r3, [r7, #22]
            break;
 800731e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007320:	7dbb      	ldrb	r3, [r7, #22]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d119      	bne.n	800735a <USBD_LL_DataOutStage+0xea>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b03      	cmp	r3, #3
 8007330:	d113      	bne.n	800735a <USBD_LL_DataOutStage+0xea>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007332:	7dba      	ldrb	r2, [r7, #22]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	32ae      	adds	r2, #174	; 0xae
 8007338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <USBD_LL_DataOutStage+0xea>
            {
              pdev->classId = idx;
 8007342:	7dba      	ldrb	r2, [r7, #22]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800734a:	7dba      	ldrb	r2, [r7, #22]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	32ae      	adds	r2, #174	; 0xae
 8007350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f001 f922 	bl	80085a4 <USBD_CtlSendStatus>
 8007360:	e032      	b.n	80073c8 <USBD_LL_DataOutStage+0x158>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007368:	b2db      	uxtb	r3, r3
 800736a:	4619      	mov	r1, r3
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 fa31 	bl	80077d4 <USBD_CoreFindEP>
 8007372:	4603      	mov	r3, r0
 8007374:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007376:	7dbb      	ldrb	r3, [r7, #22]
 8007378:	2bff      	cmp	r3, #255	; 0xff
 800737a:	d025      	beq.n	80073c8 <USBD_LL_DataOutStage+0x158>
 800737c:	7dbb      	ldrb	r3, [r7, #22]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d122      	bne.n	80073c8 <USBD_LL_DataOutStage+0x158>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b03      	cmp	r3, #3
 800738c:	d117      	bne.n	80073be <USBD_LL_DataOutStage+0x14e>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800738e:	7dba      	ldrb	r2, [r7, #22]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	32ae      	adds	r2, #174	; 0xae
 8007394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00f      	beq.n	80073be <USBD_LL_DataOutStage+0x14e>
        {
          pdev->classId = idx;
 800739e:	7dba      	ldrb	r2, [r7, #22]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80073a6:	7dba      	ldrb	r2, [r7, #22]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	32ae      	adds	r2, #174	; 0xae
 80073ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	7afa      	ldrb	r2, [r7, #11]
 80073b4:	4611      	mov	r1, r2
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	4798      	blx	r3
 80073ba:	4603      	mov	r3, r0
 80073bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <USBD_LL_DataOutStage+0x158>
      {
        return ret;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	e000      	b.n	80073ca <USBD_LL_DataOutStage+0x15a>
      }
    }
  }

  return USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	460b      	mov	r3, r1
 80073dc:	607a      	str	r2, [r7, #4]
 80073de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80073e0:	7afb      	ldrb	r3, [r7, #11]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d16f      	bne.n	80074c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3314      	adds	r3, #20
 80073ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d15a      	bne.n	80074ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d914      	bls.n	800742c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	1ad2      	subs	r2, r2, r3
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	461a      	mov	r2, r3
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f001 f8a1 	bl	8008560 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800741e:	2300      	movs	r3, #0
 8007420:	2200      	movs	r2, #0
 8007422:	2100      	movs	r1, #0
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7fa facf 	bl	80019c8 <USBD_LL_PrepareReceive>
 800742a:	e03f      	b.n	80074ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	429a      	cmp	r2, r3
 8007436:	d11c      	bne.n	8007472 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007440:	429a      	cmp	r2, r3
 8007442:	d316      	bcc.n	8007472 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800744e:	429a      	cmp	r2, r3
 8007450:	d20f      	bcs.n	8007472 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007452:	2200      	movs	r2, #0
 8007454:	2100      	movs	r1, #0
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f001 f882 	bl	8008560 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007464:	2300      	movs	r3, #0
 8007466:	2200      	movs	r2, #0
 8007468:	2100      	movs	r1, #0
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7fa faac 	bl	80019c8 <USBD_LL_PrepareReceive>
 8007470:	e01c      	b.n	80074ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b03      	cmp	r3, #3
 800747c:	d10f      	bne.n	800749e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800749e:	2180      	movs	r1, #128	; 0x80
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7fa fa17 	bl	80018d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f001 f88f 	bl	80085ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d03a      	beq.n	800752c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7ff fe46 	bl	8007148 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074c4:	e032      	b.n	800752c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80074c6:	7afb      	ldrb	r3, [r7, #11]
 80074c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	4619      	mov	r1, r3
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 f97f 	bl	80077d4 <USBD_CoreFindEP>
 80074d6:	4603      	mov	r3, r0
 80074d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	2bff      	cmp	r3, #255	; 0xff
 80074de:	d025      	beq.n	800752c <USBD_LL_DataInStage+0x15a>
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d122      	bne.n	800752c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d11c      	bne.n	800752c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80074f2:	7dfa      	ldrb	r2, [r7, #23]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	32ae      	adds	r2, #174	; 0xae
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d014      	beq.n	800752c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007502:	7dfa      	ldrb	r2, [r7, #23]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800750a:	7dfa      	ldrb	r2, [r7, #23]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	32ae      	adds	r2, #174	; 0xae
 8007510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	7afa      	ldrb	r2, [r7, #11]
 8007518:	4611      	mov	r1, r2
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	4798      	blx	r3
 800751e:	4603      	mov	r3, r0
 8007520:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007522:	7dbb      	ldrb	r3, [r7, #22]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007528:	7dbb      	ldrb	r3, [r7, #22]
 800752a:	e000      	b.n	800752e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d014      	beq.n	800759c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00e      	beq.n	800759c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6852      	ldr	r2, [r2, #4]
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	4611      	mov	r1, r2
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007598:	2303      	movs	r3, #3
 800759a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	2200      	movs	r2, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fa f969 	bl	800187a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2240      	movs	r2, #64	; 0x40
 80075b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075b8:	2340      	movs	r3, #64	; 0x40
 80075ba:	2200      	movs	r2, #0
 80075bc:	2180      	movs	r1, #128	; 0x80
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fa f95b 	bl	800187a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2240      	movs	r2, #64	; 0x40
 80075ce:	621a      	str	r2, [r3, #32]

  return ret;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	78fa      	ldrb	r2, [r7, #3]
 80075ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	b2da      	uxtb	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2204      	movs	r2, #4
 8007614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b04      	cmp	r3, #4
 8007638:	d106      	bne.n	8007648 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007640:	b2da      	uxtb	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b03      	cmp	r3, #3
 8007668:	d110      	bne.n	800768c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	32ae      	adds	r2, #174	; 0xae
 80076ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e01c      	b.n	80076f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d115      	bne.n	80076f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	32ae      	adds	r2, #174	; 0xae
 80076ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32ae      	adds	r2, #174	; 0xae
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	78fa      	ldrb	r2, [r7, #3]
 80076ea:	4611      	mov	r1, r2
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	32ae      	adds	r2, #174	; 0xae
 8007710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007718:	2303      	movs	r3, #3
 800771a:	e01c      	b.n	8007756 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b03      	cmp	r3, #3
 8007726:	d115      	bne.n	8007754 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	32ae      	adds	r2, #174	; 0xae
 8007732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	32ae      	adds	r2, #174	; 0xae
 8007746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	4611      	mov	r1, r2
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00e      	beq.n	80077b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6852      	ldr	r2, [r2, #4]
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	4611      	mov	r1, r2
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80077ac:	2303      	movs	r3, #3
 80077ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	460b      	mov	r3, r1
 80077c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b086      	sub	sp, #24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	885b      	ldrh	r3, [r3, #2]
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	429a      	cmp	r2, r3
 8007814:	d920      	bls.n	8007858 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800781e:	e013      	b.n	8007848 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007820:	f107 030a 	add.w	r3, r7, #10
 8007824:	4619      	mov	r1, r3
 8007826:	6978      	ldr	r0, [r7, #20]
 8007828:	f000 f81b 	bl	8007862 <USBD_GetNextDesc>
 800782c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b05      	cmp	r3, #5
 8007834:	d108      	bne.n	8007848 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	789b      	ldrb	r3, [r3, #2]
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	429a      	cmp	r2, r3
 8007842:	d008      	beq.n	8007856 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	885b      	ldrh	r3, [r3, #2]
 800784c:	b29a      	uxth	r2, r3
 800784e:	897b      	ldrh	r3, [r7, #10]
 8007850:	429a      	cmp	r2, r3
 8007852:	d8e5      	bhi.n	8007820 <USBD_GetEpDesc+0x32>
 8007854:	e000      	b.n	8007858 <USBD_GetEpDesc+0x6a>
          break;
 8007856:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007858:	693b      	ldr	r3, [r7, #16]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007862:	b480      	push	{r7}
 8007864:	b085      	sub	sp, #20
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	881a      	ldrh	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	4413      	add	r3, r2
 800787c:	b29a      	uxth	r2, r3
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4413      	add	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800788e:	68fb      	ldr	r3, [r7, #12]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	3301      	adds	r3, #1
 80078b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80078ba:	8a3b      	ldrh	r3, [r7, #16]
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	b21a      	sxth	r2, r3
 80078c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	b21b      	sxth	r3, r3
 80078c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80078ca:	89fb      	ldrh	r3, [r7, #14]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d004      	beq.n	80078fc <USBD_StdDevReq+0x24>
 80078f2:	2b40      	cmp	r3, #64	; 0x40
 80078f4:	d002      	beq.n	80078fc <USBD_StdDevReq+0x24>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00e      	beq.n	8007918 <USBD_StdDevReq+0x40>
 80078fa:	e054      	b.n	80079a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32ae      	adds	r2, #174	; 0xae
 8007906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
 8007912:	4603      	mov	r3, r0
 8007914:	73fb      	strb	r3, [r7, #15]
      break;
 8007916:	e04b      	b.n	80079b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	785b      	ldrb	r3, [r3, #1]
 800791c:	2b09      	cmp	r3, #9
 800791e:	d83c      	bhi.n	800799a <USBD_StdDevReq+0xc2>
 8007920:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <USBD_StdDevReq+0x50>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	0800797d 	.word	0x0800797d
 800792c:	08007991 	.word	0x08007991
 8007930:	0800799b 	.word	0x0800799b
 8007934:	08007987 	.word	0x08007987
 8007938:	0800799b 	.word	0x0800799b
 800793c:	0800795b 	.word	0x0800795b
 8007940:	08007951 	.word	0x08007951
 8007944:	0800799b 	.word	0x0800799b
 8007948:	08007973 	.word	0x08007973
 800794c:	08007965 	.word	0x08007965
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa32 	bl	8007dbc <USBD_GetDescriptor>
          break;
 8007958:	e024      	b.n	80079a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fb97 	bl	8008090 <USBD_SetAddress>
          break;
 8007962:	e01f      	b.n	80079a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fbd6 	bl	8008118 <USBD_SetConfig>
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]
          break;
 8007970:	e018      	b.n	80079a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fc79 	bl	800826c <USBD_GetConfig>
          break;
 800797a:	e013      	b.n	80079a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fca9 	bl	80082d6 <USBD_GetStatus>
          break;
 8007984:	e00e      	b.n	80079a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fcd8 	bl	800833e <USBD_SetFeature>
          break;
 800798e:	e009      	b.n	80079a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fcfc 	bl	8008390 <USBD_ClrFeature>
          break;
 8007998:	e004      	b.n	80079a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fd53 	bl	8008448 <USBD_CtlError>
          break;
 80079a2:	bf00      	nop
      }
      break;
 80079a4:	e004      	b.n	80079b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fd4d 	bl	8008448 <USBD_CtlError>
      break;
 80079ae:	bf00      	nop
  }

  return ret;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop

080079bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d003      	beq.n	80079de <USBD_StdItfReq+0x22>
 80079d6:	2b40      	cmp	r3, #64	; 0x40
 80079d8:	d001      	beq.n	80079de <USBD_StdItfReq+0x22>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d14e      	bne.n	8007a7c <USBD_StdItfReq+0xc0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	3b01      	subs	r3, #1
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d840      	bhi.n	8007a6e <USBD_StdItfReq+0xb2>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	889b      	ldrh	r3, [r3, #4]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d836      	bhi.n	8007a64 <USBD_StdItfReq+0xa8>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	889b      	ldrh	r3, [r3, #4]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff fedb 	bl	80077ba <USBD_CoreFindIF>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2bff      	cmp	r3, #255	; 0xff
 8007a0c:	d01d      	beq.n	8007a4a <USBD_StdItfReq+0x8e>
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d11a      	bne.n	8007a4a <USBD_StdItfReq+0x8e>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007a14:	7bba      	ldrb	r2, [r7, #14]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	32ae      	adds	r2, #174	; 0xae
 8007a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00f      	beq.n	8007a44 <USBD_StdItfReq+0x88>
              {
                pdev->classId = idx;
 8007a24:	7bba      	ldrb	r2, [r7, #14]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a2c:	7bba      	ldrb	r2, [r7, #14]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	32ae      	adds	r2, #174	; 0xae
 8007a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a42:	e004      	b.n	8007a4e <USBD_StdItfReq+0x92>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007a44:	2303      	movs	r3, #3
 8007a46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a48:	e001      	b.n	8007a4e <USBD_StdItfReq+0x92>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	88db      	ldrh	r3, [r3, #6]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d110      	bne.n	8007a78 <USBD_StdItfReq+0xbc>
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10d      	bne.n	8007a78 <USBD_StdItfReq+0xbc>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fda1 	bl	80085a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a62:	e009      	b.n	8007a78 <USBD_StdItfReq+0xbc>
            USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fcee 	bl	8008448 <USBD_CtlError>
          break;
 8007a6c:	e004      	b.n	8007a78 <USBD_StdItfReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fce9 	bl	8008448 <USBD_CtlError>
          break;
 8007a76:	e000      	b.n	8007a7a <USBD_StdItfReq+0xbe>
          break;
 8007a78:	bf00      	nop
      }
      break;
 8007a7a:	e004      	b.n	8007a86 <USBD_StdItfReq+0xca>

    default:
      USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fce2 	bl	8008448 <USBD_CtlError>
      break;
 8007a84:	bf00      	nop
  }

  return ret;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	889b      	ldrh	r3, [r3, #4]
 8007aa2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aac:	2b20      	cmp	r3, #32
 8007aae:	d004      	beq.n	8007aba <USBD_StdEPReq+0x2a>
 8007ab0:	2b40      	cmp	r3, #64	; 0x40
 8007ab2:	d002      	beq.n	8007aba <USBD_StdEPReq+0x2a>
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d028      	beq.n	8007b0a <USBD_StdEPReq+0x7a>
 8007ab8:	e174      	b.n	8007da4 <USBD_StdEPReq+0x314>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff fe88 	bl	80077d4 <USBD_CoreFindEP>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ac8:	7b7b      	ldrb	r3, [r7, #13]
 8007aca:	2bff      	cmp	r3, #255	; 0xff
 8007acc:	f000 816f 	beq.w	8007dae <USBD_StdEPReq+0x31e>
 8007ad0:	7b7b      	ldrb	r3, [r7, #13]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f040 816b 	bne.w	8007dae <USBD_StdEPReq+0x31e>
      {
        pdev->classId = idx;
 8007ad8:	7b7a      	ldrb	r2, [r7, #13]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ae0:	7b7a      	ldrb	r2, [r7, #13]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	32ae      	adds	r2, #174	; 0xae
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 815e 	beq.w	8007dae <USBD_StdEPReq+0x31e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007af2:	7b7a      	ldrb	r2, [r7, #13]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	32ae      	adds	r2, #174	; 0xae
 8007af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b08:	e151      	b.n	8007dae <USBD_StdEPReq+0x31e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d040      	beq.n	8007b94 <USBD_StdEPReq+0x104>
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d003      	beq.n	8007b1e <USBD_StdEPReq+0x8e>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 8097 	beq.w	8007c4a <USBD_StdEPReq+0x1ba>
 8007b1c:	e13c      	b.n	8007d98 <USBD_StdEPReq+0x308>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d002      	beq.n	8007b30 <USBD_StdEPReq+0xa0>
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d015      	beq.n	8007b5a <USBD_StdEPReq+0xca>
 8007b2e:	e02b      	b.n	8007b88 <USBD_StdEPReq+0xf8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00c      	beq.n	8007b50 <USBD_StdEPReq+0xc0>
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b80      	cmp	r3, #128	; 0x80
 8007b3a:	d009      	beq.n	8007b50 <USBD_StdEPReq+0xc0>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7f9 fec7 	bl	80018d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b46:	2180      	movs	r1, #128	; 0x80
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7f9 fec3 	bl	80018d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b4e:	e020      	b.n	8007b92 <USBD_StdEPReq+0x102>
                USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fc78 	bl	8008448 <USBD_CtlError>
              break;
 8007b58:	e01b      	b.n	8007b92 <USBD_StdEPReq+0x102>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	885b      	ldrh	r3, [r3, #2]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10e      	bne.n	8007b80 <USBD_StdEPReq+0xf0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBD_StdEPReq+0xf0>
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	2b80      	cmp	r3, #128	; 0x80
 8007b6c:	d008      	beq.n	8007b80 <USBD_StdEPReq+0xf0>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	88db      	ldrh	r3, [r3, #6]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <USBD_StdEPReq+0xf0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7f9 feaa 	bl	80018d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fd0f 	bl	80085a4 <USBD_CtlSendStatus>

              break;
 8007b86:	e004      	b.n	8007b92 <USBD_StdEPReq+0x102>

            default:
              USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fc5c 	bl	8008448 <USBD_CtlError>
              break;
 8007b90:	bf00      	nop
          }
          break;
 8007b92:	e106      	b.n	8007da2 <USBD_StdEPReq+0x312>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d002      	beq.n	8007ba6 <USBD_StdEPReq+0x116>
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d015      	beq.n	8007bd0 <USBD_StdEPReq+0x140>
 8007ba4:	e04a      	b.n	8007c3c <USBD_StdEPReq+0x1ac>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00c      	beq.n	8007bc6 <USBD_StdEPReq+0x136>
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	2b80      	cmp	r3, #128	; 0x80
 8007bb0:	d009      	beq.n	8007bc6 <USBD_StdEPReq+0x136>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7f9 fe8c 	bl	80018d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bbc:	2180      	movs	r1, #128	; 0x80
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7f9 fe88 	bl	80018d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bc4:	e040      	b.n	8007c48 <USBD_StdEPReq+0x1b8>
                USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fc3d 	bl	8008448 <USBD_CtlError>
              break;
 8007bce:	e03b      	b.n	8007c48 <USBD_StdEPReq+0x1b8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	885b      	ldrh	r3, [r3, #2]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d136      	bne.n	8007c46 <USBD_StdEPReq+0x1b6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <USBD_StdEPReq+0x15c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7f9 fe87 	bl	80018fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fcd9 	bl	80085a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7ff fdec 	bl	80077d4 <USBD_CoreFindEP>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c00:	7b7b      	ldrb	r3, [r7, #13]
 8007c02:	2bff      	cmp	r3, #255	; 0xff
 8007c04:	d01f      	beq.n	8007c46 <USBD_StdEPReq+0x1b6>
 8007c06:	7b7b      	ldrb	r3, [r7, #13]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d11c      	bne.n	8007c46 <USBD_StdEPReq+0x1b6>
                {
                  pdev->classId = idx;
 8007c0c:	7b7a      	ldrb	r2, [r7, #13]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007c14:	7b7a      	ldrb	r2, [r7, #13]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	32ae      	adds	r2, #174	; 0xae
 8007c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d010      	beq.n	8007c46 <USBD_StdEPReq+0x1b6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c24:	7b7a      	ldrb	r2, [r7, #13]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	32ae      	adds	r2, #174	; 0xae
 8007c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4798      	blx	r3
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007c3a:	e004      	b.n	8007c46 <USBD_StdEPReq+0x1b6>

            default:
              USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fc02 	bl	8008448 <USBD_CtlError>
              break;
 8007c44:	e000      	b.n	8007c48 <USBD_StdEPReq+0x1b8>
              break;
 8007c46:	bf00      	nop
          }
          break;
 8007c48:	e0ab      	b.n	8007da2 <USBD_StdEPReq+0x312>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d002      	beq.n	8007c5c <USBD_StdEPReq+0x1cc>
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d032      	beq.n	8007cc0 <USBD_StdEPReq+0x230>
 8007c5a:	e097      	b.n	8007d8c <USBD_StdEPReq+0x2fc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <USBD_StdEPReq+0x1e2>
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b80      	cmp	r3, #128	; 0x80
 8007c66:	d004      	beq.n	8007c72 <USBD_StdEPReq+0x1e2>
              {
                USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fbec 	bl	8008448 <USBD_CtlError>
                break;
 8007c70:	e091      	b.n	8007d96 <USBD_StdEPReq+0x306>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	da0b      	bge.n	8007c92 <USBD_StdEPReq+0x202>
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	3310      	adds	r3, #16
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	3304      	adds	r3, #4
 8007c90:	e00b      	b.n	8007caa <USBD_StdEPReq+0x21a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3304      	adds	r3, #4
 8007caa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fc36 	bl	800852a <USBD_CtlSendData>
              break;
 8007cbe:	e06a      	b.n	8007d96 <USBD_StdEPReq+0x306>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	da11      	bge.n	8007cec <USBD_StdEPReq+0x25c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	f003 020f 	and.w	r2, r3, #15
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	3324      	adds	r3, #36	; 0x24
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d117      	bne.n	8007d12 <USBD_StdEPReq+0x282>
                {
                  USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fbaf 	bl	8008448 <USBD_CtlError>
                  break;
 8007cea:	e054      	b.n	8007d96 <USBD_StdEPReq+0x306>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	f003 020f 	and.w	r2, r3, #15
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d104      	bne.n	8007d12 <USBD_StdEPReq+0x282>
                {
                  USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fb9c 	bl	8008448 <USBD_CtlError>
                  break;
 8007d10:	e041      	b.n	8007d96 <USBD_StdEPReq+0x306>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	da0b      	bge.n	8007d32 <USBD_StdEPReq+0x2a2>
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	3310      	adds	r3, #16
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3304      	adds	r3, #4
 8007d30:	e00b      	b.n	8007d4a <USBD_StdEPReq+0x2ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	4413      	add	r3, r2
 8007d48:	3304      	adds	r3, #4
 8007d4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <USBD_StdEPReq+0x2c8>
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	2b80      	cmp	r3, #128	; 0x80
 8007d56:	d103      	bne.n	8007d60 <USBD_StdEPReq+0x2d0>
              {
                pep->status = 0x0000U;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e00e      	b.n	8007d7e <USBD_StdEPReq+0x2ee>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7f9 fddb 	bl	8001920 <USBD_LL_IsStallEP>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <USBD_StdEPReq+0x2e8>
              {
                pep->status = 0x0001U;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	e002      	b.n	8007d7e <USBD_StdEPReq+0x2ee>
              }
              else
              {
                pep->status = 0x0000U;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2202      	movs	r2, #2
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fbd0 	bl	800852a <USBD_CtlSendData>
              break;
 8007d8a:	e004      	b.n	8007d96 <USBD_StdEPReq+0x306>

            default:
              USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fb5a 	bl	8008448 <USBD_CtlError>
              break;
 8007d94:	bf00      	nop
          }
          break;
 8007d96:	e004      	b.n	8007da2 <USBD_StdEPReq+0x312>

        default:
          USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fb54 	bl	8008448 <USBD_CtlError>
          break;
 8007da0:	bf00      	nop
      }
      break;
 8007da2:	e005      	b.n	8007db0 <USBD_StdEPReq+0x320>

    default:
      USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fb4e 	bl	8008448 <USBD_CtlError>
      break;
 8007dac:	e000      	b.n	8007db0 <USBD_StdEPReq+0x320>
      break;
 8007dae:	bf00      	nop
  }

  return ret;
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	885b      	ldrh	r3, [r3, #2]
 8007dd6:	0a1b      	lsrs	r3, r3, #8
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	2b06      	cmp	r3, #6
 8007dde:	f200 8128 	bhi.w	8008032 <USBD_GetDescriptor+0x276>
 8007de2:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <USBD_GetDescriptor+0x2c>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e05 	.word	0x08007e05
 8007dec:	08007e1d 	.word	0x08007e1d
 8007df0:	08007e5d 	.word	0x08007e5d
 8007df4:	08008033 	.word	0x08008033
 8007df8:	08008033 	.word	0x08008033
 8007dfc:	08007fd3 	.word	0x08007fd3
 8007e00:	08007fff 	.word	0x08007fff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7c12      	ldrb	r2, [r2, #16]
 8007e10:	f107 0108 	add.w	r1, r7, #8
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	60f8      	str	r0, [r7, #12]
      break;
 8007e1a:	e112      	b.n	8008042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7c1b      	ldrb	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10d      	bne.n	8007e40 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	f107 0208 	add.w	r2, r7, #8
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
 8007e34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e3e:	e100      	b.n	8008042 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	f107 0208 	add.w	r2, r7, #8
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	2202      	movs	r2, #2
 8007e58:	701a      	strb	r2, [r3, #0]
      break;
 8007e5a:	e0f2      	b.n	8008042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	885b      	ldrh	r3, [r3, #2]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b05      	cmp	r3, #5
 8007e64:	f200 80ac 	bhi.w	8007fc0 <USBD_GetDescriptor+0x204>
 8007e68:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <USBD_GetDescriptor+0xb4>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007e89 	.word	0x08007e89
 8007e74:	08007ebd 	.word	0x08007ebd
 8007e78:	08007ef1 	.word	0x08007ef1
 8007e7c:	08007f25 	.word	0x08007f25
 8007e80:	08007f59 	.word	0x08007f59
 8007e84:	08007f8d 	.word	0x08007f8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	7c12      	ldrb	r2, [r2, #16]
 8007ea0:	f107 0108 	add.w	r1, r7, #8
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4798      	blx	r3
 8007ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eaa:	e091      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 faca 	bl	8008448 <USBD_CtlError>
            err++;
 8007eb4:	7afb      	ldrb	r3, [r7, #11]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eba:	e089      	b.n	8007fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	7c12      	ldrb	r2, [r2, #16]
 8007ed4:	f107 0108 	add.w	r1, r7, #8
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
 8007edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ede:	e077      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fab0 	bl	8008448 <USBD_CtlError>
            err++;
 8007ee8:	7afb      	ldrb	r3, [r7, #11]
 8007eea:	3301      	adds	r3, #1
 8007eec:	72fb      	strb	r3, [r7, #11]
          break;
 8007eee:	e06f      	b.n	8007fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	7c12      	ldrb	r2, [r2, #16]
 8007f08:	f107 0108 	add.w	r1, r7, #8
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	4798      	blx	r3
 8007f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f12:	e05d      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa96 	bl	8008448 <USBD_CtlError>
            err++;
 8007f1c:	7afb      	ldrb	r3, [r7, #11]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	72fb      	strb	r3, [r7, #11]
          break;
 8007f22:	e055      	b.n	8007fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	7c12      	ldrb	r2, [r2, #16]
 8007f3c:	f107 0108 	add.w	r1, r7, #8
 8007f40:	4610      	mov	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f46:	e043      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa7c 	bl	8008448 <USBD_CtlError>
            err++;
 8007f50:	7afb      	ldrb	r3, [r7, #11]
 8007f52:	3301      	adds	r3, #1
 8007f54:	72fb      	strb	r3, [r7, #11]
          break;
 8007f56:	e03b      	b.n	8007fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	7c12      	ldrb	r2, [r2, #16]
 8007f70:	f107 0108 	add.w	r1, r7, #8
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f7a:	e029      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fa62 	bl	8008448 <USBD_CtlError>
            err++;
 8007f84:	7afb      	ldrb	r3, [r7, #11]
 8007f86:	3301      	adds	r3, #1
 8007f88:	72fb      	strb	r3, [r7, #11]
          break;
 8007f8a:	e021      	b.n	8007fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00b      	beq.n	8007fb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	7c12      	ldrb	r2, [r2, #16]
 8007fa4:	f107 0108 	add.w	r1, r7, #8
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
 8007fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fae:	e00f      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa48 	bl	8008448 <USBD_CtlError>
            err++;
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007fbe:	e007      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fa40 	bl	8008448 <USBD_CtlError>
          err++;
 8007fc8:	7afb      	ldrb	r3, [r7, #11]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007fce:	bf00      	nop
      }
      break;
 8007fd0:	e037      	b.n	8008042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7c1b      	ldrb	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe2:	f107 0208 	add.w	r2, r7, #8
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4798      	blx	r3
 8007fea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fec:	e029      	b.n	8008042 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fa29 	bl	8008448 <USBD_CtlError>
        err++;
 8007ff6:	7afb      	ldrb	r3, [r7, #11]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8007ffc:	e021      	b.n	8008042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	7c1b      	ldrb	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10d      	bne.n	8008022 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	f107 0208 	add.w	r2, r7, #8
 8008012:	4610      	mov	r0, r2
 8008014:	4798      	blx	r3
 8008016:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3301      	adds	r3, #1
 800801c:	2207      	movs	r2, #7
 800801e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008020:	e00f      	b.n	8008042 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fa0f 	bl	8008448 <USBD_CtlError>
        err++;
 800802a:	7afb      	ldrb	r3, [r7, #11]
 800802c:	3301      	adds	r3, #1
 800802e:	72fb      	strb	r3, [r7, #11]
      break;
 8008030:	e007      	b.n	8008042 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fa07 	bl	8008448 <USBD_CtlError>
      err++;
 800803a:	7afb      	ldrb	r3, [r7, #11]
 800803c:	3301      	adds	r3, #1
 800803e:	72fb      	strb	r3, [r7, #11]
      break;
 8008040:	bf00      	nop
  }

  if (err != 0U)
 8008042:	7afb      	ldrb	r3, [r7, #11]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d11e      	bne.n	8008086 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	88db      	ldrh	r3, [r3, #6]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d016      	beq.n	800807e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008050:	893b      	ldrh	r3, [r7, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00e      	beq.n	8008074 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	88da      	ldrh	r2, [r3, #6]
 800805a:	893b      	ldrh	r3, [r7, #8]
 800805c:	4293      	cmp	r3, r2
 800805e:	bf28      	it	cs
 8008060:	4613      	movcs	r3, r2
 8008062:	b29b      	uxth	r3, r3
 8008064:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008066:	893b      	ldrh	r3, [r7, #8]
 8008068:	461a      	mov	r2, r3
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fa5c 	bl	800852a <USBD_CtlSendData>
 8008072:	e009      	b.n	8008088 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f9e6 	bl	8008448 <USBD_CtlError>
 800807c:	e004      	b.n	8008088 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa90 	bl	80085a4 <USBD_CtlSendStatus>
 8008084:	e000      	b.n	8008088 <USBD_GetDescriptor+0x2cc>
    return;
 8008086:	bf00      	nop
  }
}
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop

08008090 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	889b      	ldrh	r3, [r3, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d131      	bne.n	8008106 <USBD_SetAddress+0x76>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	88db      	ldrh	r3, [r3, #6]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d12d      	bne.n	8008106 <USBD_SetAddress+0x76>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	885b      	ldrh	r3, [r3, #2]
 80080ae:	2b7f      	cmp	r3, #127	; 0x7f
 80080b0:	d829      	bhi.n	8008106 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	885b      	ldrh	r3, [r3, #2]
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d104      	bne.n	80080d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f9bb 	bl	8008448 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d2:	e01c      	b.n	800810e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	7bfa      	ldrb	r2, [r7, #15]
 80080d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7f9 fc49 	bl	8001978 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa5c 	bl	80085a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d004      	beq.n	80080fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2202      	movs	r2, #2
 80080f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fa:	e008      	b.n	800810e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008104:	e003      	b.n	800810e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f99d 	bl	8008448 <USBD_CtlError>
  }
}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	885b      	ldrh	r3, [r3, #2]
 800812a:	b2da      	uxtb	r2, r3
 800812c:	4b4e      	ldr	r3, [pc, #312]	; (8008268 <USBD_SetConfig+0x150>)
 800812e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008130:	4b4d      	ldr	r3, [pc, #308]	; (8008268 <USBD_SetConfig+0x150>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d905      	bls.n	8008144 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f984 	bl	8008448 <USBD_CtlError>
    return USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	e08c      	b.n	800825e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b02      	cmp	r3, #2
 800814e:	d002      	beq.n	8008156 <USBD_SetConfig+0x3e>
 8008150:	2b03      	cmp	r3, #3
 8008152:	d029      	beq.n	80081a8 <USBD_SetConfig+0x90>
 8008154:	e075      	b.n	8008242 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008156:	4b44      	ldr	r3, [pc, #272]	; (8008268 <USBD_SetConfig+0x150>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d020      	beq.n	80081a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800815e:	4b42      	ldr	r3, [pc, #264]	; (8008268 <USBD_SetConfig+0x150>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008168:	4b3f      	ldr	r3, [pc, #252]	; (8008268 <USBD_SetConfig+0x150>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fe fff5 	bl	800715e <USBD_SetClassConfig>
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d008      	beq.n	8008190 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f961 	bl	8008448 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2202      	movs	r2, #2
 800818a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800818e:	e065      	b.n	800825c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fa07 	bl	80085a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2203      	movs	r2, #3
 800819a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800819e:	e05d      	b.n	800825c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f9ff 	bl	80085a4 <USBD_CtlSendStatus>
      break;
 80081a6:	e059      	b.n	800825c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80081a8:	4b2f      	ldr	r3, [pc, #188]	; (8008268 <USBD_SetConfig+0x150>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d112      	bne.n	80081d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80081b8:	4b2b      	ldr	r3, [pc, #172]	; (8008268 <USBD_SetConfig+0x150>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	461a      	mov	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081c2:	4b29      	ldr	r3, [pc, #164]	; (8008268 <USBD_SetConfig+0x150>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7fe ffe4 	bl	8007196 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f9e8 	bl	80085a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081d4:	e042      	b.n	800825c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80081d6:	4b24      	ldr	r3, [pc, #144]	; (8008268 <USBD_SetConfig+0x150>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d02a      	beq.n	800823a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7fe ffd2 	bl	8007196 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081f2:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <USBD_SetConfig+0x150>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081fc:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <USBD_SetConfig+0x150>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7fe ffab 	bl	800715e <USBD_SetClassConfig>
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00f      	beq.n	8008232 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f917 	bl	8008448 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fe ffb7 	bl	8007196 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008230:	e014      	b.n	800825c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f9b6 	bl	80085a4 <USBD_CtlSendStatus>
      break;
 8008238:	e010      	b.n	800825c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f9b2 	bl	80085a4 <USBD_CtlSendStatus>
      break;
 8008240:	e00c      	b.n	800825c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f8ff 	bl	8008448 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800824a:	4b07      	ldr	r3, [pc, #28]	; (8008268 <USBD_SetConfig+0x150>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fe ffa0 	bl	8007196 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008256:	2303      	movs	r3, #3
 8008258:	73fb      	strb	r3, [r7, #15]
      break;
 800825a:	bf00      	nop
  }

  return ret;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000254 	.word	0x20000254

0800826c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	88db      	ldrh	r3, [r3, #6]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d004      	beq.n	8008288 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f8e1 	bl	8008448 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008286:	e022      	b.n	80082ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b01      	cmp	r3, #1
 8008292:	db17      	blt.n	80082c4 <USBD_GetConfig+0x58>
 8008294:	2b02      	cmp	r3, #2
 8008296:	dd02      	ble.n	800829e <USBD_GetConfig+0x32>
 8008298:	2b03      	cmp	r3, #3
 800829a:	d00b      	beq.n	80082b4 <USBD_GetConfig+0x48>
 800829c:	e012      	b.n	80082c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3308      	adds	r3, #8
 80082a8:	2201      	movs	r2, #1
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f93c 	bl	800852a <USBD_CtlSendData>
        break;
 80082b2:	e00c      	b.n	80082ce <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	2201      	movs	r2, #1
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f934 	bl	800852a <USBD_CtlSendData>
        break;
 80082c2:	e004      	b.n	80082ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f8be 	bl	8008448 <USBD_CtlError>
        break;
 80082cc:	bf00      	nop
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d81e      	bhi.n	800832c <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	88db      	ldrh	r3, [r3, #6]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d004      	beq.n	8008300 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f8a5 	bl	8008448 <USBD_CtlError>
        break;
 80082fe:	e01a      	b.n	8008336 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f043 0202 	orr.w	r2, r3, #2
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	330c      	adds	r3, #12
 8008320:	2202      	movs	r2, #2
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f900 	bl	800852a <USBD_CtlSendData>
      break;
 800832a:	e004      	b.n	8008336 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f88a 	bl	8008448 <USBD_CtlError>
      break;
 8008334:	bf00      	nop
  }
}
 8008336:	bf00      	nop
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	885b      	ldrh	r3, [r3, #2]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d107      	bne.n	8008360 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f923 	bl	80085a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800835e:	e013      	b.n	8008388 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	885b      	ldrh	r3, [r3, #2]
 8008364:	2b02      	cmp	r3, #2
 8008366:	d10b      	bne.n	8008380 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	889b      	ldrh	r3, [r3, #4]
 800836c:	0a1b      	lsrs	r3, r3, #8
 800836e:	b29b      	uxth	r3, r3
 8008370:	b2da      	uxtb	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f913 	bl	80085a4 <USBD_CtlSendStatus>
}
 800837e:	e003      	b.n	8008388 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f860 	bl	8008448 <USBD_CtlError>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	3b01      	subs	r3, #1
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d80b      	bhi.n	80083c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	885b      	ldrh	r3, [r3, #2]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d10c      	bne.n	80083ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f8f3 	bl	80085a4 <USBD_CtlSendStatus>
      }
      break;
 80083be:	e004      	b.n	80083ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f840 	bl	8008448 <USBD_CtlError>
      break;
 80083c8:	e000      	b.n	80083cc <USBD_ClrFeature+0x3c>
      break;
 80083ca:	bf00      	nop
  }
}
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	781a      	ldrb	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3301      	adds	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff fa4c 	bl	800789c <SWAPBYTE>
 8008404:	4603      	mov	r3, r0
 8008406:	461a      	mov	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3301      	adds	r3, #1
 8008416:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f7ff fa3f 	bl	800789c <SWAPBYTE>
 800841e:	4603      	mov	r3, r0
 8008420:	461a      	mov	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3301      	adds	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7ff fa32 	bl	800789c <SWAPBYTE>
 8008438:	4603      	mov	r3, r0
 800843a:	461a      	mov	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	80da      	strh	r2, [r3, #6]
}
 8008440:	bf00      	nop
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008452:	2180      	movs	r1, #128	; 0x80
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7f9 fa3d 	bl	80018d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800845a:	2100      	movs	r1, #0
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7f9 fa39 	bl	80018d4 <USBD_LL_StallEP>
}
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b086      	sub	sp, #24
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d036      	beq.n	80084ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008484:	6938      	ldr	r0, [r7, #16]
 8008486:	f000 f836 	bl	80084f6 <USBD_GetLen>
 800848a:	4603      	mov	r3, r0
 800848c:	3301      	adds	r3, #1
 800848e:	b29b      	uxth	r3, r3
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	7812      	ldrb	r2, [r2, #0]
 80084a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	3301      	adds	r3, #1
 80084a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	4413      	add	r3, r2
 80084b0:	2203      	movs	r2, #3
 80084b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	3301      	adds	r3, #1
 80084b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084ba:	e013      	b.n	80084e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084bc:	7dfb      	ldrb	r3, [r7, #23]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	4413      	add	r3, r2
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	7812      	ldrb	r2, [r2, #0]
 80084c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	3301      	adds	r3, #1
 80084cc:	613b      	str	r3, [r7, #16]
    idx++;
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	3301      	adds	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	4413      	add	r3, r2
 80084da:	2200      	movs	r2, #0
 80084dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	3301      	adds	r3, #1
 80084e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e7      	bne.n	80084bc <USBD_GetString+0x52>
 80084ec:	e000      	b.n	80084f0 <USBD_GetString+0x86>
    return;
 80084ee:	bf00      	nop
  }
}
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b085      	sub	sp, #20
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008506:	e005      	b.n	8008514 <USBD_GetLen+0x1e>
  {
    len++;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	3301      	adds	r3, #1
 800850c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	3301      	adds	r3, #1
 8008512:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1f5      	bne.n	8008508 <USBD_GetLen+0x12>
  }

  return len;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2202      	movs	r2, #2
 800853a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	2100      	movs	r1, #0
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7f9 fa24 	bl	800199e <USBD_LL_Transmit>

  return USBD_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	2100      	movs	r1, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7f9 fa13 	bl	800199e <USBD_LL_Transmit>

  return USBD_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	2100      	movs	r1, #0
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7f9 fa17 	bl	80019c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2204      	movs	r2, #4
 80085b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085b4:	2300      	movs	r3, #0
 80085b6:	2200      	movs	r2, #0
 80085b8:	2100      	movs	r1, #0
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7f9 f9ef 	bl	800199e <USBD_LL_Transmit>

  return USBD_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2205      	movs	r2, #5
 80085d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085da:	2300      	movs	r3, #0
 80085dc:	2200      	movs	r2, #0
 80085de:	2100      	movs	r1, #0
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7f9 f9f1 	bl	80019c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <__libc_init_array>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	4e0d      	ldr	r6, [pc, #52]	; (8008628 <__libc_init_array+0x38>)
 80085f4:	4c0d      	ldr	r4, [pc, #52]	; (800862c <__libc_init_array+0x3c>)
 80085f6:	1ba4      	subs	r4, r4, r6
 80085f8:	10a4      	asrs	r4, r4, #2
 80085fa:	2500      	movs	r5, #0
 80085fc:	42a5      	cmp	r5, r4
 80085fe:	d109      	bne.n	8008614 <__libc_init_array+0x24>
 8008600:	4e0b      	ldr	r6, [pc, #44]	; (8008630 <__libc_init_array+0x40>)
 8008602:	4c0c      	ldr	r4, [pc, #48]	; (8008634 <__libc_init_array+0x44>)
 8008604:	f000 f8fc 	bl	8008800 <_init>
 8008608:	1ba4      	subs	r4, r4, r6
 800860a:	10a4      	asrs	r4, r4, #2
 800860c:	2500      	movs	r5, #0
 800860e:	42a5      	cmp	r5, r4
 8008610:	d105      	bne.n	800861e <__libc_init_array+0x2e>
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008618:	4798      	blx	r3
 800861a:	3501      	adds	r5, #1
 800861c:	e7ee      	b.n	80085fc <__libc_init_array+0xc>
 800861e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008622:	4798      	blx	r3
 8008624:	3501      	adds	r5, #1
 8008626:	e7f2      	b.n	800860e <__libc_init_array+0x1e>
 8008628:	08008878 	.word	0x08008878
 800862c:	08008878 	.word	0x08008878
 8008630:	08008878 	.word	0x08008878
 8008634:	0800887c 	.word	0x0800887c

08008638 <malloc>:
 8008638:	4b02      	ldr	r3, [pc, #8]	; (8008644 <malloc+0xc>)
 800863a:	4601      	mov	r1, r0
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	f000 b861 	b.w	8008704 <_malloc_r>
 8008642:	bf00      	nop
 8008644:	20000144 	.word	0x20000144

08008648 <free>:
 8008648:	4b02      	ldr	r3, [pc, #8]	; (8008654 <free+0xc>)
 800864a:	4601      	mov	r1, r0
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	f000 b80b 	b.w	8008668 <_free_r>
 8008652:	bf00      	nop
 8008654:	20000144 	.word	0x20000144

08008658 <memset>:
 8008658:	4402      	add	r2, r0
 800865a:	4603      	mov	r3, r0
 800865c:	4293      	cmp	r3, r2
 800865e:	d100      	bne.n	8008662 <memset+0xa>
 8008660:	4770      	bx	lr
 8008662:	f803 1b01 	strb.w	r1, [r3], #1
 8008666:	e7f9      	b.n	800865c <memset+0x4>

08008668 <_free_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4605      	mov	r5, r0
 800866c:	2900      	cmp	r1, #0
 800866e:	d045      	beq.n	80086fc <_free_r+0x94>
 8008670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008674:	1f0c      	subs	r4, r1, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	bfb8      	it	lt
 800867a:	18e4      	addlt	r4, r4, r3
 800867c:	f000 f8b0 	bl	80087e0 <__malloc_lock>
 8008680:	4a1f      	ldr	r2, [pc, #124]	; (8008700 <_free_r+0x98>)
 8008682:	6813      	ldr	r3, [r2, #0]
 8008684:	4610      	mov	r0, r2
 8008686:	b933      	cbnz	r3, 8008696 <_free_r+0x2e>
 8008688:	6063      	str	r3, [r4, #4]
 800868a:	6014      	str	r4, [r2, #0]
 800868c:	4628      	mov	r0, r5
 800868e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008692:	f000 b8a6 	b.w	80087e2 <__malloc_unlock>
 8008696:	42a3      	cmp	r3, r4
 8008698:	d90c      	bls.n	80086b4 <_free_r+0x4c>
 800869a:	6821      	ldr	r1, [r4, #0]
 800869c:	1862      	adds	r2, r4, r1
 800869e:	4293      	cmp	r3, r2
 80086a0:	bf04      	itt	eq
 80086a2:	681a      	ldreq	r2, [r3, #0]
 80086a4:	685b      	ldreq	r3, [r3, #4]
 80086a6:	6063      	str	r3, [r4, #4]
 80086a8:	bf04      	itt	eq
 80086aa:	1852      	addeq	r2, r2, r1
 80086ac:	6022      	streq	r2, [r4, #0]
 80086ae:	6004      	str	r4, [r0, #0]
 80086b0:	e7ec      	b.n	800868c <_free_r+0x24>
 80086b2:	4613      	mov	r3, r2
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	b10a      	cbz	r2, 80086bc <_free_r+0x54>
 80086b8:	42a2      	cmp	r2, r4
 80086ba:	d9fa      	bls.n	80086b2 <_free_r+0x4a>
 80086bc:	6819      	ldr	r1, [r3, #0]
 80086be:	1858      	adds	r0, r3, r1
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d10b      	bne.n	80086dc <_free_r+0x74>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	4401      	add	r1, r0
 80086c8:	1858      	adds	r0, r3, r1
 80086ca:	4282      	cmp	r2, r0
 80086cc:	6019      	str	r1, [r3, #0]
 80086ce:	d1dd      	bne.n	800868c <_free_r+0x24>
 80086d0:	6810      	ldr	r0, [r2, #0]
 80086d2:	6852      	ldr	r2, [r2, #4]
 80086d4:	605a      	str	r2, [r3, #4]
 80086d6:	4401      	add	r1, r0
 80086d8:	6019      	str	r1, [r3, #0]
 80086da:	e7d7      	b.n	800868c <_free_r+0x24>
 80086dc:	d902      	bls.n	80086e4 <_free_r+0x7c>
 80086de:	230c      	movs	r3, #12
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	e7d3      	b.n	800868c <_free_r+0x24>
 80086e4:	6820      	ldr	r0, [r4, #0]
 80086e6:	1821      	adds	r1, r4, r0
 80086e8:	428a      	cmp	r2, r1
 80086ea:	bf04      	itt	eq
 80086ec:	6811      	ldreq	r1, [r2, #0]
 80086ee:	6852      	ldreq	r2, [r2, #4]
 80086f0:	6062      	str	r2, [r4, #4]
 80086f2:	bf04      	itt	eq
 80086f4:	1809      	addeq	r1, r1, r0
 80086f6:	6021      	streq	r1, [r4, #0]
 80086f8:	605c      	str	r4, [r3, #4]
 80086fa:	e7c7      	b.n	800868c <_free_r+0x24>
 80086fc:	bd38      	pop	{r3, r4, r5, pc}
 80086fe:	bf00      	nop
 8008700:	20000258 	.word	0x20000258

08008704 <_malloc_r>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	1ccd      	adds	r5, r1, #3
 8008708:	f025 0503 	bic.w	r5, r5, #3
 800870c:	3508      	adds	r5, #8
 800870e:	2d0c      	cmp	r5, #12
 8008710:	bf38      	it	cc
 8008712:	250c      	movcc	r5, #12
 8008714:	2d00      	cmp	r5, #0
 8008716:	4606      	mov	r6, r0
 8008718:	db01      	blt.n	800871e <_malloc_r+0x1a>
 800871a:	42a9      	cmp	r1, r5
 800871c:	d903      	bls.n	8008726 <_malloc_r+0x22>
 800871e:	230c      	movs	r3, #12
 8008720:	6033      	str	r3, [r6, #0]
 8008722:	2000      	movs	r0, #0
 8008724:	bd70      	pop	{r4, r5, r6, pc}
 8008726:	f000 f85b 	bl	80087e0 <__malloc_lock>
 800872a:	4a23      	ldr	r2, [pc, #140]	; (80087b8 <_malloc_r+0xb4>)
 800872c:	6814      	ldr	r4, [r2, #0]
 800872e:	4621      	mov	r1, r4
 8008730:	b991      	cbnz	r1, 8008758 <_malloc_r+0x54>
 8008732:	4c22      	ldr	r4, [pc, #136]	; (80087bc <_malloc_r+0xb8>)
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	b91b      	cbnz	r3, 8008740 <_malloc_r+0x3c>
 8008738:	4630      	mov	r0, r6
 800873a:	f000 f841 	bl	80087c0 <_sbrk_r>
 800873e:	6020      	str	r0, [r4, #0]
 8008740:	4629      	mov	r1, r5
 8008742:	4630      	mov	r0, r6
 8008744:	f000 f83c 	bl	80087c0 <_sbrk_r>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d126      	bne.n	800879a <_malloc_r+0x96>
 800874c:	230c      	movs	r3, #12
 800874e:	6033      	str	r3, [r6, #0]
 8008750:	4630      	mov	r0, r6
 8008752:	f000 f846 	bl	80087e2 <__malloc_unlock>
 8008756:	e7e4      	b.n	8008722 <_malloc_r+0x1e>
 8008758:	680b      	ldr	r3, [r1, #0]
 800875a:	1b5b      	subs	r3, r3, r5
 800875c:	d41a      	bmi.n	8008794 <_malloc_r+0x90>
 800875e:	2b0b      	cmp	r3, #11
 8008760:	d90f      	bls.n	8008782 <_malloc_r+0x7e>
 8008762:	600b      	str	r3, [r1, #0]
 8008764:	50cd      	str	r5, [r1, r3]
 8008766:	18cc      	adds	r4, r1, r3
 8008768:	4630      	mov	r0, r6
 800876a:	f000 f83a 	bl	80087e2 <__malloc_unlock>
 800876e:	f104 000b 	add.w	r0, r4, #11
 8008772:	1d23      	adds	r3, r4, #4
 8008774:	f020 0007 	bic.w	r0, r0, #7
 8008778:	1ac3      	subs	r3, r0, r3
 800877a:	d01b      	beq.n	80087b4 <_malloc_r+0xb0>
 800877c:	425a      	negs	r2, r3
 800877e:	50e2      	str	r2, [r4, r3]
 8008780:	bd70      	pop	{r4, r5, r6, pc}
 8008782:	428c      	cmp	r4, r1
 8008784:	bf0d      	iteet	eq
 8008786:	6863      	ldreq	r3, [r4, #4]
 8008788:	684b      	ldrne	r3, [r1, #4]
 800878a:	6063      	strne	r3, [r4, #4]
 800878c:	6013      	streq	r3, [r2, #0]
 800878e:	bf18      	it	ne
 8008790:	460c      	movne	r4, r1
 8008792:	e7e9      	b.n	8008768 <_malloc_r+0x64>
 8008794:	460c      	mov	r4, r1
 8008796:	6849      	ldr	r1, [r1, #4]
 8008798:	e7ca      	b.n	8008730 <_malloc_r+0x2c>
 800879a:	1cc4      	adds	r4, r0, #3
 800879c:	f024 0403 	bic.w	r4, r4, #3
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d005      	beq.n	80087b0 <_malloc_r+0xac>
 80087a4:	1a21      	subs	r1, r4, r0
 80087a6:	4630      	mov	r0, r6
 80087a8:	f000 f80a 	bl	80087c0 <_sbrk_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	d0cd      	beq.n	800874c <_malloc_r+0x48>
 80087b0:	6025      	str	r5, [r4, #0]
 80087b2:	e7d9      	b.n	8008768 <_malloc_r+0x64>
 80087b4:	bd70      	pop	{r4, r5, r6, pc}
 80087b6:	bf00      	nop
 80087b8:	20000258 	.word	0x20000258
 80087bc:	2000025c 	.word	0x2000025c

080087c0 <_sbrk_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4c06      	ldr	r4, [pc, #24]	; (80087dc <_sbrk_r+0x1c>)
 80087c4:	2300      	movs	r3, #0
 80087c6:	4605      	mov	r5, r0
 80087c8:	4608      	mov	r0, r1
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	f000 f80a 	bl	80087e4 <_sbrk>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d102      	bne.n	80087da <_sbrk_r+0x1a>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	b103      	cbz	r3, 80087da <_sbrk_r+0x1a>
 80087d8:	602b      	str	r3, [r5, #0]
 80087da:	bd38      	pop	{r3, r4, r5, pc}
 80087dc:	20000c00 	.word	0x20000c00

080087e0 <__malloc_lock>:
 80087e0:	4770      	bx	lr

080087e2 <__malloc_unlock>:
 80087e2:	4770      	bx	lr

080087e4 <_sbrk>:
 80087e4:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <_sbrk+0x14>)
 80087e6:	6819      	ldr	r1, [r3, #0]
 80087e8:	4602      	mov	r2, r0
 80087ea:	b909      	cbnz	r1, 80087f0 <_sbrk+0xc>
 80087ec:	4903      	ldr	r1, [pc, #12]	; (80087fc <_sbrk+0x18>)
 80087ee:	6019      	str	r1, [r3, #0]
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	4402      	add	r2, r0
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	4770      	bx	lr
 80087f8:	20000260 	.word	0x20000260
 80087fc:	20000c04 	.word	0x20000c04

08008800 <_init>:
 8008800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008802:	bf00      	nop
 8008804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008806:	bc08      	pop	{r3}
 8008808:	469e      	mov	lr, r3
 800880a:	4770      	bx	lr

0800880c <_fini>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	bf00      	nop
 8008810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008812:	bc08      	pop	{r3}
 8008814:	469e      	mov	lr, r3
 8008816:	4770      	bx	lr
