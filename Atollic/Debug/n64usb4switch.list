
n64usb4switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007d68  08007d68  00017d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007dc0  08007dc0  00017dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007dcc  08007dcc  00017dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001a8  20000000  08007dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009fc  200001a8  08007f78  000201a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000ba4  08007f78  00020ba4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001937c  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f6a  00000000  00000000  00039554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000dc8  00000000  00000000  0003c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cb0  00000000  00000000  0003d288  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007b2a  00000000  00000000  0003df38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004918  00000000  00000000  00045a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004a37a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003998  00000000  00000000  0004a3f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0004dd90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a8 	.word	0x200001a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007d50 	.word	0x08007d50

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ac 	.word	0x200001ac
 80001d4:	08007d50 	.word	0x08007d50

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	HAL_Init();
 80004ee:	f001 fbf3 	bl	8001cd8 <HAL_Init>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE()
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4a2b      	ldr	r2, [pc, #172]	; (80005a4 <main+0xbc>)
 80004f8:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <main+0xbc>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <main+0xbc>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4a24      	ldr	r2, [pc, #144]	; (80005a4 <main+0xbc>)
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <main+0xbc>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <main+0xbc>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
	;
	uint32_t sysclock = SystemCoreClock;
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <main+0xc0>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	60fb      	str	r3, [r7, #12]

	/* Configure the system clock to 100 MHz */
	SystemClock_Config();
 8000530:	f000 f846 	bl	80005c0 <SystemClock_Config>

	/* -1- Enable GPIO Clock (to be able to program the configuration registers) */
	LEDx_GPIO_CLK_ENABLE()
 8000534:	2300      	movs	r3, #0
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	4a1a      	ldr	r2, [pc, #104]	; (80005a4 <main+0xbc>)
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <main+0xbc>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6313      	str	r3, [r2, #48]	; 0x30
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <main+0xbc>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]
	;

	/* -2- Configure IO in output push-pull mode to drive external LEDs */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <main+0xc4>)
 8000552:	2201      	movs	r2, #1
 8000554:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <main+0xc4>)
 8000558:	2201      	movs	r2, #1
 800055a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <main+0xc4>)
 800055e:	2203      	movs	r2, #3
 8000560:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED2_PIN | LED3_PIN;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <main+0xc4>)
 8000564:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000568:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LEDx_GPIO_PORT, &GPIO_InitStruct);
 800056a:	4910      	ldr	r1, [pc, #64]	; (80005ac <main+0xc4>)
 800056c:	4810      	ldr	r0, [pc, #64]	; (80005b0 <main+0xc8>)
 800056e:	f001 fd57 	bl	8002020 <HAL_GPIO_Init>

	ButtonInit();
 8000572:	f000 f88d 	bl	8000690 <ButtonInit>

	/* Init Device Library */
	USBD_Init(&USBD_Device, &HID_Desc, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	490e      	ldr	r1, [pc, #56]	; (80005b4 <main+0xcc>)
 800057a:	480f      	ldr	r0, [pc, #60]	; (80005b8 <main+0xd0>)
 800057c:	f006 f81a 	bl	80065b4 <USBD_Init>

	/* Add Supported Class */
	USBD_RegisterClass(&USBD_Device, USBD_HID_CLASS);
 8000580:	490e      	ldr	r1, [pc, #56]	; (80005bc <main+0xd4>)
 8000582:	480d      	ldr	r0, [pc, #52]	; (80005b8 <main+0xd0>)
 8000584:	f006 f846 	bl	8006614 <USBD_RegisterClass>

	/* Start Device Process */
	USBD_Start(&USBD_Device);
 8000588:	480b      	ldr	r0, [pc, #44]	; (80005b8 <main+0xd0>)
 800058a:	f006 f879 	bl	8006680 <USBD_Start>

	sysclock = SystemCoreClock;
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <main+0xc0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	60fb      	str	r3, [r7, #12]

	//n64_start_transmission();
	n64_init();
 8000594:	f000 f8e8 	bl	8000768 <n64_init>


	MX_USART1_UART_Init();
 8000598:	f000 f886 	bl	80006a8 <MX_USART1_UART_Init>

	/* -3- Toggle IO in an infinite loop */
	while (1) {
		n64_update();
 800059c:	f000 f966 	bl	800086c <n64_update>
 80005a0:	e7fc      	b.n	800059c <main+0xb4>
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	20000064 	.word	0x20000064
 80005ac:	200001c4 	.word	0x200001c4
 80005b0:	40020800 	.word	0x40020800
 80005b4:	20000014 	.word	0x20000014
 80005b8:	20000260 	.word	0x20000260
 80005bc:	20000068 	.word	0x20000068

080005c0 <SystemClock_Config>:
		while(1) {;}
	}
}

#else
void SystemClock_Config(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f007 faea 	bl	8007ba8 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xc8>)
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xc8>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xcc>)
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <SystemClock_Config+0xcc>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 25;
 8000630:	2319      	movs	r3, #25
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 192;
 8000634:	23c0      	movs	r3, #192	; 0xc0
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f003 f915 	bl	8003874 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
	  {
	    Error_Handler();
 8000650:	f000 f825 	bl	800069e <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2103      	movs	r1, #3
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fb77 	bl	8003d64 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc0>
	  {
	    Error_Handler();
 800067c:	f000 f80f 	bl	800069e <Error_Handler>
	  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <ButtonInit>:

/**
 * @}
 */

void ButtonInit(void) {
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(KEY_BUTTON_GPIO_PORT, &GPIO_InitStruct);
#endif
	/* Enable and set Button EXTI Interrupt to the lowest priority */
	//HAL_NVIC_SetPriority((IRQn_Type) (KEY_BUTTON_EXTI_IRQn), 0x0F, 0x00);
	//HAL_NVIC_EnableIRQ((IRQn_Type) (KEY_BUTTON_EXTI_IRQn));
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <Error_Handler>:

void Error_Handler(void) {
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a2:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x6>
	...

080006a8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <MX_USART1_UART_Init+0x54>)
 80006b0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 3150000;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006b4:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006b6:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006be:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_2;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c6:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006d0:	220c      	movs	r2, #12
 80006d2:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006e0:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart1) != HAL_OK) {
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006e4:	f003 fd0e 	bl	8004104 <HAL_HalfDuplex_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART1_UART_Init+0x4a>
		Error_Handler();
 80006ee:	f7ff ffd6 	bl	800069e <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000053c 	.word	0x2000053c
 80006fc:	40011000 	.word	0x40011000
 8000700:	003010b0 	.word	0x003010b0

08000704 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	691a      	ldr	r2, [r3, #16]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	401a      	ands	r2, r3
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	bf0c      	ite	eq
 800071c:	2301      	moveq	r3, #1
 800071e:	2300      	movne	r3, #0
 8000720:	b2db      	uxtb	r3, r3
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	619a      	str	r2, [r3, #24]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	041a      	lsls	r2, r3, #16
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	619a      	str	r2, [r3, #24]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <n64_init>:
	uint32_t sysclk = HAL_RCC_GetSysClockFreq();
	uint32_t Fpclk1 = HAL_RCC_GetPCLK1Freq();

}

void n64_init(void){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
	ErrorStatus returned;
	LL_GPIO_Ini.Mode = LL_GPIO_MODE_OUTPUT;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <n64_init+0x7c>)
 8000770:	2201      	movs	r2, #1
 8000772:	605a      	str	r2, [r3, #4]
	LL_GPIO_Ini.Pull = LL_GPIO_PULL_UP;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <n64_init+0x7c>)
 8000776:	2201      	movs	r2, #1
 8000778:	611a      	str	r2, [r3, #16]
	LL_GPIO_Ini.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <n64_init+0x7c>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
	LL_GPIO_Ini.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <n64_init+0x7c>)
 8000782:	2203      	movs	r2, #3
 8000784:	609a      	str	r2, [r3, #8]

	LL_GPIO_Ini.Pin = LL_GPIO_PIN_8;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <n64_init+0x7c>)
 8000788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078c:	601a      	str	r2, [r3, #0]
	returned = LL_GPIO_Init(GPIOA, &LL_GPIO_Ini);
 800078e:	4915      	ldr	r1, [pc, #84]	; (80007e4 <n64_init+0x7c>)
 8000790:	4815      	ldr	r0, [pc, #84]	; (80007e8 <n64_init+0x80>)
 8000792:	f004 f9ca 	bl	8004b2a <LL_GPIO_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_8);
 800079a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079e:	4812      	ldr	r0, [pc, #72]	; (80007e8 <n64_init+0x80>)
 80007a0:	f7ff ffc5 	bl	800072e <LL_GPIO_SetOutputPin>


	LL_GPIO_Ini.Mode = LL_GPIO_MODE_OUTPUT;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <n64_init+0x7c>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	605a      	str	r2, [r3, #4]
	LL_GPIO_Ini.Pull = LL_GPIO_PULL_UP;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <n64_init+0x7c>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	611a      	str	r2, [r3, #16]
	LL_GPIO_Ini.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <n64_init+0x7c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
	LL_GPIO_Ini.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <n64_init+0x7c>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	609a      	str	r2, [r3, #8]
	LL_GPIO_Ini.Pin = LL_GPIO_PIN_10;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <n64_init+0x7c>)
 80007be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c2:	601a      	str	r2, [r3, #0]
		returned = LL_GPIO_Init(GPIOA, &LL_GPIO_Ini);
 80007c4:	4907      	ldr	r1, [pc, #28]	; (80007e4 <n64_init+0x7c>)
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <n64_init+0x80>)
 80007c8:	f004 f9af 	bl	8004b2a <LL_GPIO_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	71fb      	strb	r3, [r7, #7]
		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_10);
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <n64_init+0x80>)
 80007d6:	f7ff ffaa 	bl	800072e <LL_GPIO_SetOutputPin>


}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200001d8 	.word	0x200001d8
 80007e8:	40020000 	.word	0x40020000

080007ec <reverse>:
	return response;


}*/

uint8_t reverse(uint8_t b) {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	091b      	lsrs	r3, r3, #4
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	b25a      	sxtb	r2, r3
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	b25b      	sxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b25b      	sxtb	r3, r3
 8000808:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	109b      	asrs	r3, r3, #2
 800080e:	b25b      	sxtb	r3, r3
 8000810:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8000814:	b25a      	sxtb	r2, r3
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	b25b      	sxtb	r3, r3
 800081c:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8000820:	b25b      	sxtb	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b25b      	sxtb	r3, r3
 8000826:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	105b      	asrs	r3, r3, #1
 800082c:	b25b      	sxtb	r3, r3
 800082e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8000832:	b25a      	sxtb	r2, r3
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	b25b      	sxtb	r3, r3
 800083a:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 800083e:	b25b      	sxtb	r3, r3
 8000840:	4313      	orrs	r3, r2
 8000842:	b25b      	sxtb	r3, r3
 8000844:	71fb      	strb	r3, [r7, #7]
   return b;
 8000846:	79fb      	ldrb	r3, [r7, #7]
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <n64schedule_update>:

void n64schedule_update(void){
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	n64_read = 1;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <n64schedule_update+0x14>)
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	20000244 	.word	0x20000244

0800086c <n64_update>:

void n64_update(void){
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
	if(!n64_read){
 8000872:	4b46      	ldr	r3, [pc, #280]	; (800098c <n64_update+0x120>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 8084 	beq.w	8000984 <n64_update+0x118>
		return;
	}
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10);
 800087c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000880:	4843      	ldr	r0, [pc, #268]	; (8000990 <n64_update+0x124>)
 8000882:	f7ff ff62 	bl	800074a <LL_GPIO_ResetOutputPin>
	/* Insert delay 100 ms */
	//n64_update();
	//HAL_GPIO_TogglePin(LEDx_GPIO_PORT, LED3_PIN);
	//LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_4);
	//LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000886:	4843      	ldr	r0, [pc, #268]	; (8000994 <n64_update+0x128>)
 8000888:	f003 fdc4 	bl	8004414 <HAL_HalfDuplex_EnableTransmitter>
	//status=HAL_UART_Transmit(&huart3,packet, sizeof(packet),1000);
	status = HAL_UART_Transmit(&huart1, (uint8_t*) packet, 8, 2);
 800088c:	2302      	movs	r3, #2
 800088e:	2208      	movs	r2, #8
 8000890:	4941      	ldr	r1, [pc, #260]	; (8000998 <n64_update+0x12c>)
 8000892:	4840      	ldr	r0, [pc, #256]	; (8000994 <n64_update+0x128>)
 8000894:	f003 fc8b 	bl	80041ae <HAL_UART_Transmit>
 8000898:	4603      	mov	r3, r0
 800089a:	72fb      	strb	r3, [r7, #11]
	if (status != HAL_OK) {
 800089c:	7afb      	ldrb	r3, [r7, #11]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <n64_update+0x3a>
		Error_Handler();
 80008a2:	f7ff fefc 	bl	800069e <Error_Handler>
	}
	//while ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) ? SET : RESET) == RESET);

	huart1.Instance->DR = (uint16_t)(0x01e0 & 0x01FFU);
 80008a6:	4b3b      	ldr	r3, [pc, #236]	; (8000994 <n64_update+0x128>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80008ae:	605a      	str	r2, [r3, #4]
	//if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, 2) != HAL_OK)
	//while ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) ? SET : RESET) == RESET);
	while(!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_9));
 80008b0:	bf00      	nop
 80008b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b6:	4836      	ldr	r0, [pc, #216]	; (8000990 <n64_update+0x124>)
 80008b8:	f7ff ff24 	bl	8000704 <LL_GPIO_IsInputPinSet>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f7      	beq.n	80008b2 <n64_update+0x46>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10);
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	4832      	ldr	r0, [pc, #200]	; (8000990 <n64_update+0x124>)
 80008c8:	f7ff ff31 	bl	800072e <LL_GPIO_SetOutputPin>
	//__disable_irq();
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
	//for (int i = 0; i < 5; i++) {
	//	asm("nop");
	//}
	HAL_HalfDuplex_EnableReceiver(&huart1);
 80008cc:	4831      	ldr	r0, [pc, #196]	; (8000994 <n64_update+0x128>)
 80008ce:	f003 fdd5 	bl	800447c <HAL_HalfDuplex_EnableReceiver>
	//HAL_UART_Transmit(&huart3,packet, sizeof(packet),1000);

//	for (int i = 0; i < 10; i++) {
//		asm("nop");
//	}
	status = HAL_UART_Receive(&huart1, (uint8_t *) in_buff, 33, 2);
 80008d2:	2302      	movs	r3, #2
 80008d4:	2221      	movs	r2, #33	; 0x21
 80008d6:	4931      	ldr	r1, [pc, #196]	; (800099c <n64_update+0x130>)
 80008d8:	482e      	ldr	r0, [pc, #184]	; (8000994 <n64_update+0x128>)
 80008da:	f003 fcf9 	bl	80042d0 <HAL_UART_Receive>
 80008de:	4603      	mov	r3, r0
 80008e0:	72fb      	strb	r3, [r7, #11]
	if (status == HAL_OK) {
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d143      	bne.n	8000970 <n64_update+0x104>
		//Error_Handler();
		respons = 0;
 80008e8:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <n64_update+0x134>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 32; i++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e014      	b.n	800091e <n64_update+0xb2>
			if (in_buff[i] & (1 << 5))
 80008f4:	4a29      	ldr	r2, [pc, #164]	; (800099c <n64_update+0x130>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008fc:	f003 0320 	and.w	r3, r3, #32
 8000900:	2b00      	cmp	r3, #0
 8000902:	d009      	beq.n	8000918 <n64_update+0xac>
				respons |= (1 << i);
 8000904:	2201      	movs	r2, #1
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	461a      	mov	r2, r3
 800090e:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <n64_update+0x134>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4313      	orrs	r3, r2
 8000914:	4a22      	ldr	r2, [pc, #136]	; (80009a0 <n64_update+0x134>)
 8000916:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 32; i++) {
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3301      	adds	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b1f      	cmp	r3, #31
 8000922:	dde7      	ble.n	80008f4 <n64_update+0x88>
		}

		controller = *((n64_controller_t*) &respons);
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <n64_update+0x134>)
 8000926:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <n64_update+0x138>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6013      	str	r3, [r2, #0]
		controller.AxisX = reverse(controller.AxisX);
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <n64_update+0x138>)
 800092e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff59 	bl	80007ec <reverse>
 800093a:	4603      	mov	r3, r0
 800093c:	b25a      	sxtb	r2, r3
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <n64_update+0x138>)
 8000940:	709a      	strb	r2, [r3, #2]
		controller.AxisY = reverse(controller.AxisY);
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <n64_update+0x138>)
 8000944:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ff4e 	bl	80007ec <reverse>
 8000950:	4603      	mov	r3, r0
 8000952:	b25a      	sxtb	r2, r3
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <n64_update+0x138>)
 8000956:	70da      	strb	r2, [r3, #3]
		controller.AxisY = (uint8_t)(((uint16_t)controller.AxisY+1)*-1);
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <n64_update+0x138>)
 800095a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800095e:	b29b      	uxth	r3, r3
 8000960:	3301      	adds	r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	425b      	negs	r3, r3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	b25a      	sxtb	r2, r3
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <n64_update+0x138>)
 800096c:	70da      	strb	r2, [r3, #3]
 800096e:	e005      	b.n	800097c <n64_update+0x110>



	}
	else if (status == HAL_TIMEOUT){
 8000970:	7afb      	ldrb	r3, [r7, #11]
 8000972:	2b03      	cmp	r3, #3
 8000974:	d102      	bne.n	800097c <n64_update+0x110>
		__HAL_UART_FLUSH_DRREGISTER(&huart1);
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <n64_update+0x128>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
	}
	n64_read=0;
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <n64_update+0x120>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e000      	b.n	8000986 <n64_update+0x11a>
		return;
 8000984:	bf00      	nop

	//HAL_Delay(10);
	/* Insert delay 100 ms */
	//HAL_Delay(1000);

	}
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000244 	.word	0x20000244
 8000990:	40020000 	.word	0x40020000
 8000994:	2000053c 	.word	0x2000053c
 8000998:	20000000 	.word	0x20000000
 800099c:	200001f0 	.word	0x200001f0
 80009a0:	20000240 	.word	0x20000240
 80009a4:	20000584 	.word	0x20000584

080009a8 <n64_update_buffer>:

void n64_update_buffer(uint8_t* buffer){
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	uint16_t sw_buttons=0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	81fb      	strh	r3, [r7, #14]

	uint8_t RightX =127,RightY =127, LeftX=127,LeftY=127;
 80009b4:	237f      	movs	r3, #127	; 0x7f
 80009b6:	737b      	strb	r3, [r7, #13]
 80009b8:	237f      	movs	r3, #127	; 0x7f
 80009ba:	733b      	strb	r3, [r7, #12]
 80009bc:	237f      	movs	r3, #127	; 0x7f
 80009be:	727b      	strb	r3, [r7, #9]
 80009c0:	237f      	movs	r3, #127	; 0x7f
 80009c2:	723b      	strb	r3, [r7, #8]

	if(controller.ButtonA) sw_buttons|=SWITCH_A;
 80009c4:	4b9a      	ldr	r3, [pc, #616]	; (8000c30 <n64_update_buffer+0x288>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <n64_update_buffer+0x32>
 80009d2:	89fb      	ldrh	r3, [r7, #14]
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	81fb      	strh	r3, [r7, #14]
	if(controller.ButtonB) sw_buttons|=SWITCH_B;
 80009da:	4b95      	ldr	r3, [pc, #596]	; (8000c30 <n64_update_buffer+0x288>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <n64_update_buffer+0x48>
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	81fb      	strh	r3, [r7, #14]
	if(controller.ButtonStart) sw_buttons|=SWITCH_START;
 80009f0:	4b8f      	ldr	r3, [pc, #572]	; (8000c30 <n64_update_buffer+0x288>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <n64_update_buffer+0x5e>
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a04:	81fb      	strh	r3, [r7, #14]
	if(controller.ButtonL) sw_buttons|=SWITCH_L;
 8000a06:	4b8a      	ldr	r3, [pc, #552]	; (8000c30 <n64_update_buffer+0x288>)
 8000a08:	785b      	ldrb	r3, [r3, #1]
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <n64_update_buffer+0x74>
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	81fb      	strh	r3, [r7, #14]
	if(controller.ButtonR) sw_buttons|=SWITCH_R;
 8000a1c:	4b84      	ldr	r3, [pc, #528]	; (8000c30 <n64_update_buffer+0x288>)
 8000a1e:	785b      	ldrb	r3, [r3, #1]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <n64_update_buffer+0x8a>
 8000a2a:	89fb      	ldrh	r3, [r7, #14]
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	81fb      	strh	r3, [r7, #14]
	if(controller.ButtonZ) sw_buttons|=SWITCH_ZL;
 8000a32:	4b7f      	ldr	r3, [pc, #508]	; (8000c30 <n64_update_buffer+0x288>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <n64_update_buffer+0xa0>
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a46:	81fb      	strh	r3, [r7, #14]

	if(controller.ButtonCUp) RightY=0;
 8000a48:	4b79      	ldr	r3, [pc, #484]	; (8000c30 <n64_update_buffer+0x288>)
 8000a4a:	785b      	ldrb	r3, [r3, #1]
 8000a4c:	f003 0310 	and.w	r3, r3, #16
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <n64_update_buffer+0xb2>
 8000a56:	2300      	movs	r3, #0
 8000a58:	733b      	strb	r3, [r7, #12]
	if(controller.ButtonCDown) RightY=255;
 8000a5a:	4b75      	ldr	r3, [pc, #468]	; (8000c30 <n64_update_buffer+0x288>)
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <n64_update_buffer+0xc4>
 8000a68:	23ff      	movs	r3, #255	; 0xff
 8000a6a:	733b      	strb	r3, [r7, #12]
	if(controller.ButtonCLeft) RightX=0;
 8000a6c:	4b70      	ldr	r3, [pc, #448]	; (8000c30 <n64_update_buffer+0x288>)
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <n64_update_buffer+0xd6>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	737b      	strb	r3, [r7, #13]
	if(controller.ButtonCRight) RightX=255;
 8000a7e:	4b6c      	ldr	r3, [pc, #432]	; (8000c30 <n64_update_buffer+0x288>)
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <n64_update_buffer+0xe8>
 8000a8c:	23ff      	movs	r3, #255	; 0xff
 8000a8e:	737b      	strb	r3, [r7, #13]

	uint8_t dpad = 0, hat =0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	72fb      	strb	r3, [r7, #11]
 8000a94:	2300      	movs	r3, #0
 8000a96:	72bb      	strb	r3, [r7, #10]
	if(controller.ButtonUp) dpad |= 0x80;
 8000a98:	4b65      	ldr	r3, [pc, #404]	; (8000c30 <n64_update_buffer+0x288>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <n64_update_buffer+0x106>
 8000aa6:	7afb      	ldrb	r3, [r7, #11]
 8000aa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aac:	72fb      	strb	r3, [r7, #11]
	if(controller.ButtonDown) dpad |= 0x40;
 8000aae:	4b60      	ldr	r3, [pc, #384]	; (8000c30 <n64_update_buffer+0x288>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	f003 0320 	and.w	r3, r3, #32
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <n64_update_buffer+0x11c>
 8000abc:	7afb      	ldrb	r3, [r7, #11]
 8000abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac2:	72fb      	strb	r3, [r7, #11]
	if(controller.ButtonLeft) dpad |= 0x10;
 8000ac4:	4b5a      	ldr	r3, [pc, #360]	; (8000c30 <n64_update_buffer+0x288>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <n64_update_buffer+0x132>
 8000ad2:	7afb      	ldrb	r3, [r7, #11]
 8000ad4:	f043 0310 	orr.w	r3, r3, #16
 8000ad8:	72fb      	strb	r3, [r7, #11]
	if(controller.ButtonRight) dpad |= 0x20;
 8000ada:	4b55      	ldr	r3, [pc, #340]	; (8000c30 <n64_update_buffer+0x288>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <n64_update_buffer+0x148>
 8000ae8:	7afb      	ldrb	r3, [r7, #11]
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	72fb      	strb	r3, [r7, #11]

	switch(dpad & 0xF0) {
 8000af0:	7afb      	ldrb	r3, [r7, #11]
 8000af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000af6:	2b50      	cmp	r3, #80	; 0x50
 8000af8:	d023      	beq.n	8000b42 <n64_update_buffer+0x19a>
 8000afa:	2b50      	cmp	r3, #80	; 0x50
 8000afc:	dc06      	bgt.n	8000b0c <n64_update_buffer+0x164>
 8000afe:	2b20      	cmp	r3, #32
 8000b00:	d016      	beq.n	8000b30 <n64_update_buffer+0x188>
 8000b02:	2b40      	cmp	r3, #64	; 0x40
 8000b04:	d01a      	beq.n	8000b3c <n64_update_buffer+0x194>
 8000b06:	2b10      	cmp	r3, #16
 8000b08:	d01e      	beq.n	8000b48 <n64_update_buffer+0x1a0>
 8000b0a:	e023      	b.n	8000b54 <n64_update_buffer+0x1ac>
 8000b0c:	2b80      	cmp	r3, #128	; 0x80
 8000b0e:	d009      	beq.n	8000b24 <n64_update_buffer+0x17c>
 8000b10:	2b80      	cmp	r3, #128	; 0x80
 8000b12:	dc02      	bgt.n	8000b1a <n64_update_buffer+0x172>
 8000b14:	2b60      	cmp	r3, #96	; 0x60
 8000b16:	d00e      	beq.n	8000b36 <n64_update_buffer+0x18e>
 8000b18:	e01c      	b.n	8000b54 <n64_update_buffer+0x1ac>
 8000b1a:	2b90      	cmp	r3, #144	; 0x90
 8000b1c:	d017      	beq.n	8000b4e <n64_update_buffer+0x1a6>
 8000b1e:	2ba0      	cmp	r3, #160	; 0xa0
 8000b20:	d003      	beq.n	8000b2a <n64_update_buffer+0x182>
 8000b22:	e017      	b.n	8000b54 <n64_update_buffer+0x1ac>
			case 0x80: // Top
				hat = 0x00;
 8000b24:	2300      	movs	r3, #0
 8000b26:	72bb      	strb	r3, [r7, #10]
				break;
 8000b28:	e016      	b.n	8000b58 <n64_update_buffer+0x1b0>
			case 0xA0: // Top-Right
				hat = 0x01;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	72bb      	strb	r3, [r7, #10]
				break;
 8000b2e:	e013      	b.n	8000b58 <n64_update_buffer+0x1b0>
			case 0x20: // Right
				hat = 0x02;
 8000b30:	2302      	movs	r3, #2
 8000b32:	72bb      	strb	r3, [r7, #10]
				break;
 8000b34:	e010      	b.n	8000b58 <n64_update_buffer+0x1b0>
			case 0x60: // Bottom-Right
				hat = 0x03;
 8000b36:	2303      	movs	r3, #3
 8000b38:	72bb      	strb	r3, [r7, #10]
				break;
 8000b3a:	e00d      	b.n	8000b58 <n64_update_buffer+0x1b0>
			case 0x40: // Bottom
				hat= 0x04;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	72bb      	strb	r3, [r7, #10]
				break;
 8000b40:	e00a      	b.n	8000b58 <n64_update_buffer+0x1b0>
			case 0x50: // Bottom-Left
				hat = 0x05;
 8000b42:	2305      	movs	r3, #5
 8000b44:	72bb      	strb	r3, [r7, #10]
				break;
 8000b46:	e007      	b.n	8000b58 <n64_update_buffer+0x1b0>
			case 0x10: // Left
				hat = 0x06;
 8000b48:	2306      	movs	r3, #6
 8000b4a:	72bb      	strb	r3, [r7, #10]
				break;
 8000b4c:	e004      	b.n	8000b58 <n64_update_buffer+0x1b0>
			case 0x90: // Top-Left
				hat = 0x07;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	72bb      	strb	r3, [r7, #10]
				break;
 8000b52:	e001      	b.n	8000b58 <n64_update_buffer+0x1b0>
			default:
				hat = 0x08;
 8000b54:	2308      	movs	r3, #8
 8000b56:	72bb      	strb	r3, [r7, #10]
	}



	//int16_t helperX, helperY;
	LeftY = (uint8_t) ((uint16_t)(controller.AxisY+128));
 8000b58:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <n64_update_buffer+0x288>)
 8000b5a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	3b80      	subs	r3, #128	; 0x80
 8000b62:	723b      	strb	r3, [r7, #8]
	//LeftX =
	//LeftX = (uint8_t)(((int8_t) reverse(controller.AxisY))+128);



	if((controller.ButtonL) &(controller.ButtonLeft)){
 8000b64:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <n64_update_buffer+0x288>)
 8000b66:	785b      	ldrb	r3, [r3, #1]
 8000b68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <n64_update_buffer+0x288>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <n64_update_buffer+0x1e0>
		sw_buttons|=SWITCH_CAPTURE;
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b86:	81fb      	strh	r3, [r7, #14]
	}
	if((controller.ButtonL) &(controller.ButtonUp)){
 8000b88:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <n64_update_buffer+0x288>)
 8000b8a:	785b      	ldrb	r3, [r3, #1]
 8000b8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <n64_update_buffer+0x288>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <n64_update_buffer+0x204>
		sw_buttons|=SWITCH_SELECT;
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000baa:	81fb      	strh	r3, [r7, #14]
	}
	if((controller.ButtonL) &(controller.ButtonRight)){
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <n64_update_buffer+0x288>)
 8000bae:	785b      	ldrb	r3, [r3, #1]
 8000bb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <n64_update_buffer+0x288>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <n64_update_buffer+0x228>
		sw_buttons|=SWITCH_HOME;
 8000bc8:	89fb      	ldrh	r3, [r7, #14]
 8000bca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bce:	81fb      	strh	r3, [r7, #14]
	}

	buffer[0] = sw_buttons&0xff;
 8000bd0:	89fb      	ldrh	r3, [r7, #14]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	701a      	strb	r2, [r3, #0]
	buffer[1] = (sw_buttons>>8)&0xff;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	89fa      	ldrh	r2, [r7, #14]
 8000bde:	0a12      	lsrs	r2, r2, #8
 8000be0:	b292      	uxth	r2, r2
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	701a      	strb	r2, [r3, #0]
	buffer[2] = hat;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3302      	adds	r3, #2
 8000bea:	7aba      	ldrb	r2, [r7, #10]
 8000bec:	701a      	strb	r2, [r3, #0]
	buffer[3] = (uint8_t)(((int8_t) controller.AxisX)+128);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3303      	adds	r3, #3
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <n64_update_buffer+0x288>)
 8000bf4:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	3a80      	subs	r2, #128	; 0x80
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	701a      	strb	r2, [r3, #0]
	buffer[4] = (uint8_t)(((int8_t) controller.AxisY)+128);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3304      	adds	r3, #4
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <n64_update_buffer+0x288>)
 8000c06:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	3a80      	subs	r2, #128	; 0x80
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	701a      	strb	r2, [r3, #0]
	buffer[5] = RightX;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3305      	adds	r3, #5
 8000c16:	7b7a      	ldrb	r2, [r7, #13]
 8000c18:	701a      	strb	r2, [r3, #0]
	buffer[6] = RightY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3306      	adds	r3, #6
 8000c1e:	7b3a      	ldrb	r2, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]

}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000584 	.word	0x20000584

08000c34 <USBD_HID_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t * length)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2212      	movs	r2, #18
 8000c44:	801a      	strh	r2, [r3, #0]
  return (uint8_t *) USBD_DeviceDesc;
 8000c46:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <USBD_HID_DeviceDescriptor+0x20>)
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	20000030 	.word	0x20000030

08000c58 <USBD_HID_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed,
                                      uint16_t * length)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2204      	movs	r2, #4
 8000c68:	801a      	strh	r2, [r3, #0]
  return (uint8_t *) USBD_LangIDDesc;
 8000c6a:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	20000044 	.word	0x20000044

08000c7c <USBD_HID_ProductStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed,
                                       uint16_t * length)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d105      	bne.n	8000c9a <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_PRODUCT_HS_STRING, USBD_StrDesc,
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <USBD_HID_ProductStrDescriptor+0x34>)
 8000c92:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <USBD_HID_ProductStrDescriptor+0x38>)
 8000c94:	f006 fe91 	bl	80079ba <USBD_GetString>
 8000c98:	e004      	b.n	8000ca4 <USBD_HID_ProductStrDescriptor+0x28>
                   length);
  }
  else
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_PRODUCT_FS_STRING, USBD_StrDesc,
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	4904      	ldr	r1, [pc, #16]	; (8000cb0 <USBD_HID_ProductStrDescriptor+0x34>)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <USBD_HID_ProductStrDescriptor+0x38>)
 8000ca0:	f006 fe8b 	bl	80079ba <USBD_GetString>
                   length);
  }
  return USBD_StrDesc;
 8000ca4:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <USBD_HID_ProductStrDescriptor+0x34>)
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000588 	.word	0x20000588
 8000cb4:	08007d68 	.word	0x08007d68

08000cb8 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed,
                                            uint16_t * length)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *) (uint8_t *) USBD_MANUFACTURER_STRING, USBD_StrDesc,
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4904      	ldr	r1, [pc, #16]	; (8000cd8 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <USBD_HID_ManufacturerStrDescriptor+0x24>)
 8000cca:	f006 fe76 	bl	80079ba <USBD_GetString>
                 length);
  return USBD_StrDesc;
 8000cce:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000588 	.word	0x20000588
 8000cdc:	08007d7c 	.word	0x08007d7c

08000ce0 <USBD_HID_SerialStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed,
                                      uint16_t * length)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	221a      	movs	r2, #26
 8000cf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000cf2:	f000 f843 	bl	8000d7c <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8000cf6:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <USBD_HID_SerialStrDescriptor+0x20>)
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000048 	.word	0x20000048

08000d04 <USBD_HID_ConfigStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed,
                                      uint16_t * length)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_CONFIGURATION_HS_STRING,
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	4907      	ldr	r1, [pc, #28]	; (8000d38 <USBD_HID_ConfigStrDescriptor+0x34>)
 8000d1a:	4808      	ldr	r0, [pc, #32]	; (8000d3c <USBD_HID_ConfigStrDescriptor+0x38>)
 8000d1c:	f006 fe4d 	bl	80079ba <USBD_GetString>
 8000d20:	e004      	b.n	8000d2c <USBD_HID_ConfigStrDescriptor+0x28>
                   USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_CONFIGURATION_FS_STRING,
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	4904      	ldr	r1, [pc, #16]	; (8000d38 <USBD_HID_ConfigStrDescriptor+0x34>)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <USBD_HID_ConfigStrDescriptor+0x38>)
 8000d28:	f006 fe47 	bl	80079ba <USBD_GetString>
                   USBD_StrDesc, length);
  }
  return USBD_StrDesc;
 8000d2c:	4b02      	ldr	r3, [pc, #8]	; (8000d38 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000588 	.word	0x20000588
 8000d3c:	08007d8c 	.word	0x08007d8c

08000d40 <USBD_HID_InterfaceStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed,
                                         uint16_t * length)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d105      	bne.n	8000d5e <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_INTERFACE_HS_STRING,
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8000d56:	4808      	ldr	r0, [pc, #32]	; (8000d78 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8000d58:	f006 fe2f 	bl	80079ba <USBD_GetString>
 8000d5c:	e004      	b.n	8000d68 <USBD_HID_InterfaceStrDescriptor+0x28>
                   USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *) (uint8_t *) USBD_INTERFACE_FS_STRING,
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	4904      	ldr	r1, [pc, #16]	; (8000d74 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8000d64:	f006 fe29 	bl	80079ba <USBD_GetString>
                   USBD_StrDesc, length);
  }
  return USBD_StrDesc;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000588 	.word	0x20000588
 8000d78:	08007d98 	.word	0x08007d98

08000d7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <Get_SerialNum+0x44>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <Get_SerialNum+0x48>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <Get_SerialNum+0x4c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d009      	beq.n	8000db6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000da2:	2208      	movs	r2, #8
 8000da4:	4909      	ldr	r1, [pc, #36]	; (8000dcc <Get_SerialNum+0x50>)
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 f814 	bl	8000dd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000dac:	2204      	movs	r2, #4
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <Get_SerialNum+0x54>)
 8000db0:	68b8      	ldr	r0, [r7, #8]
 8000db2:	f000 f80f 	bl	8000dd4 <IntToUnicode>
  }
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	1fff7a10 	.word	0x1fff7a10
 8000dc4:	1fff7a14 	.word	0x1fff7a14
 8000dc8:	1fff7a18 	.word	0x1fff7a18
 8000dcc:	2000004a 	.word	0x2000004a
 8000dd0:	2000005a 	.word	0x2000005a

08000dd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	4613      	mov	r3, r2
 8000de0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]
 8000dea:	e027      	b.n	8000e3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	0f1b      	lsrs	r3, r3, #28
 8000df0:	2b09      	cmp	r3, #9
 8000df2:	d80b      	bhi.n	8000e0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	0f12      	lsrs	r2, r2, #28
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	3230      	adds	r2, #48	; 0x30
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e00a      	b.n	8000e22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	461a      	mov	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	4413      	add	r3, r2
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	0f12      	lsrs	r2, r2, #28
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	3237      	adds	r2, #55	; 0x37
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	4413      	add	r3, r2
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	75fb      	strb	r3, [r7, #23]
 8000e3c:	7dfa      	ldrb	r2, [r7, #23]
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d3d3      	bcc.n	8000dec <IntToUnicode+0x18>
  }
}
 8000e44:	bf00      	nop
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e56:	e003      	b.n	8000e60 <LoopCopyDataInit>

08000e58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e5e:	3104      	adds	r1, #4

08000e60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e68:	d3f6      	bcc.n	8000e58 <CopyDataInit>
  ldr  r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e6c:	e002      	b.n	8000e74 <LoopFillZerobss>

08000e6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e70:	f842 3b04 	str.w	r3, [r2], #4

08000e74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e78:	d3f9      	bcc.n	8000e6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e7a:	f000 f959 	bl	8001130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f006 fe5f 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb31 	bl	80004e8 <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e8c:	08007dd0 	.word	0x08007dd0
  ldr  r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e94:	200001a8 	.word	0x200001a8
  ldr  r2, =_sbss
 8000e98:	200001a8 	.word	0x200001a8
  ldr  r3, = _ebss
 8000e9c:	20000ba4 	.word	0x20000ba4

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_UART_MspInit>:
  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_UART_MspInit+0x84>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d12c      	bne.n	8000f20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
	/* Peripheral clock enable */
	__HAL_RCC_USART1_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <HAL_UART_MspInit+0x88>)
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_UART_MspInit+0x88>)
 8000ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_UART_MspInit+0x88>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4a11      	ldr	r2, [pc, #68]	; (8000f2c <HAL_UART_MspInit+0x88>)
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_UART_MspInit+0x88>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_UART_MspInit+0x88>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
	/**USART1 GPIO Configuration
	PA9     ------> USART1_TX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;//GPIO_MODE_AF_OD;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f10:	2307      	movs	r3, #7
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_UART_MspInit+0x8c>)
 8000f1c:	f001 f880 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	; 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000

08000f34 <HAL_MspInit>:

}


void HAL_MspInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000fd4:	b598      	push	{r3, r4, r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  static __IO uint32_t counter = 0;
  HAL_IncTick();
 8000fd8:	f000 fed0 	bl	8001d7c <HAL_IncTick>

  /* check Joystick state every polling interval (10ms) */
  if (counter++ == USBD_HID_GetPollingInterval(&USBD_Device))
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <SysTick_Handler+0x38>)
 8000fde:	681c      	ldr	r4, [r3, #0]
 8000fe0:	1c63      	adds	r3, r4, #1
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Handler+0x38>)
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <SysTick_Handler+0x3c>)
 8000fe8:	f000 fdee 	bl	8001bc8 <USBD_HID_GetPollingInterval>
 8000fec:	4603      	mov	r3, r0
 8000fee:	429c      	cmp	r4, r3
 8000ff0:	d10a      	bne.n	8001008 <SysTick_Handler+0x34>
  {
    GetPointerData(HID_Buffer);
 8000ff2:	4808      	ldr	r0, [pc, #32]	; (8001014 <SysTick_Handler+0x40>)
 8000ff4:	f000 f873 	bl	80010de <GetPointerData>

    /* send data though IN endpoint */
    //if ((HID_Buffer[0] != 0) || (HID_Buffer[1] != 0)|| (HID_Buffer[2] != 0))
    //{
    USBD_HID_SendReport(&USBD_Device, HID_Buffer, 8);
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	4906      	ldr	r1, [pc, #24]	; (8001014 <SysTick_Handler+0x40>)
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <SysTick_Handler+0x3c>)
 8000ffe:	f000 fdb3 	bl	8001b68 <USBD_HID_SendReport>
    //}
    counter = 0;
 8001002:	4b02      	ldr	r3, [pc, #8]	; (800100c <SysTick_Handler+0x38>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
  }
}
 8001008:	bf00      	nop
 800100a:	bd98      	pop	{r3, r4, r7, pc}
 800100c:	20000248 	.word	0x20000248
 8001010:	20000260 	.word	0x20000260
 8001014:	20000688 	.word	0x20000688

08001018 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <OTG_FS_IRQHandler+0x10>)
 800101e:	f001 fae9 	bl	80025f4 <HAL_PCD_IRQHandler>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000690 	.word	0x20000690

0800102c <OTG_FS_WKUP_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_WKUP_IRQHandler(void)
#else
void OTG_HS_WKUP_IRQHandler(void)
#endif
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  if ((&hpcd)->Init.low_power_enable)
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <OTG_FS_WKUP_IRQHandler+0x90>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d038      	beq.n	80010aa <OTG_FS_WKUP_IRQHandler+0x7e>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &=
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <OTG_FS_WKUP_IRQHandler+0x94>)
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <OTG_FS_WKUP_IRQHandler+0x94>)
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	f023 0306 	bic.w	r3, r3, #6
 8001042:	6113      	str	r3, [r2, #16]

    /* Configures system clock after wake-up from STOP: enable HSE, PLL and
     * select PLL as system clock source (HSE and PLL are disabled in STOP
     * mode) */

    __HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104e:	6013      	str	r3, [r2, #0]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001050:	bf00      	nop
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f9      	beq.n	8001052 <OTG_FS_WKUP_IRQHandler+0x26>
    {
    }

    /* Enable the main PLL. */
    __HAL_RCC_PLL_ENABLE();
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <OTG_FS_WKUP_IRQHandler+0x9c>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001064:	bf00      	nop
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f9      	beq.n	8001066 <OTG_FS_WKUP_IRQHandler+0x3a>
    {
    }

    /* Select PLL as SYSCLK */
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_SYSCLKSOURCE_PLLCLK);
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f023 0303 	bic.w	r3, r3, #3
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6093      	str	r3, [r2, #8]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001082:	bf00      	nop
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <OTG_FS_WKUP_IRQHandler+0x98>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d1f9      	bne.n	8001084 <OTG_FS_WKUP_IRQHandler+0x58>
    {
    }

    /* ungate PHY clock */
    __HAL_PCD_UNGATE_PHYCLOCK((&hpcd));
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <OTG_FS_WKUP_IRQHandler+0x90>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001098:	461a      	mov	r2, r3
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <OTG_FS_WKUP_IRQHandler+0x90>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	6013      	str	r3, [r2, #0]
  }
#ifdef USE_USB_FS
  /* Clear EXTI pending Bit */
  __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <OTG_FS_WKUP_IRQHandler+0xa0>)
 80010ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010b0:	615a      	str	r2, [r3, #20]
#else
  /* Clear EXTI pending Bit */
  __HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG();
#endif

}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000690 	.word	0x20000690
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	40023800 	.word	0x40023800
 80010c8:	42470060 	.word	0x42470060
 80010cc:	40013c00 	.word	0x40013c00

080010d0 <EXTI4_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON0_PIN);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f001 f925 	bl	8002324 <HAL_GPIO_EXTI_IRQHandler>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}

080010de <GetPointerData>:
  * @brief  Gets Pointer Data.
  * @param  pbuf: Pointer to report
  * @retval None
  */
static void GetPointerData(uint8_t * pbuf)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	uint8_t  VendorSpec;
} USB_JoystickReport_Input_t;
	 * */


  pbuf[0] = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
  pbuf[1] = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3301      	adds	r3, #1
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
  pbuf[2] = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3302      	adds	r3, #2
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
  pbuf[3] = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3303      	adds	r3, #3
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
  pbuf[4] = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3304      	adds	r3, #4
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
  pbuf[5] = 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3305      	adds	r3, #5
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
  pbuf[6] = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3306      	adds	r3, #6
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]

  //n64_update();
  n64_update_buffer(pbuf);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fc43 	bl	80009a8 <n64_update_buffer>
  n64schedule_update();
 8001122:	f7ff fb97 	bl	8000854 <n64schedule_update>

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001134:	4a16      	ldr	r2, [pc, #88]	; (8001190 <SystemInit+0x60>)
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <SystemInit+0x60>)
 8001138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <SystemInit+0x64>)
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <SystemInit+0x64>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <SystemInit+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <SystemInit+0x64>)
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <SystemInit+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <SystemInit+0x64>)
 8001168:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <SystemInit+0x68>)
 800116a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800116c:	4a09      	ldr	r2, [pc, #36]	; (8001194 <SystemInit+0x64>)
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <SystemInit+0x64>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001176:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SystemInit+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SystemInit+0x60>)
 8001180:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001184:	609a      	str	r2, [r3, #8]
#endif
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	40023800 	.word	0x40023800
 8001198:	24003010 	.word	0x24003010

0800119c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef * hpcd)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (hpcd->Instance == USB_OTG_FS)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011ac:	d16b      	bne.n	8001286 <HAL_PCD_MspInit+0xea>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4a37      	ldr	r2, [pc, #220]	; (8001290 <HAL_PCD_MspInit+0xf4>)
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <HAL_PCD_MspInit+0xf4>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <HAL_PCD_MspInit+0xf4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80011ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011dc:	230a      	movs	r3, #10
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	482b      	ldr	r0, [pc, #172]	; (8001294 <HAL_PCD_MspInit+0xf8>)
 80011e8:	f000 ff1a 	bl	8002020 <HAL_GPIO_Init>
    //GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    //GPIO_InitStruct.Pull = GPIO_NOPULL;
    //HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Configure ID pin */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f2:	2312      	movs	r3, #18
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011fa:	230a      	movs	r3, #10
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4823      	ldr	r0, [pc, #140]	; (8001294 <HAL_PCD_MspInit+0xf8>)
 8001206:	f000 ff0b 	bl	8002020 <HAL_GPIO_Init>

    /* Enable USB FS Clock */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800120a:	4a21      	ldr	r2, [pc, #132]	; (8001290 <HAL_PCD_MspInit+0xf4>)
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_PCD_MspInit+0xf4>)
 800120e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6353      	str	r3, [r2, #52]	; 0x34
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_PCD_MspInit+0xf4>)
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_PCD_MspInit+0xf4>)
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_PCD_MspInit+0xf4>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

    /* Set USBFS Interrupt priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2043      	movs	r0, #67	; 0x43
 8001238:	f000 febb 	bl	8001fb2 <HAL_NVIC_SetPriority>

    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800123c:	2043      	movs	r0, #67	; 0x43
 800123e:	f000 fed4 	bl	8001fea <HAL_NVIC_EnableIRQ>

    if (hpcd->Init.low_power_enable == 1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d11d      	bne.n	8001286 <HAL_PCD_MspInit+0xea>
    {
      /* Enable EXTI Line 18 for USB wakeup */
      __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <HAL_PCD_MspInit+0xfc>)
 800124c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001250:	615a      	str	r2, [r3, #20]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_PCD_MspInit+0xfc>)
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_PCD_MspInit+0xfc>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125c:	60d3      	str	r3, [r2, #12]
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_PCD_MspInit+0xfc>)
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_PCD_MspInit+0xfc>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6093      	str	r3, [r2, #8]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT();
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <HAL_PCD_MspInit+0xfc>)
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_PCD_MspInit+0xfc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001274:	6013      	str	r3, [r2, #0]

      /* Set EXTI Wakeup Interrupt priority */
      HAL_NVIC_SetPriority(OTG_FS_WKUP_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	202a      	movs	r0, #42	; 0x2a
 800127c:	f000 fe99 	bl	8001fb2 <HAL_NVIC_SetPriority>

      /* Enable EXTI Interrupt */
      HAL_NVIC_EnableIRQ(OTG_FS_WKUP_IRQn);
 8001280:	202a      	movs	r0, #42	; 0x2a
 8001282:	f000 feb2 	bl	8001fea <HAL_NVIC_EnableIRQ>
//
//    /* Enable USBHS Interrupt */
//    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
//  }
//
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *) hpcd->Setup);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4610      	mov	r0, r2
 80012b4:	f005 fa31 	bl	800671a <USBD_LL_SetupStage>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80012d2:	78fa      	ldrb	r2, [r7, #3]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f005 fa69 	bl	80067c0 <USBD_LL_DataOutStage>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	334c      	adds	r3, #76	; 0x4c
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	4619      	mov	r1, r3
 800131e:	f005 fb00 	bl	8006922 <USBD_LL_DataInStage>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001338:	4618      	mov	r0, r3
 800133a:	f005 fc34 	bl	8006ba6 <USBD_LL_SOF>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800134e:	2301      	movs	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]

  /* Set USB Current Speed */
  switch (hpcd->Init.speed)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <HAL_PCD_ResetCallback+0x1a>
 800135a:	2b02      	cmp	r3, #2
 800135c:	d003      	beq.n	8001366 <HAL_PCD_ResetCallback+0x20>
 800135e:	e005      	b.n	800136c <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
    break;
 8001364:	e005      	b.n	8001372 <HAL_PCD_ResetCallback+0x2c>

  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8001366:	2301      	movs	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
    break;
 800136a:	e002      	b.n	8001372 <HAL_PCD_ResetCallback+0x2c>

  default:
    speed = USBD_SPEED_FULL;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
    break;
 8001370:	bf00      	nop
  }

  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001378:	4618      	mov	r0, r3
 800137a:	f005 fb84 	bl	8006a86 <USBD_LL_Reset>

  USBD_LL_SetSpeed(hpcd->pData, speed);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f005 fbce 	bl	8006b2a <USBD_LL_SetSpeed>
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
//    __HAL_PCD_GATE_PHYCLOCK(hpcd);
//#endif
//  }
//  else
//  {
    USBD_LL_Suspend(hpcd->pData);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80013a6:	4618      	mov	r0, r3
 80013a8:	f005 fbcf 	bl	8006b4a <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6013      	str	r3, [r2, #0]

    /* Enter in STOP mode */
    if (hpcd->Init.low_power_enable)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_PCD_SuspendCallback+0x42>
    {
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
      SCB->SCR |=
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <HAL_PCD_SuspendCallback+0x4c>)
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_PCD_SuspendCallback+0x4c>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	f043 0306 	orr.w	r3, r3, #6
 80013d8:	6113      	str	r3, [r2, #16]
        (uint32_t) ((uint32_t)
                    (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
//  }
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((hpcd->Init.low_power_enable) && (remotewakeupon == 0))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <HAL_PCD_ResumeCallback+0x28>
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_PCD_ResumeCallback+0x5c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <HAL_PCD_ResumeCallback+0x28>
  {
    SystemClockConfig_STOP();
 8001400:	f000 f976 	bl	80016f0 <SystemClockConfig_STOP>

    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &=
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_PCD_ResumeCallback+0x60>)
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_PCD_ResumeCallback+0x60>)
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	f023 0306 	bic.w	r3, r3, #6
 800140e:	6113      	str	r3, [r2, #16]
      (uint32_t) ~
      ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
  }
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	6013      	str	r3, [r2, #0]
  USBD_LL_Resume(hpcd->pData);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001430:	4618      	mov	r0, r3
 8001432:	f005 fba0 	bl	8006b76 <USBD_LL_Resume>
  remotewakeupon = 0;
 8001436:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_PCD_ResumeCallback+0x5c>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000024c 	.word	0x2000024c
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f005 fbf1 	bl	8006c4a <USBD_LL_IsoOUTIncomplete>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f005 fbad 	bl	8006be6 <USBD_LL_IsoINIncomplete>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80014a2:	4618      	mov	r0, r3
 80014a4:	f005 fc03 	bl	8006cae <USBD_LL_DevConnected>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fc00 	bl	8006cc4 <USBD_LL_DevDisconnected>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef * pdev)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USB_FS
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <USBD_LL_Init+0x88>)
 80014d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014da:	601a      	str	r2, [r3, #0]
  hpcd.Init.dev_endpoints = 4;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <USBD_LL_Init+0x88>)
 80014de:	2204      	movs	r2, #4
 80014e0:	605a      	str	r2, [r3, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <USBD_LL_Init+0x88>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd.Init.dma_enable = 0;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <USBD_LL_Init+0x88>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  hpcd.Init.low_power_enable = 0;
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <USBD_LL_Init+0x88>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <USBD_LL_Init+0x88>)
 80014f6:	2202      	movs	r2, #2
 80014f8:	619a      	str	r2, [r3, #24]
  hpcd.Init.Sof_enable = 0;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <USBD_LL_Init+0x88>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <USBD_LL_Init+0x88>)
 8001502:	2202      	movs	r2, #2
 8001504:	60da      	str	r2, [r3, #12]
  hpcd.Init.vbus_sensing_enable = DISABLE;//1;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <USBD_LL_Init+0x88>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <USBD_LL_Init+0x88>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <USBD_LL_Init+0x88>)
 8001518:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  /* Initialize LL Driver */
  if (HAL_PCD_Init(&hpcd) != HAL_OK)
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <USBD_LL_Init+0x88>)
 800151e:	f000 ff19 	bl	8002354 <HAL_PCD_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <USBD_LL_Init+0x60>
  {
    Error_Handler();
 8001528:	f7ff f8b9 	bl	800069e <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd, 0x80);
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	4809      	ldr	r0, [pc, #36]	; (8001554 <USBD_LL_Init+0x88>)
 8001530:	f002 f983 	bl	800383a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd, 0, 0x40);
 8001534:	2240      	movs	r2, #64	; 0x40
 8001536:	2100      	movs	r1, #0
 8001538:	4806      	ldr	r0, [pc, #24]	; (8001554 <USBD_LL_Init+0x88>)
 800153a:	f002 f937 	bl	80037ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd, 1, 0x80);
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	2101      	movs	r1, #1
 8001542:	4804      	ldr	r0, [pc, #16]	; (8001554 <USBD_LL_Init+0x88>)
 8001544:	f002 f932 	bl	80037ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetRxFiFo(&hpcd, 0x200);
  HAL_PCDEx_SetTxFiFo(&hpcd, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd, 1, 0x100);
#endif

  return USBD_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000690 	.word	0x20000690

08001558 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001566:	4618      	mov	r0, r3
 8001568:	f001 f811 	bl	800258e <HAL_PCD_Start>
  return USBD_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <USBD_LL_OpenEP>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type, uint16_t ep_mps)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	4608      	mov	r0, r1
 8001580:	4611      	mov	r1, r2
 8001582:	461a      	mov	r2, r3
 8001584:	4603      	mov	r3, r0
 8001586:	70fb      	strb	r3, [r7, #3]
 8001588:	460b      	mov	r3, r1
 800158a:	70bb      	strb	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8001596:	78bb      	ldrb	r3, [r7, #2]
 8001598:	883a      	ldrh	r2, [r7, #0]
 800159a:	78f9      	ldrb	r1, [r7, #3]
 800159c:	f001 fcfc 	bl	8002f98 <HAL_PCD_EP_Open>

  return USBD_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fd51 	bl	8003068 <HAL_PCD_EP_Close>
  return USBD_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fe1d 	bl	8003226 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <USBD_LL_ClearStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev,
                                        uint8_t ep_addr)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f001 fe6e 	bl	80032ee <HAL_PCD_EP_ClrStall>
  return USBD_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800162e:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8001630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001634:	2b00      	cmp	r3, #0
 8001636:	da0b      	bge.n	8001650 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800163e:	68f9      	ldr	r1, [r7, #12]
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	333e      	adds	r3, #62	; 0x3e
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	e00b      	b.n	8001668 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001656:	68f9      	ldr	r1, [r7, #12]
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8001666:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <USBD_LL_SetUSBAddress>:
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev,
                                         uint8_t dev_addr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f001 fc5f 	bl	8002f4e <HAL_PCD_SetAddress>
  return USBD_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <USBD_LL_Transmit>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev,
                                    uint8_t ep_addr,
                                    uint8_t * pbuf, uint32_t size)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	460b      	mov	r3, r1
 80016a8:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80016b0:	7af9      	ldrb	r1, [r7, #11]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	f001 fd6c 	bl	8003192 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <USBD_LL_PrepareReceive>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev,
                                          uint8_t ep_addr,
                                          uint8_t * pbuf, uint32_t size)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	460b      	mov	r3, r1
 80016d2:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80016da:	7af9      	ldrb	r1, [r7, #11]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	f001 fd0c 	bl	80030fc <HAL_PCD_EP_Receive>
  return USBD_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <SystemClockConfig_STOP>:
  * @brief  Configures system clock after wakeup from STOP mode.
  * @param  None
  * @retval None
  */
static void SystemClockConfig_STOP(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* Configures system clock after wake-up from STOP: enable HSE, PLL and
   * select PLL as system clock source (HSE and PLL are disabled in STOP mode)
   */

  __HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
 80016f4:	4a15      	ldr	r2, [pc, #84]	; (800174c <SystemClockConfig_STOP+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <SystemClockConfig_STOP+0x5c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001700:	bf00      	nop
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <SystemClockConfig_STOP+0x5c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f9      	beq.n	8001702 <SystemClockConfig_STOP+0x12>
  {
  }

  /* Enable the main PLL. */
  __HAL_RCC_PLL_ENABLE();
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <SystemClockConfig_STOP+0x60>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001714:	bf00      	nop
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <SystemClockConfig_STOP+0x5c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f9      	beq.n	8001716 <SystemClockConfig_STOP+0x26>
  {
  }

  /* Select PLL as SYSCLK */
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_SYSCLKSOURCE_PLLCLK);
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <SystemClockConfig_STOP+0x5c>)
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <SystemClockConfig_STOP+0x5c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 0303 	bic.w	r3, r3, #3
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6093      	str	r3, [r2, #8]

  /* Wait till system clock switch to PLL */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001732:	bf00      	nop
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <SystemClockConfig_STOP+0x5c>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d1f9      	bne.n	8001734 <SystemClockConfig_STOP+0x44>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	42470060 	.word	0x42470060

08001754 <HAL_GPIO_EXTI_Callback>:
  *         Handle remote-wakeup through key button
  * @param  GPIO_Pin
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == KEY_BUTTON0_PIN)
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d13f      	bne.n	80017e4 <HAL_GPIO_EXTI_Callback+0x90>
  {
    if ((((USBD_HandleTypeDef *) hpcd.pData)->dev_remote_wakeup == 1) &&
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_GPIO_EXTI_Callback+0x98>)
 8001766:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800176a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800176e:	2b01      	cmp	r3, #1
 8001770:	d138      	bne.n	80017e4 <HAL_GPIO_EXTI_Callback+0x90>
        (((USBD_HandleTypeDef *) hpcd.pData)->dev_state ==
 8001772:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_GPIO_EXTI_Callback+0x98>)
 8001774:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800177c:	b2db      	uxtb	r3, r3
    if ((((USBD_HandleTypeDef *) hpcd.pData)->dev_remote_wakeup == 1) &&
 800177e:	2b04      	cmp	r3, #4
 8001780:	d130      	bne.n	80017e4 <HAL_GPIO_EXTI_Callback+0x90>
         USBD_STATE_SUSPENDED))
    {
      if ((&hpcd)->Init.low_power_enable)
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_GPIO_EXTI_Callback+0x98>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_GPIO_EXTI_Callback+0x46>
      {
        /* Reset SLEEPDEEP bit of Cortex System Control Register */
        SCB->SCR &=
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f023 0306 	bic.w	r3, r3, #6
 8001794:	6113      	str	r3, [r2, #16]
          (uint32_t) ~
          ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));

        SystemClockConfig_STOP();
 8001796:	f7ff ffab 	bl	80016f0 <SystemClockConfig_STOP>
      }

      /* Ungate PHY clock */
      __HAL_PCD_UNGATE_PHYCLOCK((&hpcd));
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_GPIO_EXTI_Callback+0x98>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_GPIO_EXTI_Callback+0x98>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]

      /* Activate Remote wakeup */
      HAL_PCD_ActivateRemoteWakeup((&hpcd));
 80017b4:	480d      	ldr	r0, [pc, #52]	; (80017ec <HAL_GPIO_EXTI_Callback+0x98>)
 80017b6:	f001 fe21 	bl	80033fc <HAL_PCD_ActivateRemoteWakeup>

      /* Remote wakeup delay */
      HAL_Delay(10);
 80017ba:	200a      	movs	r0, #10
 80017bc:	f000 fafe 	bl	8001dbc <HAL_Delay>

      /* Disable Remote wakeup */
      HAL_PCD_DeActivateRemoteWakeup((&hpcd));
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <HAL_GPIO_EXTI_Callback+0x98>)
 80017c2:	f001 fe29 	bl	8003418 <HAL_PCD_DeActivateRemoteWakeup>

      /* change state to configured */
      ((USBD_HandleTypeDef *) hpcd.pData)->dev_state = USBD_STATE_CONFIGURED;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_GPIO_EXTI_Callback+0x98>)
 80017c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80017cc:	2203      	movs	r2, #3
 80017ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

      /* Change remote_wakeup feature to 0 */
      ((USBD_HandleTypeDef *) hpcd.pData)->dev_remote_wakeup = 0;
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_GPIO_EXTI_Callback+0x98>)
 80017d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80017d8:	2200      	movs	r2, #0
 80017da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
      remotewakeupon = 1;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_GPIO_EXTI_Callback+0xa0>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000690 	.word	0x20000690
 80017f0:	e000ed00 	.word	0xe000ed00
 80017f4:	2000024c 	.word	0x2000024c

080017f8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8001804:	2010      	movs	r0, #16
 8001806:	f006 f9bf 	bl	8007b88 <malloc>
 800180a:	4603      	mov	r3, r0
 800180c:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d109      	bne.n	8001828 <USBD_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	32b0      	adds	r2, #176	; 0xb0
 800181e:	2100      	movs	r1, #0
 8001820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8001824:	2302      	movs	r3, #2
 8001826:	e048      	b.n	80018ba <USBD_HID_Init+0xc2>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	32b0      	adds	r2, #176	; 0xb0
 8001832:	68f9      	ldr	r1, [r7, #12]
 8001834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	32b0      	adds	r2, #176	; 0xb0
 8001842:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7c1b      	ldrb	r3, [r3, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10d      	bne.n	8001870 <USBD_HID_Init+0x78>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <USBD_HID_Init+0xcc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	f003 020f 	and.w	r2, r3, #15
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	3326      	adds	r3, #38	; 0x26
 800186a:	2207      	movs	r2, #7
 800186c:	801a      	strh	r2, [r3, #0]
 800186e:	e00c      	b.n	800188a <USBD_HID_Init+0x92>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <USBD_HID_Init+0xcc>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f003 020f 	and.w	r2, r3, #15
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	3326      	adds	r3, #38	; 0x26
 8001886:	220a      	movs	r2, #10
 8001888:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <USBD_HID_Init+0xcc>)
 800188c:	7819      	ldrb	r1, [r3, #0]
 800188e:	2340      	movs	r3, #64	; 0x40
 8001890:	2203      	movs	r2, #3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fe6f 	bl	8001576 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <USBD_HID_Init+0xcc>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f003 020f 	and.w	r2, r3, #15
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	3324      	adds	r3, #36	; 0x24
 80018ae:	2201      	movs	r2, #1
 80018b0:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000013a 	.word	0x2000013a

080018c8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <USBD_HID_DeInit+0x8c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fe65 	bl	80015aa <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <USBD_HID_DeInit+0x8c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f003 020f 	and.w	r2, r3, #15
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	3324      	adds	r3, #36	; 0x24
 80018f6:	2200      	movs	r2, #0
 80018f8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <USBD_HID_DeInit+0x8c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	f003 020f 	and.w	r2, r3, #15
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	3326      	adds	r3, #38	; 0x26
 8001910:	2200      	movs	r2, #0
 8001912:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	32b0      	adds	r2, #176	; 0xb0
 800191e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d011      	beq.n	800194a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	32b0      	adds	r2, #176	; 0xb0
 8001930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001934:	4618      	mov	r0, r3
 8001936:	f006 f92f 	bl	8007b98 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	32b0      	adds	r2, #176	; 0xb0
 8001944:	2100      	movs	r1, #0
 8001946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000013a 	.word	0x2000013a

08001958 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	32b0      	adds	r2, #176	; 0xb0
 800196c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001970:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8001980:	2303      	movs	r3, #3
 8001982:	e0e8      	b.n	8001b56 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800198c:	2b00      	cmp	r3, #0
 800198e:	d046      	beq.n	8001a1e <USBD_HID_Setup+0xc6>
 8001990:	2b20      	cmp	r3, #32
 8001992:	f040 80d8 	bne.w	8001b46 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	3b02      	subs	r3, #2
 800199c:	2b09      	cmp	r3, #9
 800199e:	d836      	bhi.n	8001a0e <USBD_HID_Setup+0xb6>
 80019a0:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <USBD_HID_Setup+0x50>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019ff 	.word	0x080019ff
 80019ac:	080019df 	.word	0x080019df
 80019b0:	08001a0f 	.word	0x08001a0f
 80019b4:	08001a0f 	.word	0x08001a0f
 80019b8:	08001a0f 	.word	0x08001a0f
 80019bc:	08001a0f 	.word	0x08001a0f
 80019c0:	08001a0f 	.word	0x08001a0f
 80019c4:	08001a0f 	.word	0x08001a0f
 80019c8:	080019ed 	.word	0x080019ed
 80019cc:	080019d1 	.word	0x080019d1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	885b      	ldrh	r3, [r3, #2]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	601a      	str	r2, [r3, #0]
          break;
 80019dc:	e01e      	b.n	8001a1c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2201      	movs	r2, #1
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f006 f848 	bl	8007a7a <USBD_CtlSendData>
          break;
 80019ea:	e017      	b.n	8001a1c <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	885b      	ldrh	r3, [r3, #2]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
          break;
 80019fc:	e00e      	b.n	8001a1c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2201      	movs	r2, #1
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f006 f837 	bl	8007a7a <USBD_CtlSendData>
          break;
 8001a0c:	e006      	b.n	8001a1c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8001a0e:	6839      	ldr	r1, [r7, #0]
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f005 ffc1 	bl	8007998 <USBD_CtlError>
          ret = USBD_FAIL;
 8001a16:	2303      	movs	r3, #3
 8001a18:	75fb      	strb	r3, [r7, #23]
          break;
 8001a1a:	bf00      	nop
      }
      break;
 8001a1c:	e09a      	b.n	8001b54 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	785b      	ldrb	r3, [r3, #1]
 8001a22:	2b0b      	cmp	r3, #11
 8001a24:	f200 8086 	bhi.w	8001b34 <USBD_HID_Setup+0x1dc>
 8001a28:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <USBD_HID_Setup+0xd8>)
 8001a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2e:	bf00      	nop
 8001a30:	08001a61 	.word	0x08001a61
 8001a34:	08001b43 	.word	0x08001b43
 8001a38:	08001b35 	.word	0x08001b35
 8001a3c:	08001b35 	.word	0x08001b35
 8001a40:	08001b35 	.word	0x08001b35
 8001a44:	08001b35 	.word	0x08001b35
 8001a48:	08001a8b 	.word	0x08001a8b
 8001a4c:	08001b35 	.word	0x08001b35
 8001a50:	08001b35 	.word	0x08001b35
 8001a54:	08001b35 	.word	0x08001b35
 8001a58:	08001ae3 	.word	0x08001ae3
 8001a5c:	08001b0d 	.word	0x08001b0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d107      	bne.n	8001a7c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8001a6c:	f107 030a 	add.w	r3, r7, #10
 8001a70:	2202      	movs	r2, #2
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f006 f800 	bl	8007a7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001a7a:	e063      	b.n	8001b44 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8001a7c:	6839      	ldr	r1, [r7, #0]
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f005 ff8a 	bl	8007998 <USBD_CtlError>
            ret = USBD_FAIL;
 8001a84:	2303      	movs	r3, #3
 8001a86:	75fb      	strb	r3, [r7, #23]
          break;
 8001a88:	e05c      	b.n	8001b44 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	885b      	ldrh	r3, [r3, #2]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2b22      	cmp	r3, #34	; 0x22
 8001a94:	d108      	bne.n	8001aa8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	88db      	ldrh	r3, [r3, #6]
 8001a9a:	2b56      	cmp	r3, #86	; 0x56
 8001a9c:	bf28      	it	cs
 8001a9e:	2356      	movcs	r3, #86	; 0x56
 8001aa0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_JOYPAD_ReportDesc;
 8001aa2:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <USBD_HID_Setup+0x208>)
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	e015      	b.n	8001ad4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	885b      	ldrh	r3, [r3, #2]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b21      	cmp	r3, #33	; 0x21
 8001ab2:	d108      	bne.n	8001ac6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <USBD_HID_Setup+0x20c>)
 8001ab6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	88db      	ldrh	r3, [r3, #6]
 8001abc:	2b09      	cmp	r3, #9
 8001abe:	bf28      	it	cs
 8001ac0:	2309      	movcs	r3, #9
 8001ac2:	82bb      	strh	r3, [r7, #20]
 8001ac4:	e006      	b.n	8001ad4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f005 ff65 	bl	8007998 <USBD_CtlError>
            ret = USBD_FAIL;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	75fb      	strb	r3, [r7, #23]
            break;
 8001ad2:	e037      	b.n	8001b44 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8001ad4:	8abb      	ldrh	r3, [r7, #20]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6939      	ldr	r1, [r7, #16]
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f005 ffcd 	bl	8007a7a <USBD_CtlSendData>
          break;
 8001ae0:	e030      	b.n	8001b44 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d107      	bne.n	8001afe <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3308      	adds	r3, #8
 8001af2:	2201      	movs	r2, #1
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f005 ffbf 	bl	8007a7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001afc:	e022      	b.n	8001b44 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8001afe:	6839      	ldr	r1, [r7, #0]
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f005 ff49 	bl	8007998 <USBD_CtlError>
            ret = USBD_FAIL;
 8001b06:	2303      	movs	r3, #3
 8001b08:	75fb      	strb	r3, [r7, #23]
          break;
 8001b0a:	e01b      	b.n	8001b44 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d106      	bne.n	8001b26 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	885b      	ldrh	r3, [r3, #2]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001b24:	e00e      	b.n	8001b44 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8001b26:	6839      	ldr	r1, [r7, #0]
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f005 ff35 	bl	8007998 <USBD_CtlError>
            ret = USBD_FAIL;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	75fb      	strb	r3, [r7, #23]
          break;
 8001b32:	e007      	b.n	8001b44 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8001b34:	6839      	ldr	r1, [r7, #0]
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f005 ff2e 	bl	8007998 <USBD_CtlError>
          ret = USBD_FAIL;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	75fb      	strb	r3, [r7, #23]
          break;
 8001b40:	e000      	b.n	8001b44 <USBD_HID_Setup+0x1ec>
          break;
 8001b42:	bf00      	nop
      }
      break;
 8001b44:	e006      	b.n	8001b54 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8001b46:	6839      	ldr	r1, [r7, #0]
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f005 ff25 	bl	8007998 <USBD_CtlError>
      ret = USBD_FAIL;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	75fb      	strb	r3, [r7, #23]
      break;
 8001b52:	bf00      	nop
  }

  return (uint8_t)ret;
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200000e4 	.word	0x200000e4
 8001b64:	200000cc 	.word	0x200000cc

08001b68 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	4613      	mov	r3, r2
 8001b74:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	32b0      	adds	r2, #176	; 0xb0
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e014      	b.n	8001bba <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d10d      	bne.n	8001bb8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	7b1b      	ldrb	r3, [r3, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <USBD_HID_SendReport+0x5c>)
 8001bac:	7819      	ldrb	r1, [r3, #0]
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7ff fd71 	bl	800169a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000013a 	.word	0x2000013a

08001bc8 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7c1b      	ldrb	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8001bd8:	2308      	movs	r3, #8
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e001      	b.n	8001be2 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8001bde:	230a      	movs	r3, #10
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8001bf8:	2181      	movs	r1, #129	; 0x81
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <USBD_HID_GetFSCfgDesc+0x30>)
 8001bfc:	f005 f89f 	bl	8006d3e <USBD_GetEpDesc>
 8001c00:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	220a      	movs	r2, #10
 8001c0c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2229      	movs	r2, #41	; 0x29
 8001c12:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200000a0 	.word	0x200000a0

08001c24 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8001c2c:	2181      	movs	r1, #129	; 0x81
 8001c2e:	4809      	ldr	r0, [pc, #36]	; (8001c54 <USBD_HID_GetHSCfgDesc+0x30>)
 8001c30:	f005 f885 	bl	8006d3e <USBD_GetEpDesc>
 8001c34:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2207      	movs	r2, #7
 8001c40:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2229      	movs	r2, #41	; 0x29
 8001c46:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200000a0 	.word	0x200000a0

08001c58 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8001c60:	2181      	movs	r1, #129	; 0x81
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8001c64:	f005 f86b 	bl	8006d3e <USBD_GetEpDesc>
 8001c68:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	220a      	movs	r2, #10
 8001c74:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2229      	movs	r2, #41	; 0x29
 8001c7a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200000a0 	.word	0x200000a0

08001c8c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	32b0      	adds	r2, #176	; 0xb0
 8001ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	220a      	movs	r2, #10
 8001cc4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8001cc6:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	200000d8 	.word	0x200000d8

08001cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <HAL_Init+0x40>)
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_Init+0x40>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_Init+0x40>)
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_Init+0x40>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf4:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <HAL_Init+0x40>)
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_Init+0x40>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f94b 	bl	8001f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d06:	200f      	movs	r0, #15
 8001d08:	f000 f808 	bl	8001d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0c:	f7ff f912 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023c00 	.word	0x40023c00

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_InitTick+0x54>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x58>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f963 	bl	8002006 <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00e      	b.n	8001d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f000 f92b 	bl	8001fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <HAL_InitTick+0x5c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000064 	.word	0x20000064
 8001d74:	20000140 	.word	0x20000140
 8001d78:	2000013c 	.word	0x2000013c

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000140 	.word	0x20000140
 8001da0:	20000b9c 	.word	0x20000b9c

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000b9c 	.word	0x20000b9c

08001dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff ffee 	bl	8001da4 <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d005      	beq.n	8001de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_Delay+0x40>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001de2:	bf00      	nop
 8001de4:	f7ff ffde 	bl	8001da4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad2      	subs	r2, r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d3f7      	bcc.n	8001de4 <HAL_Delay+0x28>
  {
  }
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000140 	.word	0x20000140

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0b      	blt.n	8001e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e76:	4909      	ldr	r1, [pc, #36]	; (8001e9c <__NVIC_EnableIRQ+0x38>)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	79fa      	ldrb	r2, [r7, #7]
 8001e80:	f002 021f 	and.w	r2, r2, #31
 8001e84:	2001      	movs	r0, #1
 8001e86:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000e100 	.word	0xe000e100

08001ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	490d      	ldr	r1, [pc, #52]	; (8001eec <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	4909      	ldr	r1, [pc, #36]	; (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	401a      	ands	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	1e59      	subs	r1, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f68:	d301      	bcc.n	8001f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00f      	b.n	8001f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <SysTick_Config+0x40>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f76:	210f      	movs	r1, #15
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f7ff ff90 	bl	8001ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <SysTick_Config+0x40>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <SysTick_Config+0x40>)
 8001f88:	2207      	movs	r2, #7
 8001f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	e000e010 	.word	0xe000e010

08001f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff2b 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc4:	f7ff ff40 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	6978      	ldr	r0, [r7, #20]
 8001fd0:	f7ff ff90 	bl	8001ef4 <NVIC_EncodePriority>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff5f 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff33 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffa2 	bl	8001f58 <SysTick_Config>
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e159      	b.n	80022f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	429a      	cmp	r2, r3
 8002056:	f040 8148 	bne.w	80022ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d005      	beq.n	8002072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206e:	2b02      	cmp	r3, #2
 8002070:	d130      	bne.n	80020d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 0201 	and.w	r2, r3, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d017      	beq.n	8002110 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d123      	bne.n	8002164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	69b9      	ldr	r1, [r7, #24]
 8002160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a2 	beq.w	80022ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_GPIO_Init+0x2e4>)
 80021ac:	4b55      	ldr	r3, [pc, #340]	; (8002304 <HAL_GPIO_Init+0x2e4>)
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b4:	6453      	str	r3, [r2, #68]	; 0x44
 80021b6:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_GPIO_Init+0x2e4>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c2:	4a51      	ldr	r2, [pc, #324]	; (8002308 <HAL_GPIO_Init+0x2e8>)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	220f      	movs	r2, #15
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a48      	ldr	r2, [pc, #288]	; (800230c <HAL_GPIO_Init+0x2ec>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d019      	beq.n	8002222 <HAL_GPIO_Init+0x202>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_GPIO_Init+0x2f0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0x1fe>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a46      	ldr	r2, [pc, #280]	; (8002314 <HAL_GPIO_Init+0x2f4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00d      	beq.n	800221a <HAL_GPIO_Init+0x1fa>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a45      	ldr	r2, [pc, #276]	; (8002318 <HAL_GPIO_Init+0x2f8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <HAL_GPIO_Init+0x1f6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a44      	ldr	r2, [pc, #272]	; (800231c <HAL_GPIO_Init+0x2fc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_GPIO_Init+0x1f2>
 800220e:	2304      	movs	r3, #4
 8002210:	e008      	b.n	8002224 <HAL_GPIO_Init+0x204>
 8002212:	2307      	movs	r3, #7
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x204>
 8002216:	2303      	movs	r3, #3
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x204>
 800221a:	2302      	movs	r3, #2
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x204>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x204>
 8002222:	2300      	movs	r3, #0
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	f002 0203 	and.w	r2, r2, #3
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002234:	4934      	ldr	r1, [pc, #208]	; (8002308 <HAL_GPIO_Init+0x2e8>)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <HAL_GPIO_Init+0x300>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002266:	4a2e      	ldr	r2, [pc, #184]	; (8002320 <HAL_GPIO_Init+0x300>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800226c:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_GPIO_Init+0x300>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002290:	4a23      	ldr	r2, [pc, #140]	; (8002320 <HAL_GPIO_Init+0x300>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_GPIO_Init+0x300>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ba:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_GPIO_Init+0x300>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_GPIO_Init+0x300>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e4:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_GPIO_Init+0x300>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b0f      	cmp	r3, #15
 80022f4:	f67f aea2 	bls.w	800203c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f8:	bf00      	nop
 80022fa:	3724      	adds	r7, #36	; 0x24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d006      	beq.n	8002348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fa06 	bl	8001754 <HAL_GPIO_EXTI_Callback>
  }
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40013c00 	.word	0x40013c00

08002354 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002356:	b08f      	sub	sp, #60	; 0x3c
 8002358:	af0a      	add	r7, sp, #40	; 0x28
 800235a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e10f      	b.n	8002586 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d106      	bne.n	8002386 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7fe ff0b 	bl	800119c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2203      	movs	r2, #3
 800238a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 fd48 	bl	8004e3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	687e      	ldr	r6, [r7, #4]
 80023b2:	466d      	mov	r5, sp
 80023b4:	f106 0410 	add.w	r4, r6, #16
 80023b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c8:	1d33      	adds	r3, r6, #4
 80023ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023cc:	6838      	ldr	r0, [r7, #0]
 80023ce:	f002 fc1f 	bl	8004c10 <USB_CoreInit>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0d0      	b.n	8002586 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fd36 	bl	8004e5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e04a      	b.n	800248c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	333d      	adds	r3, #61	; 0x3d
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	333c      	adds	r3, #60	; 0x3c
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	b298      	uxth	r0, r3
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3344      	adds	r3, #68	; 0x44
 8002432:	4602      	mov	r2, r0
 8002434:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3340      	adds	r3, #64	; 0x40
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3348      	adds	r3, #72	; 0x48
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	334c      	adds	r3, #76	; 0x4c
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	3354      	adds	r3, #84	; 0x54
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d3af      	bcc.n	80023f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e044      	b.n	8002526 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	3301      	adds	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	d3b5      	bcc.n	800249c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	687e      	ldr	r6, [r7, #4]
 8002538:	466d      	mov	r5, sp
 800253a:	f106 0410 	add.w	r4, r6, #16
 800253e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800254a:	e885 0003 	stmia.w	r5, {r0, r1}
 800254e:	1d33      	adds	r3, r6, #4
 8002550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	f002 fcce 	bl	8004ef4 <USB_DevInit>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e00d      	b.n	8002586 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fe61 	bl	8006246 <USB_DevDisconnect>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800258e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_PCD_Start+0x1c>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e020      	b.n	80025ec <HAL_PCD_Start+0x5e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d109      	bne.n	80025ce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d005      	beq.n	80025ce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f002 fc20 	bl	8004e18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 fe0f 	bl	8006200 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b08d      	sub	sp, #52	; 0x34
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fed1 	bl	80063b2 <USB_GetMode>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 8498 	bne.w	8002f48 <HAL_PCD_IRQHandler+0x954>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f003 fe35 	bl	800628c <USB_ReadInterrupts>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 848e 	beq.w	8002f46 <HAL_PCD_IRQHandler+0x952>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fe22 	bl	800628c <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d107      	bne.n	8002662 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	6952      	ldr	r2, [r2, #20]
 800265c:	f002 0202 	and.w	r2, r2, #2
 8002660:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f003 fe10 	bl	800628c <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b10      	cmp	r3, #16
 8002674:	d161      	bne.n	800273a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	6992      	ldr	r2, [r2, #24]
 8002680:	f022 0210 	bic.w	r2, r2, #16
 8002684:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f003 020f 	and.w	r2, r3, #15
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	0c5b      	lsrs	r3, r3, #17
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d124      	bne.n	80026fc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d035      	beq.n	800272a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	6a38      	ldr	r0, [r7, #32]
 80026d2:	f003 fc3a 	bl	8005f4a <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e2:	441a      	add	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026f4:	441a      	add	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	621a      	str	r2, [r3, #32]
 80026fa:	e016      	b.n	800272a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	0c5b      	lsrs	r3, r3, #17
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	2b06      	cmp	r3, #6
 8002706:	d110      	bne.n	800272a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800270e:	2208      	movs	r2, #8
 8002710:	4619      	mov	r1, r3
 8002712:	6a38      	ldr	r0, [r7, #32]
 8002714:	f003 fc19 	bl	8005f4a <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002724:	441a      	add	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	6992      	ldr	r2, [r2, #24]
 8002734:	f042 0210 	orr.w	r2, r2, #16
 8002738:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fda4 	bl	800628c <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800274a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800274e:	f040 80a8 	bne.w	80028a2 <HAL_PCD_IRQHandler+0x2ae>
    {
      epnum = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fda9 	bl	80062b2 <USB_ReadDevAllOutEpInterrupt>
 8002760:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002762:	e09a      	b.n	800289a <HAL_PCD_IRQHandler+0x2a6>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 808f 	beq.w	800288e <HAL_PCD_IRQHandler+0x29a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fdcd 	bl	800631a <USB_ReadDevOutEPInterrupt>
 8002780:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00c      	beq.n	80027a6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002798:	461a      	mov	r2, r3
 800279a:	2301      	movs	r3, #1
 800279c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800279e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fed5 	bl	8003550 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00c      	beq.n	80027ca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027bc:	461a      	mov	r2, r3
 80027be:	2308      	movs	r3, #8
 80027c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 ffab 	bl	8003720 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e0:	461a      	mov	r2, r3
 80027e2:	2310      	movs	r3, #16
 80027e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d031      	beq.n	8002854 <HAL_PCD_IRQHandler+0x260>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d10a      	bne.n	8002812 <HAL_PCD_IRQHandler+0x21e>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002802:	461a      	mov	r2, r3
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002810:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	3304      	adds	r3, #4
 8002826:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	78db      	ldrb	r3, [r3, #3]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d108      	bne.n	8002842 <HAL_PCD_IRQHandler+0x24e>
            {
              ep->is_iso_incomplete = 0U;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2200      	movs	r2, #0
 8002834:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	b2db      	uxtb	r3, r3
 800283a:	4619      	mov	r1, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7fe fe05 	bl	800144c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284e:	461a      	mov	r2, r3
 8002850:	2302      	movs	r3, #2
 8002852:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_PCD_IRQHandler+0x27c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286a:	461a      	mov	r2, r3
 800286c:	2320      	movs	r3, #32
 800286e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_PCD_IRQHandler+0x29a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4413      	add	r3, r2
 8002882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002886:	461a      	mov	r2, r3
 8002888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800288c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	3301      	adds	r3, #1
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	2b00      	cmp	r3, #0
 800289e:	f47f af61 	bne.w	8002764 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 fcf0 	bl	800628c <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028b6:	f040 80dc 	bne.w	8002a72 <HAL_PCD_IRQHandler+0x47e>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fd11 	bl	80062e6 <USB_ReadDevAllInEpInterrupt>
 80028c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028ca:	e0ce      	b.n	8002a6a <HAL_PCD_IRQHandler+0x476>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80c3 	beq.w	8002a5e <HAL_PCD_IRQHandler+0x46a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fd37 	bl	8006356 <USB_ReadDevInEPInterrupt>
 80028e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d058      	beq.n	80029a6 <HAL_PCD_IRQHandler+0x3b2>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	2201      	movs	r2, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002908:	4619      	mov	r1, r3
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43db      	mvns	r3, r3
 8002916:	4013      	ands	r3, r2
 8002918:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002926:	461a      	mov	r2, r3
 8002928:	2301      	movs	r3, #1
 800292a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d132      	bne.n	800299a <HAL_PCD_IRQHandler+0x3a6>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	334c      	adds	r3, #76	; 0x4c
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4403      	add	r3, r0
 8002954:	3348      	adds	r3, #72	; 0x48
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4419      	add	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4403      	add	r3, r0
 8002968:	334c      	adds	r3, #76	; 0x4c
 800296a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d113      	bne.n	800299a <HAL_PCD_IRQHandler+0x3a6>
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3354      	adds	r3, #84	; 0x54
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d108      	bne.n	800299a <HAL_PCD_IRQHandler+0x3a6>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002992:	461a      	mov	r2, r3
 8002994:	2101      	movs	r1, #1
 8002996:	f003 fd3f 	bl	8006418 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	b2db      	uxtb	r3, r3
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7fe fca8 	bl	80012f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_PCD_IRQHandler+0x3ce>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029bc:	461a      	mov	r2, r3
 80029be:	2308      	movs	r3, #8
 80029c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_PCD_IRQHandler+0x3ea>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d8:	461a      	mov	r2, r3
 80029da:	2310      	movs	r3, #16
 80029dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_PCD_IRQHandler+0x406>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f4:	461a      	mov	r2, r3
 80029f6:	2340      	movs	r3, #64	; 0x40
 80029f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d023      	beq.n	8002a4c <HAL_PCD_IRQHandler+0x458>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a06:	6a38      	ldr	r0, [r7, #32]
 8002a08:	f002 fbda 	bl	80051c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	3338      	adds	r3, #56	; 0x38
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	78db      	ldrb	r3, [r3, #3]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d108      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x446>
            {
              ep->is_iso_incomplete = 0U;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7fe fd1b 	bl	8001470 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a46:	461a      	mov	r2, r3
 8002a48:	2302      	movs	r3, #2
 8002a4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_PCD_IRQHandler+0x46a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fceb 	bl	8003434 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	3301      	adds	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f af2d 	bne.w	80028cc <HAL_PCD_IRQHandler+0x2d8>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fc08 	bl	800628c <USB_ReadInterrupts>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a86:	d123      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x4dc>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8e:	461a      	mov	r2, r3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d108      	bne.n	8002aba <HAL_PCD_IRQHandler+0x4c6>
      {
        hpcd->LPM_State = LPM_L0;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fed2 	bl	800385c <HAL_PCDEx_LPM_Callback>
 8002ab8:	e002      	b.n	8002ac0 <HAL_PCD_IRQHandler+0x4cc>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fc94 	bl	80013e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	6952      	ldr	r2, [r2, #20]
 8002aca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fbd9 	bl	800628c <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae4:	d112      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x518>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_PCD_IRQHandler+0x508>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fc4e 	bl	8001398 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	6952      	ldr	r2, [r2, #20]
 8002b06:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b0a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f003 fbbb 	bl	800628c <USB_ReadInterrupts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b20:	f040 80c1 	bne.w	8002ca6 <HAL_PCD_IRQHandler+0x6b2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2110      	movs	r1, #16
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 fb3d 	bl	80051c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4a:	e049      	b.n	8002be0 <HAL_PCD_IRQHandler+0x5ec>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b80:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bb6:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bd8:	600b      	str	r3, [r1, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	3301      	adds	r3, #1
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d8b0      	bhi.n	8002b4c <HAL_PCD_IRQHandler+0x558>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bfe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d018      	beq.n	8002c3a <HAL_PCD_IRQHandler+0x646>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0e:	461a      	mov	r2, r3
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1a:	f043 030b 	orr.w	r3, r3, #11
 8002c1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c28:	461a      	mov	r2, r3
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f043 030b 	orr.w	r3, r3, #11
 8002c36:	6453      	str	r3, [r2, #68]	; 0x44
 8002c38:	e017      	b.n	8002c6a <HAL_PCD_IRQHandler+0x676>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c40:	461a      	mov	r2, r3
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c4e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c52:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f043 030b 	orr.w	r3, r3, #11
 8002c68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c70:	461a      	mov	r2, r3
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c90:	461a      	mov	r2, r3
 8002c92:	f003 fbc1 	bl	8006418 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	6952      	ldr	r2, [r2, #20]
 8002ca0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 faee 	bl	800628c <USB_ReadInterrupts>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cba:	d124      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x712>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 fb84 	bl	80063ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 faf6 	bl	80052bc <USB_GetDevSpeed>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681c      	ldr	r4, [r3, #0]
 8002cdc:	f001 f9de 	bl	800409c <HAL_RCC_GetHCLKFreq>
 8002ce0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4620      	mov	r0, r4
 8002cec:	f001 fff2 	bl	8004cd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fe fb28 	bl	8001346 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	6952      	ldr	r2, [r2, #20]
 8002d00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fabe 	bl	800628c <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d10a      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x73c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fb05 	bl	800132a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	6952      	ldr	r2, [r2, #20]
 8002d2a:	f002 0208 	and.w	r2, r2, #8
 8002d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 faa9 	bl	800628c <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d122      	bne.n	8002d8a <HAL_PCD_IRQHandler+0x796>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d50:	2301      	movs	r3, #1
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
 8002d54:	e014      	b.n	8002d80 <HAL_PCD_IRQHandler+0x78c>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x786>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fb10 	bl	800339a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d8e5      	bhi.n	8002d56 <HAL_PCD_IRQHandler+0x762>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 fa7c 	bl	800628c <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9e:	d13b      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x824>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da0:	2301      	movs	r3, #1
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
 8002da4:	e02b      	b.n	8002dfe <HAL_PCD_IRQHandler+0x80a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3340      	adds	r3, #64	; 0x40
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d115      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x804>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dcc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da12      	bge.n	8002df8 <HAL_PCD_IRQHandler+0x804>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	333f      	adds	r3, #63	; 0x3f
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fad1 	bl	800339a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d8ce      	bhi.n	8002da6 <HAL_PCD_IRQHandler+0x7b2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	6952      	ldr	r2, [r2, #20]
 8002e12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fa35 	bl	800628c <USB_ReadInterrupts>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e2c:	d156      	bne.n	8002edc <HAL_PCD_IRQHandler+0x8e8>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e2e:	2301      	movs	r3, #1
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	e046      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x8ce>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d12f      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x8c8>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	da2c      	bge.n	8002ebc <HAL_PCD_IRQHandler+0x8c8>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d122      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x8c8>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x8c8>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eaa:	461a      	mov	r2, r3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb8:	6053      	str	r3, [r2, #4]
            break;
 8002eba:	e007      	b.n	8002ecc <HAL_PCD_IRQHandler+0x8d8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d8b3      	bhi.n	8002e34 <HAL_PCD_IRQHandler+0x840>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	6952      	ldr	r2, [r2, #20]
 8002ed6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 f9d3 	bl	800628c <USB_ReadInterrupts>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef0:	d10a      	bne.n	8002f08 <HAL_PCD_IRQHandler+0x914>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe face 	bl	8001494 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	6952      	ldr	r2, [r2, #20]
 8002f02:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 f9bd 	bl	800628c <USB_ReadInterrupts>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d115      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x954>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_PCD_IRQHandler+0x940>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe fabe 	bl	80014b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	6851      	ldr	r1, [r2, #4]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	e000      	b.n	8002f48 <HAL_PCD_IRQHandler+0x954>
      return;
 8002f46:	bf00      	nop
    }
  }
}
 8002f48:	3734      	adds	r7, #52	; 0x34
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd90      	pop	{r4, r7, pc}

08002f4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_PCD_SetAddress+0x1a>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e013      	b.n	8002f90 <HAL_PCD_SetAddress+0x42>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f003 f915 	bl	80061b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	70fb      	strb	r3, [r7, #3]
 8002faa:	460b      	mov	r3, r1
 8002fac:	803b      	strh	r3, [r7, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	da0f      	bge.n	8002fde <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 020f 	and.w	r2, r3, #15
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	3338      	adds	r3, #56	; 0x38
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	705a      	strb	r2, [r3, #1]
 8002fdc:	e00f      	b.n	8002ffe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 020f 	and.w	r2, r3, #15
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800300a:	883a      	ldrh	r2, [r7, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	78ba      	ldrb	r2, [r7, #2]
 8003014:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	785b      	ldrb	r3, [r3, #1]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003028:	78bb      	ldrb	r3, [r7, #2]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d102      	bne.n	8003034 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_PCD_EP_Open+0xaa>
 800303e:	2302      	movs	r3, #2
 8003040:	e00e      	b.n	8003060 <HAL_PCD_EP_Open+0xc8>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68f9      	ldr	r1, [r7, #12]
 8003050:	4618      	mov	r0, r3
 8003052:	f002 f958 	bl	8005306 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800305e:	7afb      	ldrb	r3, [r7, #11]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003078:	2b00      	cmp	r3, #0
 800307a:	da0f      	bge.n	800309c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 020f 	and.w	r2, r3, #15
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	3338      	adds	r3, #56	; 0x38
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	3304      	adds	r3, #4
 8003092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	705a      	strb	r2, [r3, #1]
 800309a:	e00f      	b.n	80030bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f003 020f 	and.w	r2, r3, #15
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
 80030b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_PCD_EP_Close+0x6e>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e00e      	b.n	80030f4 <HAL_PCD_EP_Close+0x8c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68f9      	ldr	r1, [r7, #12]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 f999 	bl	800541c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	460b      	mov	r3, r1
 800310a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310c:	7afb      	ldrb	r3, [r7, #11]
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	3304      	adds	r3, #4
 8003124:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2200      	movs	r2, #0
 800313c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	b2da      	uxtb	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003158:	7afb      	ldrb	r3, [r7, #11]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	6979      	ldr	r1, [r7, #20]
 8003170:	f002 fc98 	bl	8005aa4 <USB_EP0StartXfer>
 8003174:	e008      	b.n	8003188 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	f002 fa2e 	bl	80055e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	460b      	mov	r3, r1
 80031a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a2:	7afb      	ldrb	r3, [r7, #11]
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	3338      	adds	r3, #56	; 0x38
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	3304      	adds	r3, #4
 80031b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2200      	movs	r2, #0
 80031ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2201      	movs	r2, #1
 80031d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d2:	7afb      	ldrb	r3, [r7, #11]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d102      	bne.n	80031ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ec:	7afb      	ldrb	r3, [r7, #11]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	6979      	ldr	r1, [r7, #20]
 8003204:	f002 fc4e 	bl	8005aa4 <USB_EP0StartXfer>
 8003208:	e008      	b.n	800321c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	6979      	ldr	r1, [r7, #20]
 8003218:	f002 f9e4 	bl	80055e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	f003 020f 	and.w	r2, r3, #15
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d901      	bls.n	8003244 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e050      	b.n	80032e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003248:	2b00      	cmp	r3, #0
 800324a:	da0f      	bge.n	800326c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 020f 	and.w	r2, r3, #15
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	3338      	adds	r3, #56	; 0x38
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	705a      	strb	r2, [r3, #1]
 800326a:	e00d      	b.n	8003288 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	3304      	adds	r3, #4
 8003280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_PCD_EP_SetStall+0x82>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e01e      	b.n	80032e6 <HAL_PCD_EP_SetStall+0xc0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 fe9e 	bl	8005ff8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	b2d9      	uxtb	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d6:	461a      	mov	r2, r3
 80032d8:	f003 f89e 	bl	8006418 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	d901      	bls.n	800330c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e042      	b.n	8003392 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800330c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003310:	2b00      	cmp	r3, #0
 8003312:	da0f      	bge.n	8003334 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	f003 020f 	and.w	r2, r3, #15
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	3338      	adds	r3, #56	; 0x38
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	3304      	adds	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	705a      	strb	r2, [r3, #1]
 8003332:	e00f      	b.n	8003354 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	3304      	adds	r3, #4
 800334c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_PCD_EP_ClrStall+0x86>
 8003370:	2302      	movs	r3, #2
 8003372:	e00e      	b.n	8003392 <HAL_PCD_EP_ClrStall+0xa4>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68f9      	ldr	r1, [r7, #12]
 8003382:	4618      	mov	r0, r3
 8003384:	f002 feaa 	bl	80060dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da0c      	bge.n	80033c8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	3338      	adds	r3, #56	; 0x38
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	3304      	adds	r3, #4
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e00c      	b.n	80033e2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	f003 020f 	and.w	r2, r3, #15
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68f9      	ldr	r1, [r7, #12]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f002 fcc2 	bl	8005d72 <USB_EPStopXfer>
 80033ee:	4603      	mov	r3, r0
 80033f0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033f2:	7afb      	ldrb	r3, [r7, #11]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  Activate remote wakeup signalling
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  return (USB_ActivateRemoteWakeup(hpcd->Instance));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f003 f89b 	bl	8006544 <USB_ActivateRemoteWakeup>
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  De-activate remote wakeup signalling.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  return (USB_DeActivateRemoteWakeup(hpcd->Instance));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f003 f8ad 	bl	8006584 <USB_DeActivateRemoteWakeup>
 800342a:	4603      	mov	r3, r0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af02      	add	r7, sp, #8
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	4613      	mov	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	3338      	adds	r3, #56	; 0x38
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	3304      	adds	r3, #4
 800345a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1a      	ldr	r2, [r3, #32]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	429a      	cmp	r2, r3
 8003466:	d901      	bls.n	800346c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e06d      	b.n	8003548 <PCD_WriteEmptyTxFifo+0x114>
  }

  len = ep->xfer_len - ep->xfer_count;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	699a      	ldr	r2, [r3, #24]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	429a      	cmp	r2, r3
 8003480:	d202      	bcs.n	8003488 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	3303      	adds	r3, #3
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003490:	e02b      	b.n	80034ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d202      	bcs.n	80034ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3303      	adds	r3, #3
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6919      	ldr	r1, [r3, #16]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	4603      	mov	r3, r0
 80034cc:	6978      	ldr	r0, [r7, #20]
 80034ce:	f002 fcfe 	bl	8005ece <USB_WritePacket>

    ep->xfer_buff  += len;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	441a      	add	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	441a      	add	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d309      	bcc.n	8003514 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003508:	429a      	cmp	r2, r3
 800350a:	d203      	bcs.n	8003514 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1be      	bne.n	8003492 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	429a      	cmp	r2, r3
 800351e:	d812      	bhi.n	8003546 <PCD_WriteEmptyTxFifo+0x112>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	2201      	movs	r2, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003534:	4619      	mov	r1, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	43db      	mvns	r3, r3
 8003542:	4013      	ands	r3, r2
 8003544:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	333c      	adds	r3, #60	; 0x3c
 8003568:	3304      	adds	r3, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d17b      	bne.n	800367e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b00      	cmp	r3, #0
 800358e:	d015      	beq.n	80035bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	4a61      	ldr	r2, [pc, #388]	; (8003718 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	f240 80b9 	bls.w	800370c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80b3 	beq.w	800370c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b2:	461a      	mov	r2, r3
 80035b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035b8:	6093      	str	r3, [r2, #8]
 80035ba:	e0a7      	b.n	800370c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d2:	461a      	mov	r2, r3
 80035d4:	2320      	movs	r3, #32
 80035d6:	6093      	str	r3, [r2, #8]
 80035d8:	e098      	b.n	800370c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 8093 	bne.w	800370c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	4a4b      	ldr	r2, [pc, #300]	; (8003718 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d90f      	bls.n	800360e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003604:	461a      	mov	r2, r3
 8003606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360a:	6093      	str	r3, [r2, #8]
 800360c:	e07e      	b.n	800370c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	0159      	lsls	r1, r3, #5
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	440b      	add	r3, r1
 8003630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363a:	1ad2      	subs	r2, r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d114      	bne.n	8003670 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003658:	461a      	mov	r2, r3
 800365a:	2101      	movs	r1, #1
 800365c:	f002 fedc 	bl	8006418 <USB_EP0_OutStart>
 8003660:	e006      	b.n	8003670 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	441a      	add	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd fe22 	bl	80012c0 <HAL_PCD_DataOutStageCallback>
 800367c:	e046      	b.n	800370c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	4a26      	ldr	r2, [pc, #152]	; (800371c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d124      	bne.n	80036d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369c:	461a      	mov	r2, r3
 800369e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a2:	6093      	str	r3, [r2, #8]
 80036a4:	e032      	b.n	800370c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036bc:	461a      	mov	r2, r3
 80036be:	2320      	movs	r3, #32
 80036c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7fd fdf9 	bl	80012c0 <HAL_PCD_DataOutStageCallback>
 80036ce:	e01d      	b.n	800370c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d114      	bne.n	8003700 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d108      	bne.n	8003700 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036f8:	461a      	mov	r2, r3
 80036fa:	2100      	movs	r1, #0
 80036fc:	f002 fe8c 	bl	8006418 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	4619      	mov	r1, r3
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fdda 	bl	80012c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	4f54300a 	.word	0x4f54300a
 800371c:	4f54310a 	.word	0x4f54310a

08003720 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	333c      	adds	r3, #60	; 0x3c
 8003738:	3304      	adds	r3, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d90e      	bls.n	8003774 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376c:	461a      	mov	r2, r3
 800376e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003772:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fd fd91 	bl	800129c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d90c      	bls.n	800379c <PCD_EP_OutSetupPacket_int+0x7c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d108      	bne.n	800379c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003794:	461a      	mov	r2, r3
 8003796:	2101      	movs	r1, #1
 8003798:	f002 fe3e 	bl	8006418 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	4f54300a 	.word	0x4f54300a

080037ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	70fb      	strb	r3, [r7, #3]
 80037b8:	4613      	mov	r3, r2
 80037ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d107      	bne.n	80037da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	883a      	ldrh	r2, [r7, #0]
 80037d0:	0411      	lsls	r1, r2, #16
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28
 80037d8:	e028      	b.n	800382c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	4413      	add	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	e00d      	b.n	800380a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	3340      	adds	r3, #64	; 0x40
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	4413      	add	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	3301      	adds	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	3b01      	subs	r3, #1
 8003810:	429a      	cmp	r2, r3
 8003812:	d3ec      	bcc.n	80037ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	3b01      	subs	r3, #1
 800381c:	883a      	ldrh	r2, [r7, #0]
 800381e:	0410      	lsls	r0, r2, #16
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	4302      	orrs	r2, r0
 8003824:	3340      	adds	r3, #64	; 0x40
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	460b      	mov	r3, r1
 8003844:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	887a      	ldrh	r2, [r7, #2]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e264      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d075      	beq.n	800397e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003892:	4ba3      	ldr	r3, [pc, #652]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d00c      	beq.n	80038b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4ba0      	ldr	r3, [pc, #640]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d112      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038aa:	4b9d      	ldr	r3, [pc, #628]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	4b99      	ldr	r3, [pc, #612]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05b      	beq.n	800397c <HAL_RCC_OscConfig+0x108>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d157      	bne.n	800397c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e23f      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d106      	bne.n	80038e8 <HAL_RCC_OscConfig+0x74>
 80038da:	4a91      	ldr	r2, [pc, #580]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	4b90      	ldr	r3, [pc, #576]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e01d      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x98>
 80038f2:	4a8b      	ldr	r2, [pc, #556]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	4b8a      	ldr	r3, [pc, #552]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4a88      	ldr	r2, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	4b87      	ldr	r3, [pc, #540]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 800390c:	4a84      	ldr	r2, [pc, #528]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800390e:	4b84      	ldr	r3, [pc, #528]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4a81      	ldr	r2, [pc, #516]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800391a:	4b81      	ldr	r3, [pc, #516]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe fa3a 	bl	8001da4 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003934:	f7fe fa36 	bl	8001da4 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e204      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0xc0>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe fa26 	bl	8001da4 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800395c:	f7fe fa22 	bl	8001da4 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1f0      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0xe8>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d063      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b62      	ldr	r3, [pc, #392]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d11c      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a2:	4b5f      	ldr	r3, [pc, #380]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d116      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	4b5c      	ldr	r3, [pc, #368]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1c4      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c6:	4956      	ldr	r1, [pc, #344]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	4b55      	ldr	r3, [pc, #340]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	e03a      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e4:	4b4f      	ldr	r3, [pc, #316]	; (8003b24 <HAL_RCC_OscConfig+0x2b0>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fe f9db 	bl	8001da4 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fe f9d7 	bl	8001da4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e1a5      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	4b46      	ldr	r3, [pc, #280]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4943      	ldr	r1, [pc, #268]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a12:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
 8003a24:	e015      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a26:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <HAL_RCC_OscConfig+0x2b0>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe f9ba 	bl	8001da4 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fe f9b6 	bl	8001da4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e184      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d030      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a66:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <HAL_RCC_OscConfig+0x2b4>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fe f99a 	bl	8001da4 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fe f996 	bl	8001da4 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e164      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x200>
 8003a92:	e015      	b.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a94:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <HAL_RCC_OscConfig+0x2b4>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe f983 	bl	8001da4 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa2:	f7fe f97f 	bl	8001da4 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e14d      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a0 	beq.w	8003c0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4a0f      	ldr	r2, [pc, #60]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d121      	bne.n	8003b4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b0c:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe f945 	bl	8001da4 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e011      	b.n	8003b42 <HAL_RCC_OscConfig+0x2ce>
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	42470000 	.word	0x42470000
 8003b28:	42470e80 	.word	0x42470e80
 8003b2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b30:	f7fe f938 	bl	8001da4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e106      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b85      	ldr	r3, [pc, #532]	; (8003d58 <HAL_RCC_OscConfig+0x4e4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2f0>
 8003b56:	4a81      	ldr	r2, [pc, #516]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003b58:	4b80      	ldr	r3, [pc, #512]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
 8003b62:	e01c      	b.n	8003b9e <HAL_RCC_OscConfig+0x32a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_OscConfig+0x312>
 8003b6c:	4a7b      	ldr	r2, [pc, #492]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003b6e:	4b7b      	ldr	r3, [pc, #492]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
 8003b78:	4a78      	ldr	r2, [pc, #480]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003b7a:	4b78      	ldr	r3, [pc, #480]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6713      	str	r3, [r2, #112]	; 0x70
 8003b84:	e00b      	b.n	8003b9e <HAL_RCC_OscConfig+0x32a>
 8003b86:	4a75      	ldr	r2, [pc, #468]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003b88:	4b74      	ldr	r3, [pc, #464]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	4a72      	ldr	r2, [pc, #456]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003b94:	4b71      	ldr	r3, [pc, #452]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d015      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fe f8fd 	bl	8001da4 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fe f8f9 	bl	8001da4 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0c5      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	4b65      	ldr	r3, [pc, #404]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ee      	beq.n	8003bae <HAL_RCC_OscConfig+0x33a>
 8003bd0:	e014      	b.n	8003bfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe f8e7 	bl	8001da4 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe f8e3 	bl	8001da4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0af      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	4b5a      	ldr	r3, [pc, #360]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ee      	bne.n	8003bda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c02:	4a56      	ldr	r2, [pc, #344]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003c04:	4b55      	ldr	r3, [pc, #340]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 809b 	beq.w	8003d4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c18:	4b50      	ldr	r3, [pc, #320]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d05c      	beq.n	8003cde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d141      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2c:	4b4c      	ldr	r3, [pc, #304]	; (8003d60 <HAL_RCC_OscConfig+0x4ec>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fe f8b7 	bl	8001da4 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fe f8b3 	bl	8001da4 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e081      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4c:	4b43      	ldr	r3, [pc, #268]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c58:	4940      	ldr	r1, [pc, #256]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	019b      	lsls	r3, r3, #6
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	3b01      	subs	r3, #1
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c82:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <HAL_RCC_OscConfig+0x4ec>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fe f88c 	bl	8001da4 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fe f888 	bl	8001da4 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e056      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca2:	4b2e      	ldr	r3, [pc, #184]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x41c>
 8003cae:	e04e      	b.n	8003d4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_RCC_OscConfig+0x4ec>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe f875 	bl	8001da4 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fe f871 	bl	8001da4 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e03f      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd0:	4b22      	ldr	r3, [pc, #136]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x44a>
 8003cdc:	e037      	b.n	8003d4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e032      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cea:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <HAL_RCC_OscConfig+0x4e8>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d028      	beq.n	8003d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d121      	bne.n	8003d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d11a      	bne.n	8003d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d111      	bne.n	8003d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	3b01      	subs	r3, #1
 8003d34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d001      	beq.n	8003d4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	42470060 	.word	0x42470060

08003d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0cc      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d78:	4b68      	ldr	r3, [pc, #416]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0207 	and.w	r2, r3, #7
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20c      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b65      	ldr	r3, [pc, #404]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b63      	ldr	r3, [pc, #396]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0207 	and.w	r2, r3, #7
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0b8      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db8:	4a59      	ldr	r2, [pc, #356]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4b59      	ldr	r3, [pc, #356]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd0:	4a53      	ldr	r2, [pc, #332]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4b53      	ldr	r3, [pc, #332]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ddc:	4950      	ldr	r1, [pc, #320]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4b50      	ldr	r3, [pc, #320]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d044      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	4b47      	ldr	r3, [pc, #284]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d119      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e07f      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e22:	4b3f      	ldr	r3, [pc, #252]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e06f      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e32:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e067      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e42:	4937      	ldr	r1, [pc, #220]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 0203 	bic.w	r2, r3, #3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e54:	f7fd ffa6 	bl	8001da4 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5c:	f7fd ffa2 	bl	8001da4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e04f      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e72:	4b2b      	ldr	r3, [pc, #172]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 020c 	and.w	r2, r3, #12
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d1eb      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0207 	and.w	r2, r3, #7
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d90c      	bls.n	8003eac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0207 	and.w	r2, r3, #7
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e032      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb8:	4919      	ldr	r1, [pc, #100]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ed6:	4912      	ldr	r1, [pc, #72]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eea:	f000 f821 	bl	8003f30 <HAL_RCC_GetSysClockFreq>
 8003eee:	4601      	mov	r1, r0
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003efc:	5cd3      	ldrb	r3, [r2, r3]
 8003efe:	fa21 f303 	lsr.w	r3, r1, r3
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fd ff06 	bl	8001d1c <HAL_InitTick>

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023c00 	.word	0x40023c00
 8003f20:	40023800 	.word	0x40023800
 8003f24:	08007da8 	.word	0x08007da8
 8003f28:	20000064 	.word	0x20000064
 8003f2c:	2000013c 	.word	0x2000013c

08003f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f34:	b087      	sub	sp, #28
 8003f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f38:	2200      	movs	r2, #0
 8003f3a:	60fa      	str	r2, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	617a      	str	r2, [r7, #20]
 8003f40:	2200      	movs	r2, #0
 8003f42:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8003f44:	2200      	movs	r2, #0
 8003f46:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f48:	4a51      	ldr	r2, [pc, #324]	; (8004090 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f4a:	6892      	ldr	r2, [r2, #8]
 8003f4c:	f002 020c 	and.w	r2, r2, #12
 8003f50:	2a04      	cmp	r2, #4
 8003f52:	d007      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x34>
 8003f54:	2a08      	cmp	r2, #8
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f58:	2a00      	cmp	r2, #0
 8003f5a:	f040 8090 	bne.w	800407e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f5e:	4b4d      	ldr	r3, [pc, #308]	; (8004094 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f60:	613b      	str	r3, [r7, #16]
       break;
 8003f62:	e08f      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f64:	4b4c      	ldr	r3, [pc, #304]	; (8004098 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f66:	613b      	str	r3, [r7, #16]
      break;
 8003f68:	e08c      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f6a:	4a49      	ldr	r2, [pc, #292]	; (8004090 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f6c:	6852      	ldr	r2, [r2, #4]
 8003f6e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003f72:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f74:	4a46      	ldr	r2, [pc, #280]	; (8004090 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f76:	6852      	ldr	r2, [r2, #4]
 8003f78:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	d023      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f80:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	099b      	lsrs	r3, r3, #6
 8003f86:	f04f 0400 	mov.w	r4, #0
 8003f8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	ea03 0301 	and.w	r3, r3, r1
 8003f96:	ea04 0402 	and.w	r4, r4, r2
 8003f9a:	4a3f      	ldr	r2, [pc, #252]	; (8004098 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f9c:	fb02 f104 	mul.w	r1, r2, r4
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	fb02 f203 	mul.w	r2, r2, r3
 8003fa6:	440a      	add	r2, r1
 8003fa8:	493b      	ldr	r1, [pc, #236]	; (8004098 <HAL_RCC_GetSysClockFreq+0x168>)
 8003faa:	fba3 0101 	umull	r0, r1, r3, r1
 8003fae:	1853      	adds	r3, r2, r1
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f04f 0400 	mov.w	r4, #0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	f7fc f90c 	bl	80001d8 <__aeabi_uldivmod>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e04c      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fca:	6852      	ldr	r2, [r2, #4]
 8003fcc:	0992      	lsrs	r2, r2, #6
 8003fce:	4611      	mov	r1, r2
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003fd8:	f04f 0600 	mov.w	r6, #0
 8003fdc:	ea05 0501 	and.w	r5, r5, r1
 8003fe0:	ea06 0602 	and.w	r6, r6, r2
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003fec:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003ff0:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	465a      	mov	r2, fp
 8003ff8:	46aa      	mov	sl, r5
 8003ffa:	46b3      	mov	fp, r6
 8003ffc:	4655      	mov	r5, sl
 8003ffe:	465e      	mov	r6, fp
 8004000:	1b4d      	subs	r5, r1, r5
 8004002:	eb62 0606 	sbc.w	r6, r2, r6
 8004006:	4629      	mov	r1, r5
 8004008:	4632      	mov	r2, r6
 800400a:	0194      	lsls	r4, r2, #6
 800400c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004010:	018b      	lsls	r3, r1, #6
 8004012:	1a5b      	subs	r3, r3, r1
 8004014:	eb64 0402 	sbc.w	r4, r4, r2
 8004018:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800401c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8004020:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8004024:	4643      	mov	r3, r8
 8004026:	464c      	mov	r4, r9
 8004028:	4655      	mov	r5, sl
 800402a:	465e      	mov	r6, fp
 800402c:	18ed      	adds	r5, r5, r3
 800402e:	eb46 0604 	adc.w	r6, r6, r4
 8004032:	462b      	mov	r3, r5
 8004034:	4634      	mov	r4, r6
 8004036:	02a2      	lsls	r2, r4, #10
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	029b      	lsls	r3, r3, #10
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	e897 0018 	ldmia.w	r7, {r3, r4}
 800404a:	4618      	mov	r0, r3
 800404c:	4621      	mov	r1, r4
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f04f 0400 	mov.w	r4, #0
 8004054:	461a      	mov	r2, r3
 8004056:	4623      	mov	r3, r4
 8004058:	f7fc f8be 	bl	80001d8 <__aeabi_uldivmod>
 800405c:	4603      	mov	r3, r0
 800405e:	460c      	mov	r4, r1
 8004060:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_GetSysClockFreq+0x160>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	0c1b      	lsrs	r3, r3, #16
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	3301      	adds	r3, #1
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	613b      	str	r3, [r7, #16]
      break;
 800407c:	e002      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCC_GetSysClockFreq+0x164>)
 8004080:	613b      	str	r3, [r7, #16]
      break;
 8004082:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004084:	693b      	ldr	r3, [r7, #16]
}
 8004086:	4618      	mov	r0, r3
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004090:	40023800 	.word	0x40023800
 8004094:	00f42400 	.word	0x00f42400
 8004098:	017d7840 	.word	0x017d7840

0800409c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a2:	681b      	ldr	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000064 	.word	0x20000064

080040b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040b8:	f7ff fff0 	bl	800409c <HAL_RCC_GetHCLKFreq>
 80040bc:	4601      	mov	r1, r0
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	0a9b      	lsrs	r3, r3, #10
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	4a03      	ldr	r2, [pc, #12]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ca:	5cd3      	ldrb	r3, [r2, r3]
 80040cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40023800 	.word	0x40023800
 80040d8:	08007db8 	.word	0x08007db8

080040dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040e0:	f7ff ffdc 	bl	800409c <HAL_RCC_GetHCLKFreq>
 80040e4:	4601      	mov	r1, r0
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	0b5b      	lsrs	r3, r3, #13
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4a03      	ldr	r2, [pc, #12]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f2:	5cd3      	ldrb	r3, [r2, r3]
 80040f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40023800 	.word	0x40023800
 8004100:	08007db8 	.word	0x08007db8

08004104 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e047      	b.n	80041a6 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fc feba 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2224      	movs	r2, #36	; 0x24
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	68d2      	ldr	r2, [r2, #12]
 8004142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fa39 	bl	80045c0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	6912      	ldr	r2, [r2, #16]
 8004158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800415c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	6952      	ldr	r2, [r2, #20]
 8004168:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800416c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	6952      	ldr	r2, [r2, #20]
 8004178:	f042 0208 	orr.w	r2, r2, #8
 800417c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	68d2      	ldr	r2, [r2, #12]
 8004188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800418c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b08a      	sub	sp, #40	; 0x28
 80041b2:	af02      	add	r7, sp, #8
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	4613      	mov	r3, r2
 80041bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d17b      	bne.n	80042c6 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_UART_Transmit+0x2c>
 80041d4:	88fb      	ldrh	r3, [r7, #6]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e074      	b.n	80042c8 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Transmit+0x3e>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e06d      	b.n	80042c8 <HAL_UART_Transmit+0x11a>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2221      	movs	r2, #33	; 0x21
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004202:	f7fd fdcf 	bl	8001da4 <HAL_GetTick>
 8004206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	88fa      	ldrh	r2, [r7, #6]
 8004212:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421c:	d108      	bne.n	8004230 <HAL_UART_Transmit+0x82>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d104      	bne.n	8004230 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	e003      	b.n	8004238 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004240:	e029      	b.n	8004296 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2200      	movs	r2, #0
 800424a:	2180      	movs	r1, #128	; 0x80
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f949 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e035      	b.n	80042c8 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	8812      	ldrh	r2, [r2, #0]
 800426a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800426e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	3302      	adds	r3, #2
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	e007      	b.n	8004288 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	7812      	ldrb	r2, [r2, #0]
 8004280:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3301      	adds	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1d0      	bne.n	8004242 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2200      	movs	r2, #0
 80042a8:	2140      	movs	r1, #64	; 0x40
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f91a 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e006      	b.n	80042c8 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3720      	adds	r7, #32
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	; 0x28
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	f040 808c 	bne.w	800440a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_UART_Receive+0x2e>
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e084      	b.n	800440c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_UART_Receive+0x40>
 800430c:	2302      	movs	r3, #2
 800430e:	e07d      	b.n	800440c <HAL_UART_Receive+0x13c>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2222      	movs	r2, #34	; 0x22
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432c:	f7fd fd3a 	bl	8001da4 <HAL_GetTick>
 8004330:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	88fa      	ldrh	r2, [r7, #6]
 8004336:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	d108      	bne.n	800435a <HAL_UART_Receive+0x8a>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e003      	b.n	8004362 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800436a:	e043      	b.n	80043f4 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2200      	movs	r2, #0
 8004374:	2120      	movs	r1, #32
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f8b4 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e042      	b.n	800440c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10c      	bne.n	80043a6 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004398:	b29a      	uxth	r2, r3
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3302      	adds	r3, #2
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	e01f      	b.n	80043e6 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ae:	d007      	beq.n	80043c0 <HAL_UART_Receive+0xf0>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <HAL_UART_Receive+0xfe>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e008      	b.n	80043e0 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	3301      	adds	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1b6      	bne.n	800436c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3720      	adds	r7, #32
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800442a:	2302      	movs	r3, #2
 800442c:	e020      	b.n	8004470 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2224      	movs	r2, #36	; 0x24
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f023 030c 	bic.w	r3, r3, #12
 800444c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f043 0308 	orr.w	r3, r3, #8
 8004454:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8004492:	2302      	movs	r3, #2
 8004494:	e020      	b.n	80044d8 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2224      	movs	r2, #36	; 0x24
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f023 030c 	bic.w	r3, r3, #12
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f043 0304 	orr.w	r3, r3, #4
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b090      	sub	sp, #64	; 0x40
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f4:	e050      	b.n	8004598 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d04c      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <UART_WaitOnFlagUntilTimeout+0x30>
 8004504:	f7fd fc4e 	bl	8001da4 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	1ad2      	subs	r2, r2, r3
 800450e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004510:	429a      	cmp	r2, r3
 8004512:	d941      	bls.n	8004598 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004534:	637a      	str	r2, [r7, #52]	; 0x34
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800453a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3314      	adds	r3, #20
 800454e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	613b      	str	r3, [r7, #16]
   return(result);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3314      	adds	r3, #20
 8004566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004568:	623a      	str	r2, [r7, #32]
 800456a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	69f9      	ldr	r1, [r7, #28]
 800456e:	6a3a      	ldr	r2, [r7, #32]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	61bb      	str	r3, [r7, #24]
   return(result);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e5      	bne.n	8004548 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e00f      	b.n	80045b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	401a      	ands	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d09f      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3740      	adds	r7, #64	; 0x40
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c4:	b091      	sub	sp, #68	; 0x44
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045cc:	6819      	ldr	r1, [r3, #0]
 80045ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 80045f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fa:	6819      	ldr	r1, [r3, #0]
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8004606:	f022 020c 	bic.w	r2, r2, #12
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	4313      	orrs	r3, r2
 800460e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800461e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	4313      	orrs	r3, r2
 8004624:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4bba      	ldr	r3, [pc, #744]	; (8004914 <UART_SetConfig+0x354>)
 800462c:	429a      	cmp	r2, r3
 800462e:	d004      	beq.n	800463a <UART_SetConfig+0x7a>
 8004630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4bb8      	ldr	r3, [pc, #736]	; (8004918 <UART_SetConfig+0x358>)
 8004636:	429a      	cmp	r2, r3
 8004638:	d103      	bne.n	8004642 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800463a:	f7ff fd4f 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 800463e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004640:	e002      	b.n	8004648 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004642:	f7ff fd37 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 8004646:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004650:	f040 80a7 	bne.w	80047a2 <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	62ba      	str	r2, [r7, #40]	; 0x28
 800465a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465c:	4619      	mov	r1, r3
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	460b      	mov	r3, r1
 8004664:	4614      	mov	r4, r2
 8004666:	18db      	adds	r3, r3, r3
 8004668:	eb44 0404 	adc.w	r4, r4, r4
 800466c:	185b      	adds	r3, r3, r1
 800466e:	eb44 0402 	adc.w	r4, r4, r2
 8004672:	00e0      	lsls	r0, r4, #3
 8004674:	6178      	str	r0, [r7, #20]
 8004676:	6978      	ldr	r0, [r7, #20]
 8004678:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800467c:	6178      	str	r0, [r7, #20]
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004686:	185d      	adds	r5, r3, r1
 8004688:	eb44 0602 	adc.w	r6, r4, r2
 800468c:	4628      	mov	r0, r5
 800468e:	4631      	mov	r1, r6
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f04f 0400 	mov.w	r4, #0
 8004698:	18db      	adds	r3, r3, r3
 800469a:	eb44 0404 	adc.w	r4, r4, r4
 800469e:	461a      	mov	r2, r3
 80046a0:	4623      	mov	r3, r4
 80046a2:	f7fb fd99 	bl	80001d8 <__aeabi_uldivmod>
 80046a6:	4603      	mov	r3, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b9b      	ldr	r3, [pc, #620]	; (800491c <UART_SetConfig+0x35c>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	011e      	lsls	r6, r3, #4
 80046b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b8:	4619      	mov	r1, r3
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	460b      	mov	r3, r1
 80046c0:	4614      	mov	r4, r2
 80046c2:	18db      	adds	r3, r3, r3
 80046c4:	eb44 0404 	adc.w	r4, r4, r4
 80046c8:	185b      	adds	r3, r3, r1
 80046ca:	eb44 0402 	adc.w	r4, r4, r2
 80046ce:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80046d2:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80046d6:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80046da:	4653      	mov	r3, sl
 80046dc:	465c      	mov	r4, fp
 80046de:	eb13 0a01 	adds.w	sl, r3, r1
 80046e2:	eb44 0b02 	adc.w	fp, r4, r2
 80046e6:	4650      	mov	r0, sl
 80046e8:	4659      	mov	r1, fp
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f04f 0400 	mov.w	r4, #0
 80046f2:	18db      	adds	r3, r3, r3
 80046f4:	eb44 0404 	adc.w	r4, r4, r4
 80046f8:	461a      	mov	r2, r3
 80046fa:	4623      	mov	r3, r4
 80046fc:	f7fb fd6c 	bl	80001d8 <__aeabi_uldivmod>
 8004700:	4603      	mov	r3, r0
 8004702:	460c      	mov	r4, r1
 8004704:	461a      	mov	r2, r3
 8004706:	4b85      	ldr	r3, [pc, #532]	; (800491c <UART_SetConfig+0x35c>)
 8004708:	fba3 1302 	umull	r1, r3, r3, r2
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	2164      	movs	r1, #100	; 0x64
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	3332      	adds	r3, #50	; 0x32
 800471a:	4a80      	ldr	r2, [pc, #512]	; (800491c <UART_SetConfig+0x35c>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004728:	441e      	add	r6, r3
 800472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472c:	4619      	mov	r1, r3
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	460b      	mov	r3, r1
 8004734:	4614      	mov	r4, r2
 8004736:	18db      	adds	r3, r3, r3
 8004738:	eb44 0404 	adc.w	r4, r4, r4
 800473c:	185b      	adds	r3, r3, r1
 800473e:	eb44 0402 	adc.w	r4, r4, r2
 8004742:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8004746:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800474a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800474e:	4643      	mov	r3, r8
 8004750:	464c      	mov	r4, r9
 8004752:	eb13 0801 	adds.w	r8, r3, r1
 8004756:	eb44 0902 	adc.w	r9, r4, r2
 800475a:	4640      	mov	r0, r8
 800475c:	4649      	mov	r1, r9
 800475e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f04f 0400 	mov.w	r4, #0
 8004766:	18db      	adds	r3, r3, r3
 8004768:	eb44 0404 	adc.w	r4, r4, r4
 800476c:	461a      	mov	r2, r3
 800476e:	4623      	mov	r3, r4
 8004770:	f7fb fd32 	bl	80001d8 <__aeabi_uldivmod>
 8004774:	4603      	mov	r3, r0
 8004776:	460c      	mov	r4, r1
 8004778:	461a      	mov	r2, r3
 800477a:	4b68      	ldr	r3, [pc, #416]	; (800491c <UART_SetConfig+0x35c>)
 800477c:	fba3 1302 	umull	r1, r3, r3, r2
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	2164      	movs	r1, #100	; 0x64
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	3332      	adds	r3, #50	; 0x32
 800478e:	4a63      	ldr	r2, [pc, #396]	; (800491c <UART_SetConfig+0x35c>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	4433      	add	r3, r6
 800479c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800479e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047a0:	e0b3      	b.n	800490a <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047aa:	4619      	mov	r1, r3
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4614      	mov	r4, r2
 80047b4:	18db      	adds	r3, r3, r3
 80047b6:	eb44 0404 	adc.w	r4, r4, r4
 80047ba:	185b      	adds	r3, r3, r1
 80047bc:	eb44 0402 	adc.w	r4, r4, r2
 80047c0:	00e6      	lsls	r6, r4, #3
 80047c2:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80047c6:	00dd      	lsls	r5, r3, #3
 80047c8:	462b      	mov	r3, r5
 80047ca:	4634      	mov	r4, r6
 80047cc:	185d      	adds	r5, r3, r1
 80047ce:	eb44 0602 	adc.w	r6, r4, r2
 80047d2:	4628      	mov	r0, r5
 80047d4:	4631      	mov	r1, r6
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f04f 0400 	mov.w	r4, #0
 80047de:	00a5      	lsls	r5, r4, #2
 80047e0:	62fd      	str	r5, [r7, #44]	; 0x2c
 80047e2:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80047e4:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 80047e8:	62fd      	str	r5, [r7, #44]	; 0x2c
 80047ea:	009c      	lsls	r4, r3, #2
 80047ec:	62bc      	str	r4, [r7, #40]	; 0x28
 80047ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047f2:	f7fb fcf1 	bl	80001d8 <__aeabi_uldivmod>
 80047f6:	4603      	mov	r3, r0
 80047f8:	460c      	mov	r4, r1
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b47      	ldr	r3, [pc, #284]	; (800491c <UART_SetConfig+0x35c>)
 80047fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	011d      	lsls	r5, r3, #4
 8004806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004808:	4619      	mov	r1, r3
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	460b      	mov	r3, r1
 8004810:	4614      	mov	r4, r2
 8004812:	18db      	adds	r3, r3, r3
 8004814:	eb44 0404 	adc.w	r4, r4, r4
 8004818:	185b      	adds	r3, r3, r1
 800481a:	eb44 0402 	adc.w	r4, r4, r2
 800481e:	00e0      	lsls	r0, r4, #3
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	00d8      	lsls	r0, r3, #3
 800482c:	60b8      	str	r0, [r7, #8]
 800482e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004832:	eb13 0801 	adds.w	r8, r3, r1
 8004836:	eb44 0902 	adc.w	r9, r4, r2
 800483a:	4640      	mov	r0, r8
 800483c:	4649      	mov	r1, r9
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f04f 0400 	mov.w	r4, #0
 8004846:	00a6      	lsls	r6, r4, #2
 8004848:	627e      	str	r6, [r7, #36]	; 0x24
 800484a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800484c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8004850:	627e      	str	r6, [r7, #36]	; 0x24
 8004852:	009c      	lsls	r4, r3, #2
 8004854:	623c      	str	r4, [r7, #32]
 8004856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800485a:	f7fb fcbd 	bl	80001d8 <__aeabi_uldivmod>
 800485e:	4603      	mov	r3, r0
 8004860:	460c      	mov	r4, r1
 8004862:	461a      	mov	r2, r3
 8004864:	4b2d      	ldr	r3, [pc, #180]	; (800491c <UART_SetConfig+0x35c>)
 8004866:	fba3 1302 	umull	r1, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2164      	movs	r1, #100	; 0x64
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	3332      	adds	r3, #50	; 0x32
 8004878:	4a28      	ldr	r2, [pc, #160]	; (800491c <UART_SetConfig+0x35c>)
 800487a:	fba2 1303 	umull	r1, r3, r2, r3
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004884:	441d      	add	r5, r3
 8004886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004888:	4619      	mov	r1, r3
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	460b      	mov	r3, r1
 8004890:	4614      	mov	r4, r2
 8004892:	18db      	adds	r3, r3, r3
 8004894:	eb44 0404 	adc.w	r4, r4, r4
 8004898:	185b      	adds	r3, r3, r1
 800489a:	eb44 0402 	adc.w	r4, r4, r2
 800489e:	00e0      	lsls	r0, r4, #3
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	00d8      	lsls	r0, r3, #3
 80048ac:	6038      	str	r0, [r7, #0]
 80048ae:	e897 0018 	ldmia.w	r7, {r3, r4}
 80048b2:	eb13 0801 	adds.w	r8, r3, r1
 80048b6:	eb44 0902 	adc.w	r9, r4, r2
 80048ba:	4640      	mov	r0, r8
 80048bc:	4649      	mov	r1, r9
 80048be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f04f 0400 	mov.w	r4, #0
 80048c6:	00a6      	lsls	r6, r4, #2
 80048c8:	61fe      	str	r6, [r7, #28]
 80048ca:	69fe      	ldr	r6, [r7, #28]
 80048cc:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80048d0:	61fe      	str	r6, [r7, #28]
 80048d2:	009c      	lsls	r4, r3, #2
 80048d4:	61bc      	str	r4, [r7, #24]
 80048d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048da:	f7fb fc7d 	bl	80001d8 <__aeabi_uldivmod>
 80048de:	4603      	mov	r3, r0
 80048e0:	460c      	mov	r4, r1
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b0d      	ldr	r3, [pc, #52]	; (800491c <UART_SetConfig+0x35c>)
 80048e6:	fba3 1302 	umull	r1, r3, r3, r2
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	2164      	movs	r1, #100	; 0x64
 80048ee:	fb01 f303 	mul.w	r3, r1, r3
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	3332      	adds	r3, #50	; 0x32
 80048f8:	4a08      	ldr	r2, [pc, #32]	; (800491c <UART_SetConfig+0x35c>)
 80048fa:	fba2 1303 	umull	r1, r3, r2, r3
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	442b      	add	r3, r5
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	6093      	str	r3, [r2, #8]
}
 800490a:	bf00      	nop
 800490c:	3744      	adds	r7, #68	; 0x44
 800490e:	46bd      	mov	sp, r7
 8004910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004914:	40011000 	.word	0x40011000
 8004918:	40011400 	.word	0x40011400
 800491c:	51eb851f 	.word	0x51eb851f

08004920 <LL_GPIO_SetPinMode>:
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	; 0x24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fa93 f3a3 	rbit	r3, r3
 800493a:	613b      	str	r3, [r7, #16]
  return result;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	fab3 f383 	clz	r3, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	2103      	movs	r1, #3
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	fa93 f3a3 	rbit	r3, r3
 800495a:	61bb      	str	r3, [r7, #24]
  return result;
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]
}
 8004972:	bf00      	nop
 8004974:	3724      	adds	r7, #36	; 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_GPIO_SetPinOutputType>:
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	43db      	mvns	r3, r3
 8004992:	401a      	ands	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	431a      	orrs	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	605a      	str	r2, [r3, #4]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <LL_GPIO_SetPinSpeed>:
{
 80049ae:	b480      	push	{r7}
 80049b0:	b089      	sub	sp, #36	; 0x24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	fa93 f3a3 	rbit	r3, r3
 80049c8:	613b      	str	r3, [r7, #16]
  return result;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	fab3 f383 	clz	r3, r3
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	2103      	movs	r1, #3
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	401a      	ands	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	fa93 f3a3 	rbit	r3, r3
 80049e8:	61bb      	str	r3, [r7, #24]
  return result;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	fab3 f383 	clz	r3, r3
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	431a      	orrs	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	3724      	adds	r7, #36	; 0x24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <LL_GPIO_SetPinPull>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	613b      	str	r3, [r7, #16]
  return result;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	fab3 f383 	clz	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	2103      	movs	r1, #3
 8004a34:	fa01 f303 	lsl.w	r3, r1, r3
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	61bb      	str	r3, [r7, #24]
  return result;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	fa01 f303 	lsl.w	r3, r1, r3
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	60da      	str	r2, [r3, #12]
}
 8004a5e:	bf00      	nop
 8004a60:	3724      	adds	r7, #36	; 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <LL_GPIO_SetAFPin_0_7>:
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b089      	sub	sp, #36	; 0x24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a1a      	ldr	r2, [r3, #32]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	fa93 f3a3 	rbit	r3, r3
 8004a84:	613b      	str	r3, [r7, #16]
  return result;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	fab3 f383 	clz	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	210f      	movs	r1, #15
 8004a92:	fa01 f303 	lsl.w	r3, r1, r3
 8004a96:	43db      	mvns	r3, r3
 8004a98:	401a      	ands	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa93 f3a3 	rbit	r3, r3
 8004aa4:	61bb      	str	r3, [r7, #24]
  return result;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	fab3 f383 	clz	r3, r3
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	621a      	str	r2, [r3, #32]
}
 8004abc:	bf00      	nop
 8004abe:	3724      	adds	r7, #36	; 0x24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_GPIO_SetAFPin_8_15>:
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b089      	sub	sp, #36	; 0x24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	fa93 f3a3 	rbit	r3, r3
 8004ae4:	613b      	str	r3, [r7, #16]
  return result;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	fab3 f383 	clz	r3, r3
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	210f      	movs	r1, #15
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	401a      	ands	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	0a1b      	lsrs	r3, r3, #8
 8004afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	fa93 f3a3 	rbit	r3, r3
 8004b06:	61bb      	str	r3, [r7, #24]
  return result;
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	fab3 f383 	clz	r3, r3
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b1e:	bf00      	nop
 8004b20:	3724      	adds	r7, #36	; 0x24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b088      	sub	sp, #32
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	fa93 f3a3 	rbit	r3, r3
 8004b48:	613b      	str	r3, [r7, #16]
  return result;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	fab3 f383 	clz	r3, r3
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004b54:	e050      	b.n	8004bf8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d042      	beq.n	8004bf2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d003      	beq.n	8004b7c <LL_GPIO_Init+0x52>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d10d      	bne.n	8004b98 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	461a      	mov	r2, r3
 8004b82:	69b9      	ldr	r1, [r7, #24]
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff12 	bl	80049ae <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	69b9      	ldr	r1, [r7, #24]
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fef3 	bl	800497e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	69b9      	ldr	r1, [r7, #24]
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff33 	bl	8004a0c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d11a      	bne.n	8004be4 <LL_GPIO_Init+0xba>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	fa93 f3a3 	rbit	r3, r3
 8004bb8:	60bb      	str	r3, [r7, #8]
  return result;
 8004bba:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004bbc:	fab3 f383 	clz	r3, r3
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b07      	cmp	r3, #7
 8004bc4:	d807      	bhi.n	8004bd6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	69b9      	ldr	r1, [r7, #24]
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff ff4b 	bl	8004a6a <LL_GPIO_SetAFPin_0_7>
 8004bd4:	e006      	b.n	8004be4 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	69b9      	ldr	r1, [r7, #24]
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff ff72 	bl	8004ac8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	461a      	mov	r2, r3
 8004bea:	69b9      	ldr	r1, [r7, #24]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff fe97 	bl	8004920 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1a7      	bne.n	8004b56 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3720      	adds	r7, #32
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c10:	b084      	sub	sp, #16
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	f107 001c 	add.w	r0, r7, #28
 8004c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d122      	bne.n	8004c6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d105      	bne.n	8004c62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f001 fc3a 	bl	80064dc <USB_CoreReset>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]
 8004c6c:	e01a      	b.n	8004ca4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f001 fc2e 	bl	80064dc <USB_CoreReset>
 8004c80:	4603      	mov	r3, r0
 8004c82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
 8004c96:	e005      	b.n	8004ca4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d10b      	bne.n	8004cc2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f043 0206 	orr.w	r2, r3, #6
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f043 0220 	orr.w	r2, r3, #32
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cce:	b004      	add	sp, #16
 8004cd0:	4770      	bx	lr
	...

08004cd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d165      	bne.n	8004db4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a41      	ldr	r2, [pc, #260]	; (8004df0 <USB_SetTurnaroundTime+0x11c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d906      	bls.n	8004cfe <USB_SetTurnaroundTime+0x2a>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a40      	ldr	r2, [pc, #256]	; (8004df4 <USB_SetTurnaroundTime+0x120>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d802      	bhi.n	8004cfe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004cf8:	230f      	movs	r3, #15
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e062      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4a3c      	ldr	r2, [pc, #240]	; (8004df4 <USB_SetTurnaroundTime+0x120>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d906      	bls.n	8004d14 <USB_SetTurnaroundTime+0x40>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4a3b      	ldr	r2, [pc, #236]	; (8004df8 <USB_SetTurnaroundTime+0x124>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d802      	bhi.n	8004d14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d0e:	230e      	movs	r3, #14
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e057      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4a38      	ldr	r2, [pc, #224]	; (8004df8 <USB_SetTurnaroundTime+0x124>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d906      	bls.n	8004d2a <USB_SetTurnaroundTime+0x56>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4a37      	ldr	r2, [pc, #220]	; (8004dfc <USB_SetTurnaroundTime+0x128>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d802      	bhi.n	8004d2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d24:	230d      	movs	r3, #13
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e04c      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4a33      	ldr	r2, [pc, #204]	; (8004dfc <USB_SetTurnaroundTime+0x128>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d906      	bls.n	8004d40 <USB_SetTurnaroundTime+0x6c>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4a32      	ldr	r2, [pc, #200]	; (8004e00 <USB_SetTurnaroundTime+0x12c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d802      	bhi.n	8004d40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e041      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4a2f      	ldr	r2, [pc, #188]	; (8004e00 <USB_SetTurnaroundTime+0x12c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d906      	bls.n	8004d56 <USB_SetTurnaroundTime+0x82>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a2e      	ldr	r2, [pc, #184]	; (8004e04 <USB_SetTurnaroundTime+0x130>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d802      	bhi.n	8004d56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d50:	230b      	movs	r3, #11
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e036      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <USB_SetTurnaroundTime+0x130>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d906      	bls.n	8004d6c <USB_SetTurnaroundTime+0x98>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <USB_SetTurnaroundTime+0x134>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d802      	bhi.n	8004d6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d66:	230a      	movs	r3, #10
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e02b      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a26      	ldr	r2, [pc, #152]	; (8004e08 <USB_SetTurnaroundTime+0x134>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d906      	bls.n	8004d82 <USB_SetTurnaroundTime+0xae>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4a25      	ldr	r2, [pc, #148]	; (8004e0c <USB_SetTurnaroundTime+0x138>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d802      	bhi.n	8004d82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d7c:	2309      	movs	r3, #9
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e020      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <USB_SetTurnaroundTime+0x138>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d906      	bls.n	8004d98 <USB_SetTurnaroundTime+0xc4>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4a20      	ldr	r2, [pc, #128]	; (8004e10 <USB_SetTurnaroundTime+0x13c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d802      	bhi.n	8004d98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d92:	2308      	movs	r3, #8
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e015      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <USB_SetTurnaroundTime+0x13c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d906      	bls.n	8004dae <USB_SetTurnaroundTime+0xda>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <USB_SetTurnaroundTime+0x140>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d802      	bhi.n	8004dae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004da8:	2307      	movs	r3, #7
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e00a      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004dae:	2306      	movs	r3, #6
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e007      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004dba:	2309      	movs	r3, #9
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e001      	b.n	8004dc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004dc0:	2309      	movs	r3, #9
 8004dc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	029b      	lsls	r3, r3, #10
 8004dd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	00d8acbf 	.word	0x00d8acbf
 8004df4:	00e4e1bf 	.word	0x00e4e1bf
 8004df8:	00f423ff 	.word	0x00f423ff
 8004dfc:	0106737f 	.word	0x0106737f
 8004e00:	011a499f 	.word	0x011a499f
 8004e04:	01312cff 	.word	0x01312cff
 8004e08:	014ca43f 	.word	0x014ca43f
 8004e0c:	016e35ff 	.word	0x016e35ff
 8004e10:	01a6ab1f 	.word	0x01a6ab1f
 8004e14:	01e847ff 	.word	0x01e847ff

08004e18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f043 0201 	orr.w	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d115      	bne.n	8004eaa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e8a:	2001      	movs	r0, #1
 8004e8c:	f7fc ff96 	bl	8001dbc <HAL_Delay>
      ms++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 fa8b 	bl	80063b2 <USB_GetMode>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d01e      	beq.n	8004ee0 <USB_SetCurrentMode+0x84>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b31      	cmp	r3, #49	; 0x31
 8004ea6:	d9f0      	bls.n	8004e8a <USB_SetCurrentMode+0x2e>
 8004ea8:	e01a      	b.n	8004ee0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d115      	bne.n	8004edc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	f7fc ff7d 	bl	8001dbc <HAL_Delay>
      ms++;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 fa72 	bl	80063b2 <USB_GetMode>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <USB_SetCurrentMode+0x84>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b31      	cmp	r3, #49	; 0x31
 8004ed8:	d9f0      	bls.n	8004ebc <USB_SetCurrentMode+0x60>
 8004eda:	e001      	b.n	8004ee0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e005      	b.n	8004eec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b32      	cmp	r3, #50	; 0x32
 8004ee4:	d101      	bne.n	8004eea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b086      	sub	sp, #24
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	e009      	b.n	8004f28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	3340      	adds	r3, #64	; 0x40
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	3301      	adds	r3, #1
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b0e      	cmp	r3, #14
 8004f2c:	d9f2      	bls.n	8004f14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d11d      	bne.n	8004f70 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f043 0302 	orr.w	r3, r3, #2
 8004f48:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f6e:	e00b      	b.n	8004f88 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f8e:	461a      	mov	r2, r3
 8004f90:	2300      	movs	r3, #0
 8004f92:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d10c      	bne.n	8004fc6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f967 	bl	8005288 <USB_SetDevSpeed>
 8004fba:	e008      	b.n	8004fce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f962 	bl	8005288 <USB_SetDevSpeed>
 8004fc4:	e003      	b.n	8004fce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fc6:	2103      	movs	r1, #3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f95d 	bl	8005288 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fce:	2110      	movs	r1, #16
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f8f5 	bl	80051c0 <USB_FlushTxFifo>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f921 	bl	8005228 <USB_FlushRxFifo>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005002:	461a      	mov	r2, r3
 8005004:	2300      	movs	r3, #0
 8005006:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	461a      	mov	r2, r3
 8005010:	2300      	movs	r3, #0
 8005012:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	e043      	b.n	80050a2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800502c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005030:	d118      	bne.n	8005064 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	461a      	mov	r2, r3
 8005046:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	e013      	b.n	8005076 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505a:	461a      	mov	r2, r3
 800505c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e008      	b.n	8005076 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	461a      	mov	r2, r3
 8005072:	2300      	movs	r3, #0
 8005074:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005082:	461a      	mov	r2, r3
 8005084:	2300      	movs	r3, #0
 8005086:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005094:	461a      	mov	r2, r3
 8005096:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800509a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	3301      	adds	r3, #1
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d8b7      	bhi.n	800501a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e043      	b.n	8005138 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c6:	d118      	bne.n	80050fa <USB_DevInit+0x206>
    {
      if (i == 0U)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	461a      	mov	r2, r3
 80050dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e013      	b.n	800510c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	461a      	mov	r2, r3
 80050f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	e008      	b.n	800510c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	461a      	mov	r2, r3
 8005108:	2300      	movs	r3, #0
 800510a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005118:	461a      	mov	r2, r3
 800511a:	2300      	movs	r3, #0
 800511c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	461a      	mov	r2, r3
 800512c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005130:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3301      	adds	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	429a      	cmp	r2, r3
 800513e:	d8b7      	bhi.n	80050b0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005146:	461a      	mov	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005154:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005162:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f043 0210 	orr.w	r2, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <USB_DevInit+0x2c8>)
 800517c:	4313      	orrs	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f043 0208 	orr.w	r2, r3, #8
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005196:	2b01      	cmp	r3, #1
 8005198:	d107      	bne.n	80051aa <USB_DevInit+0x2b6>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051a2:	f043 0304 	orr.w	r3, r3, #4
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051b6:	b004      	add	sp, #16
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	803c3800 	.word	0x803c3800

080051c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a13      	ldr	r2, [pc, #76]	; (8005224 <USB_FlushTxFifo+0x64>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e01b      	b.n	8005218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	daf2      	bge.n	80051ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	019b      	lsls	r3, r3, #6
 80051f0:	f043 0220 	orr.w	r2, r3, #32
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a08      	ldr	r2, [pc, #32]	; (8005224 <USB_FlushTxFifo+0x64>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e006      	b.n	8005218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b20      	cmp	r3, #32
 8005214:	d0f0      	beq.n	80051f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	00030d40 	.word	0x00030d40

08005228 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3301      	adds	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4a11      	ldr	r2, [pc, #68]	; (8005284 <USB_FlushRxFifo+0x5c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e018      	b.n	8005278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	daf2      	bge.n	8005234 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2210      	movs	r2, #16
 8005256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a08      	ldr	r2, [pc, #32]	; (8005284 <USB_FlushRxFifo+0x5c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e006      	b.n	8005278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b10      	cmp	r3, #16
 8005274:	d0f0      	beq.n	8005258 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	00030d40 	.word	0x00030d40

08005288 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529e:	4619      	mov	r1, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0306 	and.w	r3, r3, #6
 80052d4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052dc:	2300      	movs	r3, #0
 80052de:	75fb      	strb	r3, [r7, #23]
 80052e0:	e00a      	b.n	80052f8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d002      	beq.n	80052ee <USB_GetDevSpeed+0x32>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d102      	bne.n	80052f4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052ee:	2302      	movs	r3, #2
 80052f0:	75fb      	strb	r3, [r7, #23]
 80052f2:	e001      	b.n	80052f8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052f4:	230f      	movs	r3, #15
 80052f6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d13c      	bne.n	800539c <USB_ActivateEndpoint+0x96>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	4618      	mov	r0, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005330:	69da      	ldr	r2, [r3, #28]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	2101      	movs	r1, #1
 800533c:	fa01 f303 	lsl.w	r3, r1, r3
 8005340:	b29b      	uxth	r3, r3
 8005342:	4313      	orrs	r3, r2
 8005344:	61c3      	str	r3, [r0, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d158      	bne.n	800540e <USB_ActivateEndpoint+0x108>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	4618      	mov	r0, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	791b      	ldrb	r3, [r3, #4]
 8005384:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005386:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	059b      	lsls	r3, r3, #22
 800538c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800538e:	4313      	orrs	r3, r2
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005398:	6003      	str	r3, [r0, #0]
 800539a:	e038      	b.n	800540e <USB_ActivateEndpoint+0x108>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a2:	4618      	mov	r0, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	2101      	movs	r1, #1
 80053b6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	4313      	orrs	r3, r2
 80053be:	61c3      	str	r3, [r0, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d11b      	bne.n	800540e <USB_ActivateEndpoint+0x108>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e2:	4618      	mov	r0, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	791b      	ldrb	r3, [r3, #4]
 80053fe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005400:	430b      	orrs	r3, r1
 8005402:	4313      	orrs	r3, r2
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540c:	6003      	str	r3, [r0, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	785b      	ldrb	r3, [r3, #1]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d165      	bne.n	8005504 <USB_DeactivateEndpoint+0xe8>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800544a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800544e:	d121      	bne.n	8005494 <USB_DeactivateEndpoint+0x78>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	4619      	mov	r1, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005470:	600b      	str	r3, [r1, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547e:	4619      	mov	r1, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005492:	600b      	str	r3, [r1, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	4618      	mov	r0, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	2101      	movs	r1, #1
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	4013      	ands	r3, r2
 80054b8:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c0:	4618      	mov	r0, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f303 	lsl.w	r3, r1, r3
 80054d8:	b29b      	uxth	r3, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	4013      	ands	r3, r2
 80054de:	61c3      	str	r3, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	4619      	mov	r1, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b37      	ldr	r3, [pc, #220]	; (80055dc <USB_DeactivateEndpoint+0x1c0>)
 80054fe:	4013      	ands	r3, r2
 8005500:	600b      	str	r3, [r1, #0]
 8005502:	e064      	b.n	80055ce <USB_DeactivateEndpoint+0x1b2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551a:	d121      	bne.n	8005560 <USB_DeactivateEndpoint+0x144>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	4619      	mov	r1, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800553c:	600b      	str	r3, [r1, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554a:	4619      	mov	r1, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800555e:	600b      	str	r3, [r1, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	4618      	mov	r0, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	2101      	movs	r1, #1
 800557a:	fa01 f303 	lsl.w	r3, r1, r3
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	43db      	mvns	r3, r3
 8005582:	4013      	ands	r3, r2
 8005584:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558c:	4618      	mov	r0, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	69da      	ldr	r2, [r3, #28]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	2101      	movs	r1, #1
 80055a0:	fa01 f303 	lsl.w	r3, r1, r3
 80055a4:	041b      	lsls	r3, r3, #16
 80055a6:	43db      	mvns	r3, r3
 80055a8:	4013      	ands	r3, r2
 80055aa:	61c3      	str	r3, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	4619      	mov	r1, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <USB_DeactivateEndpoint+0x1c4>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	ec337800 	.word	0xec337800
 80055e0:	eff37800 	.word	0xeff37800

080055e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	; 0x28
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b01      	cmp	r3, #1
 8005602:	f040 816c 	bne.w	80058de <USB_EPStartXfer+0x2fa>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d135      	bne.n	800567a <USB_EPStartXfer+0x96>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561a:	4619      	mov	r1, r3
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800562e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005632:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	4619      	mov	r1, r3
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005654:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005662:	4619      	mov	r1, r3
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	0cdb      	lsrs	r3, r3, #19
 8005674:	04db      	lsls	r3, r3, #19
 8005676:	610b      	str	r3, [r1, #16]
 8005678:	e07a      	b.n	8005770 <USB_EPStartXfer+0x18c>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005686:	4619      	mov	r1, r3
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	0cdb      	lsrs	r3, r3, #19
 8005698:	04db      	lsls	r3, r3, #19
 800569a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	4619      	mov	r1, r3
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056c0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	4618      	mov	r0, r3
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6999      	ldr	r1, [r3, #24]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	440b      	add	r3, r1
 80056e8:	1e59      	subs	r1, r3, #1
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80056f2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056f4:	4ba1      	ldr	r3, [pc, #644]	; (800597c <USB_EPStartXfer+0x398>)
 80056f6:	400b      	ands	r3, r1
 80056f8:	4313      	orrs	r3, r2
 80056fa:	6103      	str	r3, [r0, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	4619      	mov	r1, r3
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005720:	4313      	orrs	r3, r2
 8005722:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	791b      	ldrb	r3, [r3, #4]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d121      	bne.n	8005770 <USB_EPStartXfer+0x18c>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	4619      	mov	r1, r3
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800574c:	610b      	str	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575a:	4619      	mov	r1, r3
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800576e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d14e      	bne.n	8005814 <USB_EPStartXfer+0x230>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <USB_EPStartXfer+0x1ae>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578a:	461a      	mov	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d12a      	bne.n	80057f0 <USB_EPStartXfer+0x20c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d111      	bne.n	80057ce <USB_EPStartXfer+0x1ea>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	4619      	mov	r1, r3
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ca:	600b      	str	r3, [r1, #0]
 80057cc:	e010      	b.n	80057f0 <USB_EPStartXfer+0x20c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	4619      	mov	r1, r3
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ee:	600b      	str	r3, [r1, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	4619      	mov	r1, r3
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005810:	600b      	str	r3, [r1, #0]
 8005812:	e140      	b.n	8005a96 <USB_EPStartXfer+0x4b2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	4619      	mov	r1, r3
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005834:	600b      	str	r3, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	791b      	ldrb	r3, [r3, #4]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d016      	beq.n	800586c <USB_EPStartXfer+0x288>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8127 	beq.w	8005a96 <USB_EPStartXfer+0x4b2>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	4618      	mov	r0, r3
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	2101      	movs	r1, #1
 8005862:	fa01 f303 	lsl.w	r3, r1, r3
 8005866:	4313      	orrs	r3, r2
 8005868:	6343      	str	r3, [r0, #52]	; 0x34
 800586a:	e114      	b.n	8005a96 <USB_EPStartXfer+0x4b2>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d111      	bne.n	80058a0 <USB_EPStartXfer+0x2bc>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005888:	4619      	mov	r1, r3
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800589c:	600b      	str	r3, [r1, #0]
 800589e:	e010      	b.n	80058c2 <USB_EPStartXfer+0x2de>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ac:	4619      	mov	r1, r3
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c0:	600b      	str	r3, [r1, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6919      	ldr	r1, [r3, #16]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	781a      	ldrb	r2, [r3, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	b298      	uxth	r0, r3
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	4603      	mov	r3, r0
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 faf9 	bl	8005ece <USB_WritePacket>
 80058dc:	e0db      	b.n	8005a96 <USB_EPStartXfer+0x4b2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ea:	4619      	mov	r1, r3
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	0cdb      	lsrs	r3, r3, #19
 80058fc:	04db      	lsls	r3, r3, #19
 80058fe:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	4619      	mov	r1, r3
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005920:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005924:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d128      	bne.n	8005980 <USB_EPStartXfer+0x39c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	4619      	mov	r1, r3
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005952:	4313      	orrs	r3, r2
 8005954:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	4619      	mov	r1, r3
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005976:	610b      	str	r3, [r1, #16]
 8005978:	e03c      	b.n	80059f4 <USB_EPStartXfer+0x410>
 800597a:	bf00      	nop
 800597c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4413      	add	r3, r2
 800598a:	1e5a      	subs	r2, r3, #1
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	8afa      	ldrh	r2, [r7, #22]
 800599c:	fb02 f203 	mul.w	r2, r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	4618      	mov	r0, r3
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	8afb      	ldrh	r3, [r7, #22]
 80059c2:	04d9      	lsls	r1, r3, #19
 80059c4:	4b36      	ldr	r3, [pc, #216]	; (8005aa0 <USB_EPStartXfer+0x4bc>)
 80059c6:	400b      	ands	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d8:	4619      	mov	r1, r3
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f0:	4313      	orrs	r3, r2
 80059f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d10d      	bne.n	8005a16 <USB_EPStartXfer+0x432>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <USB_EPStartXfer+0x432>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	6153      	str	r3, [r2, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d12a      	bne.n	8005a74 <USB_EPStartXfer+0x490>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d111      	bne.n	8005a52 <USB_EPStartXfer+0x46e>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a4e:	600b      	str	r3, [r1, #0]
 8005a50:	e010      	b.n	8005a74 <USB_EPStartXfer+0x490>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5e:	4619      	mov	r1, r3
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a72:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	4619      	mov	r1, r3
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a94:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	1ff80000 	.word	0x1ff80000

08005aa4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f040 80d8 	bne.w	8005c76 <USB_EP0StartXfer+0x1d2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d135      	bne.n	8005b3a <USB_EP0StartXfer+0x96>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	4619      	mov	r1, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005af2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	4619      	mov	r1, r3
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b14:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b22:	4619      	mov	r1, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	0cdb      	lsrs	r3, r3, #19
 8005b34:	04db      	lsls	r3, r3, #19
 8005b36:	610b      	str	r3, [r1, #16]
 8005b38:	e052      	b.n	8005be0 <USB_EP0StartXfer+0x13c>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b46:	4619      	mov	r1, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	0cdb      	lsrs	r3, r3, #19
 8005b58:	04db      	lsls	r3, r3, #19
 8005b5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	4619      	mov	r1, r3
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b80:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d903      	bls.n	8005b96 <USB_EP0StartXfer+0xf2>
      {
        ep->xfer_len = ep->maxpacket;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005be0:	79fb      	ldrb	r3, [r7, #7]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d11f      	bne.n	8005c26 <USB_EP0StartXfer+0x182>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <USB_EP0StartXfer+0x15e>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0e:	4619      	mov	r1, r3
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c22:	600b      	str	r3, [r1, #0]
 8005c24:	e09e      	b.n	8005d64 <USB_EP0StartXfer+0x2c0>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c32:	4619      	mov	r1, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c46:	600b      	str	r3, [r1, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8089 	beq.w	8005d64 <USB_EP0StartXfer+0x2c0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	4618      	mov	r0, r3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c70:	4313      	orrs	r3, r2
 8005c72:	6343      	str	r3, [r0, #52]	; 0x34
 8005c74:	e076      	b.n	8005d64 <USB_EP0StartXfer+0x2c0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	4619      	mov	r1, r3
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	0cdb      	lsrs	r3, r3, #19
 8005c94:	04db      	lsls	r3, r3, #19
 8005c96:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cbc:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <USB_EP0StartXfer+0x22a>
    {
      ep->xfer_len = ep->maxpacket;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	4619      	mov	r1, r3
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d10d      	bne.n	8005d42 <USB_EP0StartXfer+0x29e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d009      	beq.n	8005d42 <USB_EP0StartXfer+0x29e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	6153      	str	r3, [r2, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	4619      	mov	r1, r3
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d62:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b087      	sub	sp, #28
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d14c      	bne.n	8005e2a <USB_EPStopXfer+0xb8>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da8:	f040 808a 	bne.w	8005ec0 <USB_EPStopXfer+0x14e>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	4619      	mov	r1, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dd0:	600b      	str	r3, [r1, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	4619      	mov	r1, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005df6:	600b      	str	r3, [r1, #0]

      do
      {
        count++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d902      	bls.n	8005e0e <USB_EPStopXfer+0x9c>
        {
          ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8005e0c:	e058      	b.n	8005ec0 <USB_EPStopXfer+0x14e>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e26:	d0e7      	beq.n	8005df8 <USB_EPStopXfer+0x86>
 8005e28:	e04a      	b.n	8005ec0 <USB_EPStopXfer+0x14e>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e42:	d13d      	bne.n	8005ec0 <USB_EPStopXfer+0x14e>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	4619      	mov	r1, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e68:	600b      	str	r3, [r1, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e78:	4619      	mov	r1, r3
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e8e:	600b      	str	r3, [r1, #0]

      do
      {
        count++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d902      	bls.n	8005ea6 <USB_EPStopXfer+0x134>
        {
          ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ea4:	e00c      	b.n	8005ec0 <USB_EPStopXfer+0x14e>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ebe:	d0e7      	beq.n	8005e90 <USB_EPStopXfer+0x11e>
    }
  }

  return ret;
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b089      	sub	sp, #36	; 0x24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	4611      	mov	r1, r2
 8005eda:	461a      	mov	r2, r3
 8005edc:	460b      	mov	r3, r1
 8005ede:	71fb      	strb	r3, [r7, #7]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005eec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d123      	bne.n	8005f3c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ef4:	88bb      	ldrh	r3, [r7, #4]
 8005ef6:	3303      	adds	r3, #3
 8005ef8:	089b      	lsrs	r3, r3, #2
 8005efa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	e018      	b.n	8005f34 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	031a      	lsls	r2, r3, #12
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0e:	461a      	mov	r2, r3
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	3301      	adds	r3, #1
 8005f26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	3301      	adds	r3, #1
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d3e2      	bcc.n	8005f02 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3724      	adds	r7, #36	; 0x24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b08b      	sub	sp, #44	; 0x2c
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	4613      	mov	r3, r2
 8005f56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	089b      	lsrs	r3, r3, #2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f70:	2300      	movs	r3, #0
 8005f72:	623b      	str	r3, [r7, #32]
 8005f74:	e014      	b.n	8005fa0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	3301      	adds	r3, #1
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	3301      	adds	r3, #1
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	3301      	adds	r3, #1
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	623b      	str	r3, [r7, #32]
 8005fa0:	6a3a      	ldr	r2, [r7, #32]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d3e6      	bcc.n	8005f76 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fa8:	8bfb      	ldrh	r3, [r7, #30]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01d      	beq.n	8005fea <USB_ReadPacket+0xa0>
  {
    i = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fb2:	f107 0310 	add.w	r3, r7, #16
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fbc:	6812      	ldr	r2, [r2, #0]
 8005fbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	701a      	strb	r2, [r3, #0]
      i++;
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	3301      	adds	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005fde:	8bfb      	ldrh	r3, [r7, #30]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005fe4:	8bfb      	ldrh	r3, [r7, #30]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1ea      	bne.n	8005fc0 <USB_ReadPacket+0x76>
  }

  return ((void *)pDest);
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	372c      	adds	r7, #44	; 0x2c
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d12e      	bne.n	8006072 <USB_EPSetStall+0x7a>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	db13      	blt.n	800604e <USB_EPSetStall+0x56>
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <USB_EPSetStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006038:	4619      	mov	r1, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800604c:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605a:	4619      	mov	r1, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800606e:	600b      	str	r3, [r1, #0]
 8006070:	e02d      	b.n	80060ce <USB_EPSetStall+0xd6>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	db13      	blt.n	80060ac <USB_EPSetStall+0xb4>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d010      	beq.n	80060ac <USB_EPSetStall+0xb4>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	4619      	mov	r1, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060aa:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b8:	4619      	mov	r1, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060cc:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d12a      	bne.n	800614e <USB_EPClearStall+0x72>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	4619      	mov	r1, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006118:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	2b03      	cmp	r3, #3
 8006120:	d003      	beq.n	800612a <USB_EPClearStall+0x4e>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	791b      	ldrb	r3, [r3, #4]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d13b      	bne.n	80061a2 <USB_EPClearStall+0xc6>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006136:	4619      	mov	r1, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800614a:	600b      	str	r3, [r1, #0]
 800614c:	e029      	b.n	80061a2 <USB_EPClearStall+0xc6>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	4619      	mov	r1, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800616e:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	791b      	ldrb	r3, [r3, #4]
 8006174:	2b03      	cmp	r3, #3
 8006176:	d003      	beq.n	8006180 <USB_EPClearStall+0xa4>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	791b      	ldrb	r3, [r3, #4]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d110      	bne.n	80061a2 <USB_EPClearStall+0xc6>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	4619      	mov	r1, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a0:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c6:	461a      	mov	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061dc:	4619      	mov	r1, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061ee:	4313      	orrs	r3, r2
 80061f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006212:	461a      	mov	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f023 0303 	bic.w	r3, r3, #3
 8006220:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006228:	461a      	mov	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f023 0302 	bic.w	r3, r3, #2
 8006236:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006258:	461a      	mov	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626e:	461a      	mov	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f043 0302 	orr.w	r3, r3, #2
 800627c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4013      	ands	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062a4:	68fb      	ldr	r3, [r7, #12]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b085      	sub	sp, #20
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	4013      	ands	r3, r2
 80062d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	0c1b      	lsrs	r3, r3, #16
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4013      	ands	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	b29b      	uxth	r3, r3
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	4013      	ands	r3, r2
 8006346:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006348:	68bb      	ldr	r3, [r7, #8]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006356:	b480      	push	{r7}
 8006358:	b087      	sub	sp, #28
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006378:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	fa22 f303 	lsr.w	r3, r2, r3
 8006386:	01db      	lsls	r3, r3, #7
 8006388:	b2db      	uxtb	r3, r3
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	4013      	ands	r3, r2
 80063a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063a4:	68bb      	ldr	r3, [r7, #8]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0301 	and.w	r3, r3, #1
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	461a      	mov	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fa:	461a      	mov	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006408:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	460b      	mov	r3, r1
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	333c      	adds	r3, #60	; 0x3c
 800642e:	3304      	adds	r3, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4a28      	ldr	r2, [pc, #160]	; (80064d8 <USB_EP0_OutStart+0xc0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d90a      	bls.n	8006452 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800644c:	d101      	bne.n	8006452 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e03b      	b.n	80064ca <USB_EP0_OutStart+0xb2>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	461a      	mov	r2, r3
 800645a:	2300      	movs	r3, #0
 800645c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	461a      	mov	r2, r3
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006472:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	461a      	mov	r2, r3
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f043 0318 	orr.w	r3, r3, #24
 8006488:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	461a      	mov	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800649e:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d110      	bne.n	80064c8 <USB_EP0_OutStart+0xb0>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	461a      	mov	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b8:	461a      	mov	r2, r3
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	4f54300a 	.word	0x4f54300a

080064dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a13      	ldr	r2, [pc, #76]	; (8006540 <USB_CoreReset+0x64>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d901      	bls.n	80064fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e01b      	b.n	8006532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	daf2      	bge.n	80064e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f043 0201 	orr.w	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a09      	ldr	r2, [pc, #36]	; (8006540 <USB_CoreReset+0x64>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e006      	b.n	8006532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b01      	cmp	r3, #1
 800652e:	d0f0      	beq.n	8006512 <USB_CoreReset+0x36>

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	00030d40 	.word	0x00030d40

08006544 <USB_ActivateRemoteWakeup>:
  * @brief  USB_ActivateRemoteWakeup active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60fb      	str	r3, [r7, #12]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b01      	cmp	r3, #1
 800655e:	d10a      	bne.n	8006576 <USB_ActivateRemoteWakeup+0x32>
  {
    /* active Remote wakeup signalling */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_RWUSIG;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	461a      	mov	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USB_DeActivateRemoteWakeup>:
  * @brief  USB_DeActivateRemoteWakeup de-active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60fb      	str	r3, [r7, #12]

  /* active Remote wakeup signalling */
  USBx_DEVICE->DCTL &= ~(USB_OTG_DCTL_RWUSIG);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006596:	461a      	mov	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	4613      	mov	r3, r2
 80065c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e01f      	b.n	800660c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	79fa      	ldrb	r2, [r7, #7]
 80065fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7fa ff63 	bl	80014cc <USBD_LL_Init>
 8006606:	4603      	mov	r3, r0
 8006608:	75fb      	strb	r3, [r7, #23]

  return ret;
 800660a:	7dfb      	ldrb	r3, [r7, #23]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006628:	2303      	movs	r3, #3
 800662a:	e025      	b.n	8006678 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	32ae      	adds	r2, #174	; 0xae
 800663e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00f      	beq.n	8006668 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	32ae      	adds	r2, #174	; 0xae
 8006652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	f107 020e 	add.w	r2, r7, #14
 800665c:	4610      	mov	r0, r2
 800665e:	4798      	blx	r3
 8006660:	4602      	mov	r2, r0
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7fa ff65 	bl	8001558 <USBD_LL_Start>
 800668e:	4603      	mov	r3, r0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	460b      	mov	r3, r1
 80066b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d009      	beq.n	80066dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	78fa      	ldrb	r2, [r7, #3]
 80066d2:	4611      	mov	r1, r2
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	4611      	mov	r1, r2
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800670c:	2303      	movs	r3, #3
 800670e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f001 f8f9 	bl	8007924 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006740:	461a      	mov	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	2b01      	cmp	r3, #1
 8006754:	d00e      	beq.n	8006774 <USBD_LL_SetupStage+0x5a>
 8006756:	2b01      	cmp	r3, #1
 8006758:	d302      	bcc.n	8006760 <USBD_LL_SetupStage+0x46>
 800675a:	2b02      	cmp	r3, #2
 800675c:	d014      	beq.n	8006788 <USBD_LL_SetupStage+0x6e>
 800675e:	e01d      	b.n	800679c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fb5d 	bl	8006e28 <USBD_StdDevReq>
 800676e:	4603      	mov	r3, r0
 8006770:	73fb      	strb	r3, [r7, #15]
      break;
 8006772:	e020      	b.n	80067b6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fbc5 	bl	8006f0c <USBD_StdItfReq>
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]
      break;
 8006786:	e016      	b.n	80067b6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fc25 	bl	8006fe0 <USBD_StdEPReq>
 8006796:	4603      	mov	r3, r0
 8006798:	73fb      	strb	r3, [r7, #15]
      break;
 800679a:	e00c      	b.n	80067b6 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fa ff10 	bl	80015d0 <USBD_LL_StallEP>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
      break;
 80067b4:	bf00      	nop
  }

  return ret;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	460b      	mov	r3, r1
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d16c      	bne.n	80068b2 <USBD_LL_DataOutStage+0xf2>
  {
    pep = &pdev->ep_out[0];
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	f040 8096 	bne.w	8006918 <USBD_LL_DataOutStage+0x158>
    {
      if (pep->rem_length > pep->maxpacket)
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d913      	bls.n	8006820 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	1ad2      	subs	r2, r2, r3
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	4293      	cmp	r3, r2
 8006810:	bf28      	it	cs
 8006812:	4613      	movcs	r3, r2
 8006814:	461a      	mov	r2, r3
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f001 f95a 	bl	8007ad2 <USBD_CtlContinueRx>
 800681e:	e07b      	b.n	8006918 <USBD_LL_DataOutStage+0x158>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	2b01      	cmp	r3, #1
 800682c:	d007      	beq.n	800683e <USBD_LL_DataOutStage+0x7e>
 800682e:	2b01      	cmp	r3, #1
 8006830:	d302      	bcc.n	8006838 <USBD_LL_DataOutStage+0x78>
 8006832:	2b02      	cmp	r3, #2
 8006834:	d00e      	beq.n	8006854 <USBD_LL_DataOutStage+0x94>
 8006836:	e018      	b.n	800686a <USBD_LL_DataOutStage+0xaa>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	75bb      	strb	r3, [r7, #22]
            break;
 800683c:	e018      	b.n	8006870 <USBD_LL_DataOutStage+0xb0>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006844:	b2db      	uxtb	r3, r3
 8006846:	4619      	mov	r1, r3
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fa5e 	bl	8006d0a <USBD_CoreFindIF>
 800684e:	4603      	mov	r3, r0
 8006850:	75bb      	strb	r3, [r7, #22]
            break;
 8006852:	e00d      	b.n	8006870 <USBD_LL_DataOutStage+0xb0>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800685a:	b2db      	uxtb	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fa60 	bl	8006d24 <USBD_CoreFindEP>
 8006864:	4603      	mov	r3, r0
 8006866:	75bb      	strb	r3, [r7, #22]
            break;
 8006868:	e002      	b.n	8006870 <USBD_LL_DataOutStage+0xb0>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	75bb      	strb	r3, [r7, #22]
            break;
 800686e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006870:	7dbb      	ldrb	r3, [r7, #22]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d119      	bne.n	80068aa <USBD_LL_DataOutStage+0xea>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b03      	cmp	r3, #3
 8006880:	d113      	bne.n	80068aa <USBD_LL_DataOutStage+0xea>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006882:	7dba      	ldrb	r2, [r7, #22]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	32ae      	adds	r2, #174	; 0xae
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00b      	beq.n	80068aa <USBD_LL_DataOutStage+0xea>
            {
              pdev->classId = idx;
 8006892:	7dba      	ldrb	r2, [r7, #22]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800689a:	7dba      	ldrb	r2, [r7, #22]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	32ae      	adds	r2, #174	; 0xae
 80068a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f001 f922 	bl	8007af4 <USBD_CtlSendStatus>
 80068b0:	e032      	b.n	8006918 <USBD_LL_DataOutStage+0x158>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	4619      	mov	r1, r3
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fa31 	bl	8006d24 <USBD_CoreFindEP>
 80068c2:	4603      	mov	r3, r0
 80068c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068c6:	7dbb      	ldrb	r3, [r7, #22]
 80068c8:	2bff      	cmp	r3, #255	; 0xff
 80068ca:	d025      	beq.n	8006918 <USBD_LL_DataOutStage+0x158>
 80068cc:	7dbb      	ldrb	r3, [r7, #22]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d122      	bne.n	8006918 <USBD_LL_DataOutStage+0x158>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d117      	bne.n	800690e <USBD_LL_DataOutStage+0x14e>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80068de:	7dba      	ldrb	r2, [r7, #22]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	32ae      	adds	r2, #174	; 0xae
 80068e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00f      	beq.n	800690e <USBD_LL_DataOutStage+0x14e>
        {
          pdev->classId = idx;
 80068ee:	7dba      	ldrb	r2, [r7, #22]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80068f6:	7dba      	ldrb	r2, [r7, #22]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	32ae      	adds	r2, #174	; 0xae
 80068fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	7afa      	ldrb	r2, [r7, #11]
 8006904:	4611      	mov	r1, r2
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	4798      	blx	r3
 800690a:	4603      	mov	r3, r0
 800690c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <USBD_LL_DataOutStage+0x158>
      {
        return ret;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	e000      	b.n	800691a <USBD_LL_DataOutStage+0x15a>
      }
    }
  }

  return USBD_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b086      	sub	sp, #24
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	460b      	mov	r3, r1
 800692c:	607a      	str	r2, [r7, #4]
 800692e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d16f      	bne.n	8006a16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3314      	adds	r3, #20
 800693a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006942:	2b02      	cmp	r3, #2
 8006944:	d15a      	bne.n	80069fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	429a      	cmp	r2, r3
 8006950:	d914      	bls.n	800697c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	461a      	mov	r2, r3
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f001 f8a1 	bl	8007ab0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800696e:	2300      	movs	r3, #0
 8006970:	2200      	movs	r2, #0
 8006972:	2100      	movs	r1, #0
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f7fa fea5 	bl	80016c4 <USBD_LL_PrepareReceive>
 800697a:	e03f      	b.n	80069fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	429a      	cmp	r2, r3
 8006986:	d11c      	bne.n	80069c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006990:	429a      	cmp	r2, r3
 8006992:	d316      	bcc.n	80069c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800699e:	429a      	cmp	r2, r3
 80069a0:	d20f      	bcs.n	80069c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069a2:	2200      	movs	r2, #0
 80069a4:	2100      	movs	r1, #0
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f001 f882 	bl	8007ab0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069b4:	2300      	movs	r3, #0
 80069b6:	2200      	movs	r2, #0
 80069b8:	2100      	movs	r1, #0
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f7fa fe82 	bl	80016c4 <USBD_LL_PrepareReceive>
 80069c0:	e01c      	b.n	80069fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d10f      	bne.n	80069ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d009      	beq.n	80069ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ee:	2180      	movs	r1, #128	; 0x80
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f7fa fded 	bl	80015d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f001 f88f 	bl	8007b1a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d03a      	beq.n	8006a7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fe46 	bl	8006698 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a14:	e032      	b.n	8006a7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006a16:	7afb      	ldrb	r3, [r7, #11]
 8006a18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	4619      	mov	r1, r3
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f97f 	bl	8006d24 <USBD_CoreFindEP>
 8006a26:	4603      	mov	r3, r0
 8006a28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	2bff      	cmp	r3, #255	; 0xff
 8006a2e:	d025      	beq.n	8006a7c <USBD_LL_DataInStage+0x15a>
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d122      	bne.n	8006a7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d11c      	bne.n	8006a7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006a42:	7dfa      	ldrb	r2, [r7, #23]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	32ae      	adds	r2, #174	; 0xae
 8006a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d014      	beq.n	8006a7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006a52:	7dfa      	ldrb	r2, [r7, #23]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006a5a:	7dfa      	ldrb	r2, [r7, #23]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	32ae      	adds	r2, #174	; 0xae
 8006a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	7afa      	ldrb	r2, [r7, #11]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a72:	7dbb      	ldrb	r3, [r7, #22]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a78:	7dbb      	ldrb	r3, [r7, #22]
 8006a7a:	e000      	b.n	8006a7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d014      	beq.n	8006aec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00e      	beq.n	8006aec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6852      	ldr	r2, [r2, #4]
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	4611      	mov	r1, r2
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aec:	2340      	movs	r3, #64	; 0x40
 8006aee:	2200      	movs	r2, #0
 8006af0:	2100      	movs	r1, #0
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fa fd3f 	bl	8001576 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2240      	movs	r2, #64	; 0x40
 8006b04:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2180      	movs	r1, #128	; 0x80
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fa fd31 	bl	8001576 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2240      	movs	r2, #64	; 0x40
 8006b1e:	621a      	str	r2, [r3, #32]

  return ret;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	460b      	mov	r3, r1
 8006b34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	78fa      	ldrb	r2, [r7, #3]
 8006b3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2204      	movs	r2, #4
 8006b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d106      	bne.n	8006b98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d110      	bne.n	8006bdc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	32ae      	adds	r2, #174	; 0xae
 8006bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e01c      	b.n	8006c42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d115      	bne.n	8006c40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	32ae      	adds	r2, #174	; 0xae
 8006c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	32ae      	adds	r2, #174	; 0xae
 8006c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	32ae      	adds	r2, #174	; 0xae
 8006c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e01c      	b.n	8006ca6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d115      	bne.n	8006ca4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	32ae      	adds	r2, #174	; 0xae
 8006c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	32ae      	adds	r2, #174	; 0xae
 8006c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	78fa      	ldrb	r2, [r7, #3]
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6852      	ldr	r2, [r2, #4]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	460b      	mov	r3, r1
 8006d48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	885b      	ldrh	r3, [r3, #2]
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d920      	bls.n	8006da8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d6e:	e013      	b.n	8006d98 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d70:	f107 030a 	add.w	r3, r7, #10
 8006d74:	4619      	mov	r1, r3
 8006d76:	6978      	ldr	r0, [r7, #20]
 8006d78:	f000 f81b 	bl	8006db2 <USBD_GetNextDesc>
 8006d7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	785b      	ldrb	r3, [r3, #1]
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	d108      	bne.n	8006d98 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	789b      	ldrb	r3, [r3, #2]
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d008      	beq.n	8006da6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	885b      	ldrh	r3, [r3, #2]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d8e5      	bhi.n	8006d70 <USBD_GetEpDesc+0x32>
 8006da4:	e000      	b.n	8006da8 <USBD_GetEpDesc+0x6a>
          break;
 8006da6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006da8:	693b      	ldr	r3, [r7, #16]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	881a      	ldrh	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	4413      	add	r3, r2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4413      	add	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006dde:	68fb      	ldr	r3, [r7, #12]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	3301      	adds	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e0a:	8a3b      	ldrh	r3, [r7, #16]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	b21a      	sxth	r2, r3
 8006e10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	b21b      	sxth	r3, r3
 8006e18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e1a:	89fb      	ldrh	r3, [r7, #14]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d004      	beq.n	8006e4c <USBD_StdDevReq+0x24>
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d002      	beq.n	8006e4c <USBD_StdDevReq+0x24>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00e      	beq.n	8006e68 <USBD_StdDevReq+0x40>
 8006e4a:	e054      	b.n	8006ef6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	32ae      	adds	r2, #174	; 0xae
 8006e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	73fb      	strb	r3, [r7, #15]
      break;
 8006e66:	e04b      	b.n	8006f00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	785b      	ldrb	r3, [r3, #1]
 8006e6c:	2b09      	cmp	r3, #9
 8006e6e:	d83c      	bhi.n	8006eea <USBD_StdDevReq+0xc2>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <USBD_StdDevReq+0x50>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006ecd 	.word	0x08006ecd
 8006e7c:	08006ee1 	.word	0x08006ee1
 8006e80:	08006eeb 	.word	0x08006eeb
 8006e84:	08006ed7 	.word	0x08006ed7
 8006e88:	08006eeb 	.word	0x08006eeb
 8006e8c:	08006eab 	.word	0x08006eab
 8006e90:	08006ea1 	.word	0x08006ea1
 8006e94:	08006eeb 	.word	0x08006eeb
 8006e98:	08006ec3 	.word	0x08006ec3
 8006e9c:	08006eb5 	.word	0x08006eb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa32 	bl	800730c <USBD_GetDescriptor>
          break;
 8006ea8:	e024      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fb97 	bl	80075e0 <USBD_SetAddress>
          break;
 8006eb2:	e01f      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fbd6 	bl	8007668 <USBD_SetConfig>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]
          break;
 8006ec0:	e018      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fc79 	bl	80077bc <USBD_GetConfig>
          break;
 8006eca:	e013      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fca9 	bl	8007826 <USBD_GetStatus>
          break;
 8006ed4:	e00e      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fcd8 	bl	800788e <USBD_SetFeature>
          break;
 8006ede:	e009      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fcfc 	bl	80078e0 <USBD_ClrFeature>
          break;
 8006ee8:	e004      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fd53 	bl	8007998 <USBD_CtlError>
          break;
 8006ef2:	bf00      	nop
      }
      break;
 8006ef4:	e004      	b.n	8006f00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fd4d 	bl	8007998 <USBD_CtlError>
      break;
 8006efe:	bf00      	nop
  }

  return ret;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop

08006f0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d003      	beq.n	8006f2e <USBD_StdItfReq+0x22>
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d001      	beq.n	8006f2e <USBD_StdItfReq+0x22>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d14e      	bne.n	8006fcc <USBD_StdItfReq+0xc0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d840      	bhi.n	8006fbe <USBD_StdItfReq+0xb2>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	889b      	ldrh	r3, [r3, #4]
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d836      	bhi.n	8006fb4 <USBD_StdItfReq+0xa8>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	889b      	ldrh	r3, [r3, #4]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff fedb 	bl	8006d0a <USBD_CoreFindIF>
 8006f54:	4603      	mov	r3, r0
 8006f56:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2bff      	cmp	r3, #255	; 0xff
 8006f5c:	d01d      	beq.n	8006f9a <USBD_StdItfReq+0x8e>
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d11a      	bne.n	8006f9a <USBD_StdItfReq+0x8e>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f64:	7bba      	ldrb	r2, [r7, #14]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	32ae      	adds	r2, #174	; 0xae
 8006f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00f      	beq.n	8006f94 <USBD_StdItfReq+0x88>
              {
                pdev->classId = idx;
 8006f74:	7bba      	ldrb	r2, [r7, #14]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f7c:	7bba      	ldrb	r2, [r7, #14]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32ae      	adds	r2, #174	; 0xae
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f92:	e004      	b.n	8006f9e <USBD_StdItfReq+0x92>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f98:	e001      	b.n	8006f9e <USBD_StdItfReq+0x92>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	88db      	ldrh	r3, [r3, #6]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d110      	bne.n	8006fc8 <USBD_StdItfReq+0xbc>
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10d      	bne.n	8006fc8 <USBD_StdItfReq+0xbc>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fda1 	bl	8007af4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fb2:	e009      	b.n	8006fc8 <USBD_StdItfReq+0xbc>
            USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fcee 	bl	8007998 <USBD_CtlError>
          break;
 8006fbc:	e004      	b.n	8006fc8 <USBD_StdItfReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fce9 	bl	8007998 <USBD_CtlError>
          break;
 8006fc6:	e000      	b.n	8006fca <USBD_StdItfReq+0xbe>
          break;
 8006fc8:	bf00      	nop
      }
      break;
 8006fca:	e004      	b.n	8006fd6 <USBD_StdItfReq+0xca>

    default:
      USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fce2 	bl	8007998 <USBD_CtlError>
      break;
 8006fd4:	bf00      	nop
  }

  return ret;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	889b      	ldrh	r3, [r3, #4]
 8006ff2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d004      	beq.n	800700a <USBD_StdEPReq+0x2a>
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d002      	beq.n	800700a <USBD_StdEPReq+0x2a>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d028      	beq.n	800705a <USBD_StdEPReq+0x7a>
 8007008:	e174      	b.n	80072f4 <USBD_StdEPReq+0x314>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff fe88 	bl	8006d24 <USBD_CoreFindEP>
 8007014:	4603      	mov	r3, r0
 8007016:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007018:	7b7b      	ldrb	r3, [r7, #13]
 800701a:	2bff      	cmp	r3, #255	; 0xff
 800701c:	f000 816f 	beq.w	80072fe <USBD_StdEPReq+0x31e>
 8007020:	7b7b      	ldrb	r3, [r7, #13]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 816b 	bne.w	80072fe <USBD_StdEPReq+0x31e>
      {
        pdev->classId = idx;
 8007028:	7b7a      	ldrb	r2, [r7, #13]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007030:	7b7a      	ldrb	r2, [r7, #13]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	32ae      	adds	r2, #174	; 0xae
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 815e 	beq.w	80072fe <USBD_StdEPReq+0x31e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007042:	7b7a      	ldrb	r2, [r7, #13]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	32ae      	adds	r2, #174	; 0xae
 8007048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	4798      	blx	r3
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007058:	e151      	b.n	80072fe <USBD_StdEPReq+0x31e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d040      	beq.n	80070e4 <USBD_StdEPReq+0x104>
 8007062:	2b03      	cmp	r3, #3
 8007064:	d003      	beq.n	800706e <USBD_StdEPReq+0x8e>
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8097 	beq.w	800719a <USBD_StdEPReq+0x1ba>
 800706c:	e13c      	b.n	80072e8 <USBD_StdEPReq+0x308>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d002      	beq.n	8007080 <USBD_StdEPReq+0xa0>
 800707a:	2b03      	cmp	r3, #3
 800707c:	d015      	beq.n	80070aa <USBD_StdEPReq+0xca>
 800707e:	e02b      	b.n	80070d8 <USBD_StdEPReq+0xf8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00c      	beq.n	80070a0 <USBD_StdEPReq+0xc0>
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	2b80      	cmp	r3, #128	; 0x80
 800708a:	d009      	beq.n	80070a0 <USBD_StdEPReq+0xc0>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7fa fa9d 	bl	80015d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007096:	2180      	movs	r1, #128	; 0x80
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7fa fa99 	bl	80015d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800709e:	e020      	b.n	80070e2 <USBD_StdEPReq+0x102>
                USBD_CtlError(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fc78 	bl	8007998 <USBD_CtlError>
              break;
 80070a8:	e01b      	b.n	80070e2 <USBD_StdEPReq+0x102>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	885b      	ldrh	r3, [r3, #2]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10e      	bne.n	80070d0 <USBD_StdEPReq+0xf0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <USBD_StdEPReq+0xf0>
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	2b80      	cmp	r3, #128	; 0x80
 80070bc:	d008      	beq.n	80070d0 <USBD_StdEPReq+0xf0>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	88db      	ldrh	r3, [r3, #6]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <USBD_StdEPReq+0xf0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7fa fa80 	bl	80015d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fd0f 	bl	8007af4 <USBD_CtlSendStatus>

              break;
 80070d6:	e004      	b.n	80070e2 <USBD_StdEPReq+0x102>

            default:
              USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fc5c 	bl	8007998 <USBD_CtlError>
              break;
 80070e0:	bf00      	nop
          }
          break;
 80070e2:	e106      	b.n	80072f2 <USBD_StdEPReq+0x312>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d002      	beq.n	80070f6 <USBD_StdEPReq+0x116>
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d015      	beq.n	8007120 <USBD_StdEPReq+0x140>
 80070f4:	e04a      	b.n	800718c <USBD_StdEPReq+0x1ac>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00c      	beq.n	8007116 <USBD_StdEPReq+0x136>
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2b80      	cmp	r3, #128	; 0x80
 8007100:	d009      	beq.n	8007116 <USBD_StdEPReq+0x136>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fa fa62 	bl	80015d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800710c:	2180      	movs	r1, #128	; 0x80
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fa fa5e 	bl	80015d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007114:	e040      	b.n	8007198 <USBD_StdEPReq+0x1b8>
                USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fc3d 	bl	8007998 <USBD_CtlError>
              break;
 800711e:	e03b      	b.n	8007198 <USBD_StdEPReq+0x1b8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	885b      	ldrh	r3, [r3, #2]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d136      	bne.n	8007196 <USBD_StdEPReq+0x1b6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <USBD_StdEPReq+0x15c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fa fa5d 	bl	80015f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fcd9 	bl	8007af4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fdec 	bl	8006d24 <USBD_CoreFindEP>
 800714c:	4603      	mov	r3, r0
 800714e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007150:	7b7b      	ldrb	r3, [r7, #13]
 8007152:	2bff      	cmp	r3, #255	; 0xff
 8007154:	d01f      	beq.n	8007196 <USBD_StdEPReq+0x1b6>
 8007156:	7b7b      	ldrb	r3, [r7, #13]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d11c      	bne.n	8007196 <USBD_StdEPReq+0x1b6>
                {
                  pdev->classId = idx;
 800715c:	7b7a      	ldrb	r2, [r7, #13]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007164:	7b7a      	ldrb	r2, [r7, #13]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	32ae      	adds	r2, #174	; 0xae
 800716a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d010      	beq.n	8007196 <USBD_StdEPReq+0x1b6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007174:	7b7a      	ldrb	r2, [r7, #13]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	32ae      	adds	r2, #174	; 0xae
 800717a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
 8007186:	4603      	mov	r3, r0
 8007188:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800718a:	e004      	b.n	8007196 <USBD_StdEPReq+0x1b6>

            default:
              USBD_CtlError(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fc02 	bl	8007998 <USBD_CtlError>
              break;
 8007194:	e000      	b.n	8007198 <USBD_StdEPReq+0x1b8>
              break;
 8007196:	bf00      	nop
          }
          break;
 8007198:	e0ab      	b.n	80072f2 <USBD_StdEPReq+0x312>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d002      	beq.n	80071ac <USBD_StdEPReq+0x1cc>
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d032      	beq.n	8007210 <USBD_StdEPReq+0x230>
 80071aa:	e097      	b.n	80072dc <USBD_StdEPReq+0x2fc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d007      	beq.n	80071c2 <USBD_StdEPReq+0x1e2>
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	2b80      	cmp	r3, #128	; 0x80
 80071b6:	d004      	beq.n	80071c2 <USBD_StdEPReq+0x1e2>
              {
                USBD_CtlError(pdev, req);
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fbec 	bl	8007998 <USBD_CtlError>
                break;
 80071c0:	e091      	b.n	80072e6 <USBD_StdEPReq+0x306>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	da0b      	bge.n	80071e2 <USBD_StdEPReq+0x202>
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	3310      	adds	r3, #16
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	4413      	add	r3, r2
 80071de:	3304      	adds	r3, #4
 80071e0:	e00b      	b.n	80071fa <USBD_StdEPReq+0x21a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	4413      	add	r3, r2
 80071f8:	3304      	adds	r3, #4
 80071fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2202      	movs	r2, #2
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fc36 	bl	8007a7a <USBD_CtlSendData>
              break;
 800720e:	e06a      	b.n	80072e6 <USBD_StdEPReq+0x306>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007214:	2b00      	cmp	r3, #0
 8007216:	da11      	bge.n	800723c <USBD_StdEPReq+0x25c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	f003 020f 	and.w	r2, r3, #15
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	440b      	add	r3, r1
 800722a:	3324      	adds	r3, #36	; 0x24
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d117      	bne.n	8007262 <USBD_StdEPReq+0x282>
                {
                  USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fbaf 	bl	8007998 <USBD_CtlError>
                  break;
 800723a:	e054      	b.n	80072e6 <USBD_StdEPReq+0x306>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	f003 020f 	and.w	r2, r3, #15
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	440b      	add	r3, r1
 800724e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <USBD_StdEPReq+0x282>
                {
                  USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fb9c 	bl	8007998 <USBD_CtlError>
                  break;
 8007260:	e041      	b.n	80072e6 <USBD_StdEPReq+0x306>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007266:	2b00      	cmp	r3, #0
 8007268:	da0b      	bge.n	8007282 <USBD_StdEPReq+0x2a2>
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	3310      	adds	r3, #16
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	3304      	adds	r3, #4
 8007280:	e00b      	b.n	800729a <USBD_StdEPReq+0x2ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	4413      	add	r3, r2
 8007298:	3304      	adds	r3, #4
 800729a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <USBD_StdEPReq+0x2c8>
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b80      	cmp	r3, #128	; 0x80
 80072a6:	d103      	bne.n	80072b0 <USBD_StdEPReq+0x2d0>
              {
                pep->status = 0x0000U;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e00e      	b.n	80072ce <USBD_StdEPReq+0x2ee>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7fa f9b1 	bl	800161c <USBD_LL_IsStallEP>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <USBD_StdEPReq+0x2e8>
              {
                pep->status = 0x0001U;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e002      	b.n	80072ce <USBD_StdEPReq+0x2ee>
              }
              else
              {
                pep->status = 0x0000U;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2202      	movs	r2, #2
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fbd0 	bl	8007a7a <USBD_CtlSendData>
              break;
 80072da:	e004      	b.n	80072e6 <USBD_StdEPReq+0x306>

            default:
              USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fb5a 	bl	8007998 <USBD_CtlError>
              break;
 80072e4:	bf00      	nop
          }
          break;
 80072e6:	e004      	b.n	80072f2 <USBD_StdEPReq+0x312>

        default:
          USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fb54 	bl	8007998 <USBD_CtlError>
          break;
 80072f0:	bf00      	nop
      }
      break;
 80072f2:	e005      	b.n	8007300 <USBD_StdEPReq+0x320>

    default:
      USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fb4e 	bl	8007998 <USBD_CtlError>
      break;
 80072fc:	e000      	b.n	8007300 <USBD_StdEPReq+0x320>
      break;
 80072fe:	bf00      	nop
  }

  return ret;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	885b      	ldrh	r3, [r3, #2]
 8007326:	0a1b      	lsrs	r3, r3, #8
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	2b06      	cmp	r3, #6
 800732e:	f200 8128 	bhi.w	8007582 <USBD_GetDescriptor+0x276>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <USBD_GetDescriptor+0x2c>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	08007355 	.word	0x08007355
 800733c:	0800736d 	.word	0x0800736d
 8007340:	080073ad 	.word	0x080073ad
 8007344:	08007583 	.word	0x08007583
 8007348:	08007583 	.word	0x08007583
 800734c:	08007523 	.word	0x08007523
 8007350:	0800754f 	.word	0x0800754f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	7c12      	ldrb	r2, [r2, #16]
 8007360:	f107 0108 	add.w	r1, r7, #8
 8007364:	4610      	mov	r0, r2
 8007366:	4798      	blx	r3
 8007368:	60f8      	str	r0, [r7, #12]
      break;
 800736a:	e112      	b.n	8007592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7c1b      	ldrb	r3, [r3, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10d      	bne.n	8007390 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	f107 0208 	add.w	r2, r7, #8
 8007380:	4610      	mov	r0, r2
 8007382:	4798      	blx	r3
 8007384:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3301      	adds	r3, #1
 800738a:	2202      	movs	r2, #2
 800738c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800738e:	e100      	b.n	8007592 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	f107 0208 	add.w	r2, r7, #8
 800739c:	4610      	mov	r0, r2
 800739e:	4798      	blx	r3
 80073a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	2202      	movs	r2, #2
 80073a8:	701a      	strb	r2, [r3, #0]
      break;
 80073aa:	e0f2      	b.n	8007592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	885b      	ldrh	r3, [r3, #2]
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b05      	cmp	r3, #5
 80073b4:	f200 80ac 	bhi.w	8007510 <USBD_GetDescriptor+0x204>
 80073b8:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <USBD_GetDescriptor+0xb4>)
 80073ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073be:	bf00      	nop
 80073c0:	080073d9 	.word	0x080073d9
 80073c4:	0800740d 	.word	0x0800740d
 80073c8:	08007441 	.word	0x08007441
 80073cc:	08007475 	.word	0x08007475
 80073d0:	080074a9 	.word	0x080074a9
 80073d4:	080074dd 	.word	0x080074dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00b      	beq.n	80073fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	7c12      	ldrb	r2, [r2, #16]
 80073f0:	f107 0108 	add.w	r1, r7, #8
 80073f4:	4610      	mov	r0, r2
 80073f6:	4798      	blx	r3
 80073f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073fa:	e091      	b.n	8007520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 faca 	bl	8007998 <USBD_CtlError>
            err++;
 8007404:	7afb      	ldrb	r3, [r7, #11]
 8007406:	3301      	adds	r3, #1
 8007408:	72fb      	strb	r3, [r7, #11]
          break;
 800740a:	e089      	b.n	8007520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00b      	beq.n	8007430 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	7c12      	ldrb	r2, [r2, #16]
 8007424:	f107 0108 	add.w	r1, r7, #8
 8007428:	4610      	mov	r0, r2
 800742a:	4798      	blx	r3
 800742c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800742e:	e077      	b.n	8007520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fab0 	bl	8007998 <USBD_CtlError>
            err++;
 8007438:	7afb      	ldrb	r3, [r7, #11]
 800743a:	3301      	adds	r3, #1
 800743c:	72fb      	strb	r3, [r7, #11]
          break;
 800743e:	e06f      	b.n	8007520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	7c12      	ldrb	r2, [r2, #16]
 8007458:	f107 0108 	add.w	r1, r7, #8
 800745c:	4610      	mov	r0, r2
 800745e:	4798      	blx	r3
 8007460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007462:	e05d      	b.n	8007520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa96 	bl	8007998 <USBD_CtlError>
            err++;
 800746c:	7afb      	ldrb	r3, [r7, #11]
 800746e:	3301      	adds	r3, #1
 8007470:	72fb      	strb	r3, [r7, #11]
          break;
 8007472:	e055      	b.n	8007520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00b      	beq.n	8007498 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	7c12      	ldrb	r2, [r2, #16]
 800748c:	f107 0108 	add.w	r1, r7, #8
 8007490:	4610      	mov	r0, r2
 8007492:	4798      	blx	r3
 8007494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007496:	e043      	b.n	8007520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa7c 	bl	8007998 <USBD_CtlError>
            err++;
 80074a0:	7afb      	ldrb	r3, [r7, #11]
 80074a2:	3301      	adds	r3, #1
 80074a4:	72fb      	strb	r3, [r7, #11]
          break;
 80074a6:	e03b      	b.n	8007520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	7c12      	ldrb	r2, [r2, #16]
 80074c0:	f107 0108 	add.w	r1, r7, #8
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ca:	e029      	b.n	8007520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fa62 	bl	8007998 <USBD_CtlError>
            err++;
 80074d4:	7afb      	ldrb	r3, [r7, #11]
 80074d6:	3301      	adds	r3, #1
 80074d8:	72fb      	strb	r3, [r7, #11]
          break;
 80074da:	e021      	b.n	8007520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00b      	beq.n	8007500 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	7c12      	ldrb	r2, [r2, #16]
 80074f4:	f107 0108 	add.w	r1, r7, #8
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074fe:	e00f      	b.n	8007520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa48 	bl	8007998 <USBD_CtlError>
            err++;
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	3301      	adds	r3, #1
 800750c:	72fb      	strb	r3, [r7, #11]
          break;
 800750e:	e007      	b.n	8007520 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa40 	bl	8007998 <USBD_CtlError>
          err++;
 8007518:	7afb      	ldrb	r3, [r7, #11]
 800751a:	3301      	adds	r3, #1
 800751c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800751e:	bf00      	nop
      }
      break;
 8007520:	e037      	b.n	8007592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7c1b      	ldrb	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d109      	bne.n	800753e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	f107 0208 	add.w	r2, r7, #8
 8007536:	4610      	mov	r0, r2
 8007538:	4798      	blx	r3
 800753a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800753c:	e029      	b.n	8007592 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa29 	bl	8007998 <USBD_CtlError>
        err++;
 8007546:	7afb      	ldrb	r3, [r7, #11]
 8007548:	3301      	adds	r3, #1
 800754a:	72fb      	strb	r3, [r7, #11]
      break;
 800754c:	e021      	b.n	8007592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7c1b      	ldrb	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10d      	bne.n	8007572 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	f107 0208 	add.w	r2, r7, #8
 8007562:	4610      	mov	r0, r2
 8007564:	4798      	blx	r3
 8007566:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	2207      	movs	r2, #7
 800756e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007570:	e00f      	b.n	8007592 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa0f 	bl	8007998 <USBD_CtlError>
        err++;
 800757a:	7afb      	ldrb	r3, [r7, #11]
 800757c:	3301      	adds	r3, #1
 800757e:	72fb      	strb	r3, [r7, #11]
      break;
 8007580:	e007      	b.n	8007592 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fa07 	bl	8007998 <USBD_CtlError>
      err++;
 800758a:	7afb      	ldrb	r3, [r7, #11]
 800758c:	3301      	adds	r3, #1
 800758e:	72fb      	strb	r3, [r7, #11]
      break;
 8007590:	bf00      	nop
  }

  if (err != 0U)
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d11e      	bne.n	80075d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	88db      	ldrh	r3, [r3, #6]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d016      	beq.n	80075ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80075a0:	893b      	ldrh	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00e      	beq.n	80075c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	88da      	ldrh	r2, [r3, #6]
 80075aa:	893b      	ldrh	r3, [r7, #8]
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bf28      	it	cs
 80075b0:	4613      	movcs	r3, r2
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075b6:	893b      	ldrh	r3, [r7, #8]
 80075b8:	461a      	mov	r2, r3
 80075ba:	68f9      	ldr	r1, [r7, #12]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fa5c 	bl	8007a7a <USBD_CtlSendData>
 80075c2:	e009      	b.n	80075d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f9e6 	bl	8007998 <USBD_CtlError>
 80075cc:	e004      	b.n	80075d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa90 	bl	8007af4 <USBD_CtlSendStatus>
 80075d4:	e000      	b.n	80075d8 <USBD_GetDescriptor+0x2cc>
    return;
 80075d6:	bf00      	nop
  }
}
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop

080075e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	889b      	ldrh	r3, [r3, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d131      	bne.n	8007656 <USBD_SetAddress+0x76>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	88db      	ldrh	r3, [r3, #6]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d12d      	bne.n	8007656 <USBD_SetAddress+0x76>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	885b      	ldrh	r3, [r3, #2]
 80075fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007600:	d829      	bhi.n	8007656 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	885b      	ldrh	r3, [r3, #2]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b03      	cmp	r3, #3
 8007618:	d104      	bne.n	8007624 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f9bb 	bl	8007998 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007622:	e01c      	b.n	800765e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7bfa      	ldrb	r2, [r7, #15]
 8007628:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7fa f81f 	bl	8001674 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa5c 	bl	8007af4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d004      	beq.n	800764c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2202      	movs	r2, #2
 8007646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764a:	e008      	b.n	800765e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007654:	e003      	b.n	800765e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f99d 	bl	8007998 <USBD_CtlError>
  }
}
 800765e:	bf00      	nop
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	885b      	ldrh	r3, [r3, #2]
 800767a:	b2da      	uxtb	r2, r3
 800767c:	4b4e      	ldr	r3, [pc, #312]	; (80077b8 <USBD_SetConfig+0x150>)
 800767e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007680:	4b4d      	ldr	r3, [pc, #308]	; (80077b8 <USBD_SetConfig+0x150>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d905      	bls.n	8007694 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f984 	bl	8007998 <USBD_CtlError>
    return USBD_FAIL;
 8007690:	2303      	movs	r3, #3
 8007692:	e08c      	b.n	80077ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d002      	beq.n	80076a6 <USBD_SetConfig+0x3e>
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d029      	beq.n	80076f8 <USBD_SetConfig+0x90>
 80076a4:	e075      	b.n	8007792 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80076a6:	4b44      	ldr	r3, [pc, #272]	; (80077b8 <USBD_SetConfig+0x150>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d020      	beq.n	80076f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80076ae:	4b42      	ldr	r3, [pc, #264]	; (80077b8 <USBD_SetConfig+0x150>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076b8:	4b3f      	ldr	r3, [pc, #252]	; (80077b8 <USBD_SetConfig+0x150>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fe fff5 	bl	80066ae <USBD_SetClassConfig>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d008      	beq.n	80076e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f961 	bl	8007998 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2202      	movs	r2, #2
 80076da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076de:	e065      	b.n	80077ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fa07 	bl	8007af4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2203      	movs	r2, #3
 80076ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076ee:	e05d      	b.n	80077ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f9ff 	bl	8007af4 <USBD_CtlSendStatus>
      break;
 80076f6:	e059      	b.n	80077ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076f8:	4b2f      	ldr	r3, [pc, #188]	; (80077b8 <USBD_SetConfig+0x150>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d112      	bne.n	8007726 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007708:	4b2b      	ldr	r3, [pc, #172]	; (80077b8 <USBD_SetConfig+0x150>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007712:	4b29      	ldr	r3, [pc, #164]	; (80077b8 <USBD_SetConfig+0x150>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7fe ffe4 	bl	80066e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9e8 	bl	8007af4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007724:	e042      	b.n	80077ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007726:	4b24      	ldr	r3, [pc, #144]	; (80077b8 <USBD_SetConfig+0x150>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d02a      	beq.n	800778a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7fe ffd2 	bl	80066e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007742:	4b1d      	ldr	r3, [pc, #116]	; (80077b8 <USBD_SetConfig+0x150>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800774c:	4b1a      	ldr	r3, [pc, #104]	; (80077b8 <USBD_SetConfig+0x150>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fe ffab 	bl	80066ae <USBD_SetClassConfig>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00f      	beq.n	8007782 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f917 	bl	8007998 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fe ffb7 	bl	80066e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007780:	e014      	b.n	80077ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9b6 	bl	8007af4 <USBD_CtlSendStatus>
      break;
 8007788:	e010      	b.n	80077ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f9b2 	bl	8007af4 <USBD_CtlSendStatus>
      break;
 8007790:	e00c      	b.n	80077ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f8ff 	bl	8007998 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800779a:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <USBD_SetConfig+0x150>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fe ffa0 	bl	80066e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80077a6:	2303      	movs	r3, #3
 80077a8:	73fb      	strb	r3, [r7, #15]
      break;
 80077aa:	bf00      	nop
  }

  return ret;
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000250 	.word	0x20000250

080077bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	88db      	ldrh	r3, [r3, #6]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d004      	beq.n	80077d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f8e1 	bl	8007998 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077d6:	e022      	b.n	800781e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	db17      	blt.n	8007814 <USBD_GetConfig+0x58>
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	dd02      	ble.n	80077ee <USBD_GetConfig+0x32>
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d00b      	beq.n	8007804 <USBD_GetConfig+0x48>
 80077ec:	e012      	b.n	8007814 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3308      	adds	r3, #8
 80077f8:	2201      	movs	r2, #1
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f93c 	bl	8007a7a <USBD_CtlSendData>
        break;
 8007802:	e00c      	b.n	800781e <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	2201      	movs	r2, #1
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f934 	bl	8007a7a <USBD_CtlSendData>
        break;
 8007812:	e004      	b.n	800781e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f8be 	bl	8007998 <USBD_CtlError>
        break;
 800781c:	bf00      	nop
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007836:	b2db      	uxtb	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	2b02      	cmp	r3, #2
 800783c:	d81e      	bhi.n	800787c <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	88db      	ldrh	r3, [r3, #6]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d004      	beq.n	8007850 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f8a5 	bl	8007998 <USBD_CtlError>
        break;
 800784e:	e01a      	b.n	8007886 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f043 0202 	orr.w	r2, r3, #2
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	330c      	adds	r3, #12
 8007870:	2202      	movs	r2, #2
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f900 	bl	8007a7a <USBD_CtlSendData>
      break;
 800787a:	e004      	b.n	8007886 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f88a 	bl	8007998 <USBD_CtlError>
      break;
 8007884:	bf00      	nop
  }
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	885b      	ldrh	r3, [r3, #2]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d107      	bne.n	80078b0 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f923 	bl	8007af4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80078ae:	e013      	b.n	80078d8 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	885b      	ldrh	r3, [r3, #2]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d10b      	bne.n	80078d0 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	889b      	ldrh	r3, [r3, #4]
 80078bc:	0a1b      	lsrs	r3, r3, #8
 80078be:	b29b      	uxth	r3, r3
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f913 	bl	8007af4 <USBD_CtlSendStatus>
}
 80078ce:	e003      	b.n	80078d8 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f860 	bl	8007998 <USBD_CtlError>
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d80b      	bhi.n	8007910 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	885b      	ldrh	r3, [r3, #2]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d10c      	bne.n	800791a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f8f3 	bl	8007af4 <USBD_CtlSendStatus>
      }
      break;
 800790e:	e004      	b.n	800791a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f840 	bl	8007998 <USBD_CtlError>
      break;
 8007918:	e000      	b.n	800791c <USBD_ClrFeature+0x3c>
      break;
 800791a:	bf00      	nop
  }
}
 800791c:	bf00      	nop
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	781a      	ldrb	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3301      	adds	r3, #1
 800793e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3301      	adds	r3, #1
 800794c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7ff fa4c 	bl	8006dec <SWAPBYTE>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3301      	adds	r3, #1
 8007960:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3301      	adds	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff fa3f 	bl	8006dec <SWAPBYTE>
 800796e:	4603      	mov	r3, r0
 8007970:	461a      	mov	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3301      	adds	r3, #1
 800797a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f7ff fa32 	bl	8006dec <SWAPBYTE>
 8007988:	4603      	mov	r3, r0
 800798a:	461a      	mov	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	80da      	strh	r2, [r3, #6]
}
 8007990:	bf00      	nop
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079a2:	2180      	movs	r1, #128	; 0x80
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7f9 fe13 	bl	80015d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079aa:	2100      	movs	r1, #0
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7f9 fe0f 	bl	80015d0 <USBD_LL_StallEP>
}
 80079b2:	bf00      	nop
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b086      	sub	sp, #24
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60f8      	str	r0, [r7, #12]
 80079c2:	60b9      	str	r1, [r7, #8]
 80079c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d036      	beq.n	8007a3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80079d4:	6938      	ldr	r0, [r7, #16]
 80079d6:	f000 f836 	bl	8007a46 <USBD_GetLen>
 80079da:	4603      	mov	r3, r0
 80079dc:	3301      	adds	r3, #1
 80079de:	b29b      	uxth	r3, r3
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	4413      	add	r3, r2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	7812      	ldrb	r2, [r2, #0]
 80079f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	3301      	adds	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	4413      	add	r3, r2
 8007a00:	2203      	movs	r2, #3
 8007a02:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	3301      	adds	r3, #1
 8007a08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a0a:	e013      	b.n	8007a34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4413      	add	r3, r2
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	7812      	ldrb	r2, [r2, #0]
 8007a16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	613b      	str	r3, [r7, #16]
    idx++;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	3301      	adds	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	4413      	add	r3, r2
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	3301      	adds	r3, #1
 8007a32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e7      	bne.n	8007a0c <USBD_GetString+0x52>
 8007a3c:	e000      	b.n	8007a40 <USBD_GetString+0x86>
    return;
 8007a3e:	bf00      	nop
  }
}
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a56:	e005      	b.n	8007a64 <USBD_GetLen+0x1e>
  {
    len++;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	3301      	adds	r3, #1
 8007a62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f5      	bne.n	8007a58 <USBD_GetLen+0x12>
  }

  return len;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f7f9 fdfa 	bl	800169a <USBD_LL_Transmit>

  return USBD_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7f9 fde9 	bl	800169a <USBD_LL_Transmit>

  return USBD_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7f9 fded 	bl	80016c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2204      	movs	r2, #4
 8007b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b04:	2300      	movs	r3, #0
 8007b06:	2200      	movs	r2, #0
 8007b08:	2100      	movs	r1, #0
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7f9 fdc5 	bl	800169a <USBD_LL_Transmit>

  return USBD_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2205      	movs	r2, #5
 8007b26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2100      	movs	r1, #0
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7f9 fdc7 	bl	80016c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	4e0d      	ldr	r6, [pc, #52]	; (8007b78 <__libc_init_array+0x38>)
 8007b44:	4c0d      	ldr	r4, [pc, #52]	; (8007b7c <__libc_init_array+0x3c>)
 8007b46:	1ba4      	subs	r4, r4, r6
 8007b48:	10a4      	asrs	r4, r4, #2
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	42a5      	cmp	r5, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	4e0b      	ldr	r6, [pc, #44]	; (8007b80 <__libc_init_array+0x40>)
 8007b52:	4c0c      	ldr	r4, [pc, #48]	; (8007b84 <__libc_init_array+0x44>)
 8007b54:	f000 f8fc 	bl	8007d50 <_init>
 8007b58:	1ba4      	subs	r4, r4, r6
 8007b5a:	10a4      	asrs	r4, r4, #2
 8007b5c:	2500      	movs	r5, #0
 8007b5e:	42a5      	cmp	r5, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b68:	4798      	blx	r3
 8007b6a:	3501      	adds	r5, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b72:	4798      	blx	r3
 8007b74:	3501      	adds	r5, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	08007dc8 	.word	0x08007dc8
 8007b7c:	08007dc8 	.word	0x08007dc8
 8007b80:	08007dc8 	.word	0x08007dc8
 8007b84:	08007dcc 	.word	0x08007dcc

08007b88 <malloc>:
 8007b88:	4b02      	ldr	r3, [pc, #8]	; (8007b94 <malloc+0xc>)
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	f000 b861 	b.w	8007c54 <_malloc_r>
 8007b92:	bf00      	nop
 8007b94:	20000144 	.word	0x20000144

08007b98 <free>:
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <free+0xc>)
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	f000 b80b 	b.w	8007bb8 <_free_r>
 8007ba2:	bf00      	nop
 8007ba4:	20000144 	.word	0x20000144

08007ba8 <memset>:
 8007ba8:	4402      	add	r2, r0
 8007baa:	4603      	mov	r3, r0
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d100      	bne.n	8007bb2 <memset+0xa>
 8007bb0:	4770      	bx	lr
 8007bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb6:	e7f9      	b.n	8007bac <memset+0x4>

08007bb8 <_free_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4605      	mov	r5, r0
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	d045      	beq.n	8007c4c <_free_r+0x94>
 8007bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc4:	1f0c      	subs	r4, r1, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfb8      	it	lt
 8007bca:	18e4      	addlt	r4, r4, r3
 8007bcc:	f000 f8b0 	bl	8007d30 <__malloc_lock>
 8007bd0:	4a1f      	ldr	r2, [pc, #124]	; (8007c50 <_free_r+0x98>)
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	b933      	cbnz	r3, 8007be6 <_free_r+0x2e>
 8007bd8:	6063      	str	r3, [r4, #4]
 8007bda:	6014      	str	r4, [r2, #0]
 8007bdc:	4628      	mov	r0, r5
 8007bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be2:	f000 b8a6 	b.w	8007d32 <__malloc_unlock>
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	d90c      	bls.n	8007c04 <_free_r+0x4c>
 8007bea:	6821      	ldr	r1, [r4, #0]
 8007bec:	1862      	adds	r2, r4, r1
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	bf04      	itt	eq
 8007bf2:	681a      	ldreq	r2, [r3, #0]
 8007bf4:	685b      	ldreq	r3, [r3, #4]
 8007bf6:	6063      	str	r3, [r4, #4]
 8007bf8:	bf04      	itt	eq
 8007bfa:	1852      	addeq	r2, r2, r1
 8007bfc:	6022      	streq	r2, [r4, #0]
 8007bfe:	6004      	str	r4, [r0, #0]
 8007c00:	e7ec      	b.n	8007bdc <_free_r+0x24>
 8007c02:	4613      	mov	r3, r2
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	b10a      	cbz	r2, 8007c0c <_free_r+0x54>
 8007c08:	42a2      	cmp	r2, r4
 8007c0a:	d9fa      	bls.n	8007c02 <_free_r+0x4a>
 8007c0c:	6819      	ldr	r1, [r3, #0]
 8007c0e:	1858      	adds	r0, r3, r1
 8007c10:	42a0      	cmp	r0, r4
 8007c12:	d10b      	bne.n	8007c2c <_free_r+0x74>
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	4401      	add	r1, r0
 8007c18:	1858      	adds	r0, r3, r1
 8007c1a:	4282      	cmp	r2, r0
 8007c1c:	6019      	str	r1, [r3, #0]
 8007c1e:	d1dd      	bne.n	8007bdc <_free_r+0x24>
 8007c20:	6810      	ldr	r0, [r2, #0]
 8007c22:	6852      	ldr	r2, [r2, #4]
 8007c24:	605a      	str	r2, [r3, #4]
 8007c26:	4401      	add	r1, r0
 8007c28:	6019      	str	r1, [r3, #0]
 8007c2a:	e7d7      	b.n	8007bdc <_free_r+0x24>
 8007c2c:	d902      	bls.n	8007c34 <_free_r+0x7c>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	e7d3      	b.n	8007bdc <_free_r+0x24>
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	1821      	adds	r1, r4, r0
 8007c38:	428a      	cmp	r2, r1
 8007c3a:	bf04      	itt	eq
 8007c3c:	6811      	ldreq	r1, [r2, #0]
 8007c3e:	6852      	ldreq	r2, [r2, #4]
 8007c40:	6062      	str	r2, [r4, #4]
 8007c42:	bf04      	itt	eq
 8007c44:	1809      	addeq	r1, r1, r0
 8007c46:	6021      	streq	r1, [r4, #0]
 8007c48:	605c      	str	r4, [r3, #4]
 8007c4a:	e7c7      	b.n	8007bdc <_free_r+0x24>
 8007c4c:	bd38      	pop	{r3, r4, r5, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000254 	.word	0x20000254

08007c54 <_malloc_r>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	1ccd      	adds	r5, r1, #3
 8007c58:	f025 0503 	bic.w	r5, r5, #3
 8007c5c:	3508      	adds	r5, #8
 8007c5e:	2d0c      	cmp	r5, #12
 8007c60:	bf38      	it	cc
 8007c62:	250c      	movcc	r5, #12
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	4606      	mov	r6, r0
 8007c68:	db01      	blt.n	8007c6e <_malloc_r+0x1a>
 8007c6a:	42a9      	cmp	r1, r5
 8007c6c:	d903      	bls.n	8007c76 <_malloc_r+0x22>
 8007c6e:	230c      	movs	r3, #12
 8007c70:	6033      	str	r3, [r6, #0]
 8007c72:	2000      	movs	r0, #0
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
 8007c76:	f000 f85b 	bl	8007d30 <__malloc_lock>
 8007c7a:	4a23      	ldr	r2, [pc, #140]	; (8007d08 <_malloc_r+0xb4>)
 8007c7c:	6814      	ldr	r4, [r2, #0]
 8007c7e:	4621      	mov	r1, r4
 8007c80:	b991      	cbnz	r1, 8007ca8 <_malloc_r+0x54>
 8007c82:	4c22      	ldr	r4, [pc, #136]	; (8007d0c <_malloc_r+0xb8>)
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	b91b      	cbnz	r3, 8007c90 <_malloc_r+0x3c>
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f000 f841 	bl	8007d10 <_sbrk_r>
 8007c8e:	6020      	str	r0, [r4, #0]
 8007c90:	4629      	mov	r1, r5
 8007c92:	4630      	mov	r0, r6
 8007c94:	f000 f83c 	bl	8007d10 <_sbrk_r>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d126      	bne.n	8007cea <_malloc_r+0x96>
 8007c9c:	230c      	movs	r3, #12
 8007c9e:	6033      	str	r3, [r6, #0]
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	f000 f846 	bl	8007d32 <__malloc_unlock>
 8007ca6:	e7e4      	b.n	8007c72 <_malloc_r+0x1e>
 8007ca8:	680b      	ldr	r3, [r1, #0]
 8007caa:	1b5b      	subs	r3, r3, r5
 8007cac:	d41a      	bmi.n	8007ce4 <_malloc_r+0x90>
 8007cae:	2b0b      	cmp	r3, #11
 8007cb0:	d90f      	bls.n	8007cd2 <_malloc_r+0x7e>
 8007cb2:	600b      	str	r3, [r1, #0]
 8007cb4:	50cd      	str	r5, [r1, r3]
 8007cb6:	18cc      	adds	r4, r1, r3
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f000 f83a 	bl	8007d32 <__malloc_unlock>
 8007cbe:	f104 000b 	add.w	r0, r4, #11
 8007cc2:	1d23      	adds	r3, r4, #4
 8007cc4:	f020 0007 	bic.w	r0, r0, #7
 8007cc8:	1ac3      	subs	r3, r0, r3
 8007cca:	d01b      	beq.n	8007d04 <_malloc_r+0xb0>
 8007ccc:	425a      	negs	r2, r3
 8007cce:	50e2      	str	r2, [r4, r3]
 8007cd0:	bd70      	pop	{r4, r5, r6, pc}
 8007cd2:	428c      	cmp	r4, r1
 8007cd4:	bf0d      	iteet	eq
 8007cd6:	6863      	ldreq	r3, [r4, #4]
 8007cd8:	684b      	ldrne	r3, [r1, #4]
 8007cda:	6063      	strne	r3, [r4, #4]
 8007cdc:	6013      	streq	r3, [r2, #0]
 8007cde:	bf18      	it	ne
 8007ce0:	460c      	movne	r4, r1
 8007ce2:	e7e9      	b.n	8007cb8 <_malloc_r+0x64>
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	6849      	ldr	r1, [r1, #4]
 8007ce8:	e7ca      	b.n	8007c80 <_malloc_r+0x2c>
 8007cea:	1cc4      	adds	r4, r0, #3
 8007cec:	f024 0403 	bic.w	r4, r4, #3
 8007cf0:	42a0      	cmp	r0, r4
 8007cf2:	d005      	beq.n	8007d00 <_malloc_r+0xac>
 8007cf4:	1a21      	subs	r1, r4, r0
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f000 f80a 	bl	8007d10 <_sbrk_r>
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	d0cd      	beq.n	8007c9c <_malloc_r+0x48>
 8007d00:	6025      	str	r5, [r4, #0]
 8007d02:	e7d9      	b.n	8007cb8 <_malloc_r+0x64>
 8007d04:	bd70      	pop	{r4, r5, r6, pc}
 8007d06:	bf00      	nop
 8007d08:	20000254 	.word	0x20000254
 8007d0c:	20000258 	.word	0x20000258

08007d10 <_sbrk_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4c06      	ldr	r4, [pc, #24]	; (8007d2c <_sbrk_r+0x1c>)
 8007d14:	2300      	movs	r3, #0
 8007d16:	4605      	mov	r5, r0
 8007d18:	4608      	mov	r0, r1
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	f000 f80a 	bl	8007d34 <_sbrk>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d102      	bne.n	8007d2a <_sbrk_r+0x1a>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	b103      	cbz	r3, 8007d2a <_sbrk_r+0x1a>
 8007d28:	602b      	str	r3, [r5, #0]
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	20000ba0 	.word	0x20000ba0

08007d30 <__malloc_lock>:
 8007d30:	4770      	bx	lr

08007d32 <__malloc_unlock>:
 8007d32:	4770      	bx	lr

08007d34 <_sbrk>:
 8007d34:	4b04      	ldr	r3, [pc, #16]	; (8007d48 <_sbrk+0x14>)
 8007d36:	6819      	ldr	r1, [r3, #0]
 8007d38:	4602      	mov	r2, r0
 8007d3a:	b909      	cbnz	r1, 8007d40 <_sbrk+0xc>
 8007d3c:	4903      	ldr	r1, [pc, #12]	; (8007d4c <_sbrk+0x18>)
 8007d3e:	6019      	str	r1, [r3, #0]
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	4402      	add	r2, r0
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	4770      	bx	lr
 8007d48:	2000025c 	.word	0x2000025c
 8007d4c:	20000ba4 	.word	0x20000ba4

08007d50 <_init>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr

08007d5c <_fini>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr
